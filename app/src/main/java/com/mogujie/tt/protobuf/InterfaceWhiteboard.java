// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Interface_whiteboard.proto

package com.mogujie.tt.protobuf;

public final class InterfaceWhiteboard {
  private InterfaceWhiteboard() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface pbui_Item_MeetMemberColorDetailInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pbui_Item_MeetMemberColorDetailInfo)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *参会人员ID
     * </pre>
     *
     * <code>fixed32 memberid = 1;</code>
     */
    int getMemberid();

    /**
     * <pre>
     *颜色值
     * </pre>
     *
     * <code>fixed32 rgb = 2;</code>
     */
    int getRgb();
  }
  /**
   * <pre>
   *参会人白板颜色
   * </pre>
   *
   * Protobuf type {@code pbui_Item_MeetMemberColorDetailInfo}
   */
  public  static final class pbui_Item_MeetMemberColorDetailInfo extends
      com.google.protobuf.GeneratedMessageLite<
          pbui_Item_MeetMemberColorDetailInfo, pbui_Item_MeetMemberColorDetailInfo.Builder> implements
      // @@protoc_insertion_point(message_implements:pbui_Item_MeetMemberColorDetailInfo)
      pbui_Item_MeetMemberColorDetailInfoOrBuilder {
    private pbui_Item_MeetMemberColorDetailInfo() {
    }
    public static final int MEMBERID_FIELD_NUMBER = 1;
    private int memberid_;
    /**
     * <pre>
     *参会人员ID
     * </pre>
     *
     * <code>fixed32 memberid = 1;</code>
     */
    public int getMemberid() {
      return memberid_;
    }
    /**
     * <pre>
     *参会人员ID
     * </pre>
     *
     * <code>fixed32 memberid = 1;</code>
     */
    private void setMemberid(int value) {
      
      memberid_ = value;
    }
    /**
     * <pre>
     *参会人员ID
     * </pre>
     *
     * <code>fixed32 memberid = 1;</code>
     */
    private void clearMemberid() {
      
      memberid_ = 0;
    }

    public static final int RGB_FIELD_NUMBER = 2;
    private int rgb_;
    /**
     * <pre>
     *颜色值
     * </pre>
     *
     * <code>fixed32 rgb = 2;</code>
     */
    public int getRgb() {
      return rgb_;
    }
    /**
     * <pre>
     *颜色值
     * </pre>
     *
     * <code>fixed32 rgb = 2;</code>
     */
    private void setRgb(int value) {
      
      rgb_ = value;
    }
    /**
     * <pre>
     *颜色值
     * </pre>
     *
     * <code>fixed32 rgb = 2;</code>
     */
    private void clearRgb() {
      
      rgb_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (memberid_ != 0) {
        output.writeFixed32(1, memberid_);
      }
      if (rgb_ != 0) {
        output.writeFixed32(2, rgb_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (memberid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, memberid_);
      }
      if (rgb_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(2, rgb_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     *参会人白板颜色
     * </pre>
     *
     * Protobuf type {@code pbui_Item_MeetMemberColorDetailInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo, Builder> implements
        // @@protoc_insertion_point(builder_implements:pbui_Item_MeetMemberColorDetailInfo)
        com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfoOrBuilder {
      // Construct using com.mogujie.tt.com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *参会人员ID
       * </pre>
       *
       * <code>fixed32 memberid = 1;</code>
       */
      public int getMemberid() {
        return instance.getMemberid();
      }
      /**
       * <pre>
       *参会人员ID
       * </pre>
       *
       * <code>fixed32 memberid = 1;</code>
       */
      public Builder setMemberid(int value) {
        copyOnWrite();
        instance.setMemberid(value);
        return this;
      }
      /**
       * <pre>
       *参会人员ID
       * </pre>
       *
       * <code>fixed32 memberid = 1;</code>
       */
      public Builder clearMemberid() {
        copyOnWrite();
        instance.clearMemberid();
        return this;
      }

      /**
       * <pre>
       *颜色值
       * </pre>
       *
       * <code>fixed32 rgb = 2;</code>
       */
      public int getRgb() {
        return instance.getRgb();
      }
      /**
       * <pre>
       *颜色值
       * </pre>
       *
       * <code>fixed32 rgb = 2;</code>
       */
      public Builder setRgb(int value) {
        copyOnWrite();
        instance.setRgb(value);
        return this;
      }
      /**
       * <pre>
       *颜色值
       * </pre>
       *
       * <code>fixed32 rgb = 2;</code>
       */
      public Builder clearRgb() {
        copyOnWrite();
        instance.clearRgb();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pbui_Item_MeetMemberColorDetailInfo)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo other = (com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo) arg1;
          memberid_ = visitor.visitInt(memberid_ != 0, memberid_,
              other.memberid_ != 0, other.memberid_);
          rgb_ = visitor.visitInt(rgb_ != 0, rgb_,
              other.rgb_ != 0, other.rgb_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 13: {

                  memberid_ = input.readFixed32();
                  break;
                }
                case 21: {

                  rgb_ = input.readFixed32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pbui_Item_MeetMemberColorDetailInfo)
    private static final com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pbui_Item_MeetMemberColorDetailInfo();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<pbui_Item_MeetMemberColorDetailInfo> PARSER;

    public static com.google.protobuf.Parser<pbui_Item_MeetMemberColorDetailInfo> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface pbui_Type_MeetMemberColorDetailInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pbui_Type_MeetMemberColorDetailInfo)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .pbui_Item_MeetMemberColorDetailInfo item = 1;</code>
     */
    java.util.List<com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo> 
        getItemList();
    /**
     * <code>repeated .pbui_Item_MeetMemberColorDetailInfo item = 1;</code>
     */
    com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo getItem(int index);
    /**
     * <code>repeated .pbui_Item_MeetMemberColorDetailInfo item = 1;</code>
     */
    int getItemCount();
  }
  /**
   * <pre>
   *参会人白板颜色
   *call
   *type:Pb_TYPE_MEET_INTERFACE_MEMBERCOLOR
   *method: query/mod/
   * </pre>
   *
   * Protobuf type {@code pbui_Type_MeetMemberColorDetailInfo}
   */
  public  static final class pbui_Type_MeetMemberColorDetailInfo extends
      com.google.protobuf.GeneratedMessageLite<
          pbui_Type_MeetMemberColorDetailInfo, pbui_Type_MeetMemberColorDetailInfo.Builder> implements
      // @@protoc_insertion_point(message_implements:pbui_Type_MeetMemberColorDetailInfo)
      pbui_Type_MeetMemberColorDetailInfoOrBuilder {
    private pbui_Type_MeetMemberColorDetailInfo() {
      item_ = emptyProtobufList();
    }
    public static final int ITEM_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo> item_;
    /**
     * <code>repeated .pbui_Item_MeetMemberColorDetailInfo item = 1;</code>
     */
    public java.util.List<com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo> getItemList() {
      return item_;
    }
    /**
     * <code>repeated .pbui_Item_MeetMemberColorDetailInfo item = 1;</code>
     */
    public java.util.List<? extends com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfoOrBuilder> 
        getItemOrBuilderList() {
      return item_;
    }
    /**
     * <code>repeated .pbui_Item_MeetMemberColorDetailInfo item = 1;</code>
     */
    public int getItemCount() {
      return item_.size();
    }
    /**
     * <code>repeated .pbui_Item_MeetMemberColorDetailInfo item = 1;</code>
     */
    public com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo getItem(int index) {
      return item_.get(index);
    }
    /**
     * <code>repeated .pbui_Item_MeetMemberColorDetailInfo item = 1;</code>
     */
    public com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfoOrBuilder getItemOrBuilder(
        int index) {
      return item_.get(index);
    }
    private void ensureItemIsMutable() {
      if (!item_.isModifiable()) {
        item_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(item_);
       }
    }

    /**
     * <code>repeated .pbui_Item_MeetMemberColorDetailInfo item = 1;</code>
     */
    private void setItem(
        int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureItemIsMutable();
      item_.set(index, value);
    }
    /**
     * <code>repeated .pbui_Item_MeetMemberColorDetailInfo item = 1;</code>
     */
    private void setItem(
        int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo.Builder builderForValue) {
      ensureItemIsMutable();
      item_.set(index, builderForValue.build());
    }
    /**
     * <code>repeated .pbui_Item_MeetMemberColorDetailInfo item = 1;</code>
     */
    private void addItem(com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureItemIsMutable();
      item_.add(value);
    }
    /**
     * <code>repeated .pbui_Item_MeetMemberColorDetailInfo item = 1;</code>
     */
    private void addItem(
        int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureItemIsMutable();
      item_.add(index, value);
    }
    /**
     * <code>repeated .pbui_Item_MeetMemberColorDetailInfo item = 1;</code>
     */
    private void addItem(
        com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo.Builder builderForValue) {
      ensureItemIsMutable();
      item_.add(builderForValue.build());
    }
    /**
     * <code>repeated .pbui_Item_MeetMemberColorDetailInfo item = 1;</code>
     */
    private void addItem(
        int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo.Builder builderForValue) {
      ensureItemIsMutable();
      item_.add(index, builderForValue.build());
    }
    /**
     * <code>repeated .pbui_Item_MeetMemberColorDetailInfo item = 1;</code>
     */
    private void addAllItem(
        java.lang.Iterable<? extends com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo> values) {
      ensureItemIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, item_);
    }
    /**
     * <code>repeated .pbui_Item_MeetMemberColorDetailInfo item = 1;</code>
     */
    private void clearItem() {
      item_ = emptyProtobufList();
    }
    /**
     * <code>repeated .pbui_Item_MeetMemberColorDetailInfo item = 1;</code>
     */
    private void removeItem(int index) {
      ensureItemIsMutable();
      item_.remove(index);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < item_.size(); i++) {
        output.writeMessage(1, item_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < item_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, item_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetMemberColorDetailInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetMemberColorDetailInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetMemberColorDetailInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetMemberColorDetailInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetMemberColorDetailInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetMemberColorDetailInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetMemberColorDetailInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetMemberColorDetailInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetMemberColorDetailInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetMemberColorDetailInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetMemberColorDetailInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetMemberColorDetailInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetMemberColorDetailInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     *参会人白板颜色
     *call
     *type:Pb_TYPE_MEET_INTERFACE_MEMBERCOLOR
     *method: query/mod/
     * </pre>
     *
     * Protobuf type {@code pbui_Type_MeetMemberColorDetailInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetMemberColorDetailInfo, Builder> implements
        // @@protoc_insertion_point(builder_implements:pbui_Type_MeetMemberColorDetailInfo)
        com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetMemberColorDetailInfoOrBuilder {
      // Construct using com.mogujie.tt.com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetMemberColorDetailInfo.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated .pbui_Item_MeetMemberColorDetailInfo item = 1;</code>
       */
      public java.util.List<com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo> getItemList() {
        return java.util.Collections.unmodifiableList(
            instance.getItemList());
      }
      /**
       * <code>repeated .pbui_Item_MeetMemberColorDetailInfo item = 1;</code>
       */
      public int getItemCount() {
        return instance.getItemCount();
      }/**
       * <code>repeated .pbui_Item_MeetMemberColorDetailInfo item = 1;</code>
       */
      public com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo getItem(int index) {
        return instance.getItem(index);
      }
      /**
       * <code>repeated .pbui_Item_MeetMemberColorDetailInfo item = 1;</code>
       */
      public Builder setItem(
          int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo value) {
        copyOnWrite();
        instance.setItem(index, value);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetMemberColorDetailInfo item = 1;</code>
       */
      public Builder setItem(
          int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo.Builder builderForValue) {
        copyOnWrite();
        instance.setItem(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetMemberColorDetailInfo item = 1;</code>
       */
      public Builder addItem(com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo value) {
        copyOnWrite();
        instance.addItem(value);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetMemberColorDetailInfo item = 1;</code>
       */
      public Builder addItem(
          int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo value) {
        copyOnWrite();
        instance.addItem(index, value);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetMemberColorDetailInfo item = 1;</code>
       */
      public Builder addItem(
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo.Builder builderForValue) {
        copyOnWrite();
        instance.addItem(builderForValue);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetMemberColorDetailInfo item = 1;</code>
       */
      public Builder addItem(
          int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo.Builder builderForValue) {
        copyOnWrite();
        instance.addItem(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetMemberColorDetailInfo item = 1;</code>
       */
      public Builder addAllItem(
          java.lang.Iterable<? extends com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo> values) {
        copyOnWrite();
        instance.addAllItem(values);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetMemberColorDetailInfo item = 1;</code>
       */
      public Builder clearItem() {
        copyOnWrite();
        instance.clearItem();
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetMemberColorDetailInfo item = 1;</code>
       */
      public Builder removeItem(int index) {
        copyOnWrite();
        instance.removeItem(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pbui_Type_MeetMemberColorDetailInfo)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetMemberColorDetailInfo();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          item_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetMemberColorDetailInfo other = (com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetMemberColorDetailInfo) arg1;
          item_= visitor.visitList(item_, other.item_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  if (!item_.isModifiable()) {
                    item_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(item_);
                  }
                  item_.add(
                      input.readMessage(com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetMemberColorDetailInfo.parser(), extensionRegistry));
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetMemberColorDetailInfo.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pbui_Type_MeetMemberColorDetailInfo)
    private static final com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetMemberColorDetailInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pbui_Type_MeetMemberColorDetailInfo();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetMemberColorDetailInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<pbui_Type_MeetMemberColorDetailInfo> PARSER;

    public static com.google.protobuf.Parser<pbui_Type_MeetMemberColorDetailInfo> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface pbui_Type_MeetWhiteBoardControlOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pbui_Type_MeetWhiteBoardControl)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *指定操作标志 参见Pb_MeetPostilOperType
     * </pre>
     *
     * <code>fixed32 operflag = 1;</code>
     */
    int getOperflag();

    /**
     * <pre>
     *白板操作描述
     * </pre>
     *
     * <code>bytes medianame = 2;</code>
     */
    com.google.protobuf.ByteString getMedianame();

    /**
     * <pre>
     *当前该命令的人员ID
     * </pre>
     *
     * <code>fixed32 opermemberid = 3;</code>
     */
    int getOpermemberid();

    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 4;</code>
     */
    int getSrcmemid();

    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 5;</code>
     */
    long getSrcwbid();

    /**
     * <pre>
     *参会人员
     * </pre>
     *
     * <code>repeated fixed32 userid = 6;</code>
     */
    java.util.List<java.lang.Integer> getUseridList();
    /**
     * <pre>
     *参会人员
     * </pre>
     *
     * <code>repeated fixed32 userid = 6;</code>
     */
    int getUseridCount();
    /**
     * <pre>
     *参会人员
     * </pre>
     *
     * <code>repeated fixed32 userid = 6;</code>
     */
    int getUserid(int index);
  }
  /**
   * <pre>
   *&#47;/////////////////////////////////////////////////////////////////////
   *执行一个白板操作 用于会议交流 指定需要执行操作的标志
   *call
   *type:Pb_TYPE_MEET_INTERFACE_WHITEBOARD
   *method: control 
   * </pre>
   *
   * Protobuf type {@code pbui_Type_MeetWhiteBoardControl}
   */
  public  static final class pbui_Type_MeetWhiteBoardControl extends
      com.google.protobuf.GeneratedMessageLite<
          pbui_Type_MeetWhiteBoardControl, pbui_Type_MeetWhiteBoardControl.Builder> implements
      // @@protoc_insertion_point(message_implements:pbui_Type_MeetWhiteBoardControl)
      pbui_Type_MeetWhiteBoardControlOrBuilder {
    private pbui_Type_MeetWhiteBoardControl() {
      medianame_ = com.google.protobuf.ByteString.EMPTY;
      userid_ = emptyIntList();
    }
    private int bitField0_;
    public static final int OPERFLAG_FIELD_NUMBER = 1;
    private int operflag_;
    /**
     * <pre>
     *指定操作标志 参见Pb_MeetPostilOperType
     * </pre>
     *
     * <code>fixed32 operflag = 1;</code>
     */
    public int getOperflag() {
      return operflag_;
    }
    /**
     * <pre>
     *指定操作标志 参见Pb_MeetPostilOperType
     * </pre>
     *
     * <code>fixed32 operflag = 1;</code>
     */
    private void setOperflag(int value) {
      
      operflag_ = value;
    }
    /**
     * <pre>
     *指定操作标志 参见Pb_MeetPostilOperType
     * </pre>
     *
     * <code>fixed32 operflag = 1;</code>
     */
    private void clearOperflag() {
      
      operflag_ = 0;
    }

    public static final int MEDIANAME_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString medianame_;
    /**
     * <pre>
     *白板操作描述
     * </pre>
     *
     * <code>bytes medianame = 2;</code>
     */
    public com.google.protobuf.ByteString getMedianame() {
      return medianame_;
    }
    /**
     * <pre>
     *白板操作描述
     * </pre>
     *
     * <code>bytes medianame = 2;</code>
     */
    private void setMedianame(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      medianame_ = value;
    }
    /**
     * <pre>
     *白板操作描述
     * </pre>
     *
     * <code>bytes medianame = 2;</code>
     */
    private void clearMedianame() {
      
      medianame_ = getDefaultInstance().getMedianame();
    }

    public static final int OPERMEMBERID_FIELD_NUMBER = 3;
    private int opermemberid_;
    /**
     * <pre>
     *当前该命令的人员ID
     * </pre>
     *
     * <code>fixed32 opermemberid = 3;</code>
     */
    public int getOpermemberid() {
      return opermemberid_;
    }
    /**
     * <pre>
     *当前该命令的人员ID
     * </pre>
     *
     * <code>fixed32 opermemberid = 3;</code>
     */
    private void setOpermemberid(int value) {
      
      opermemberid_ = value;
    }
    /**
     * <pre>
     *当前该命令的人员ID
     * </pre>
     *
     * <code>fixed32 opermemberid = 3;</code>
     */
    private void clearOpermemberid() {
      
      opermemberid_ = 0;
    }

    public static final int SRCMEMID_FIELD_NUMBER = 4;
    private int srcmemid_;
    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 4;</code>
     */
    public int getSrcmemid() {
      return srcmemid_;
    }
    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 4;</code>
     */
    private void setSrcmemid(int value) {
      
      srcmemid_ = value;
    }
    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 4;</code>
     */
    private void clearSrcmemid() {
      
      srcmemid_ = 0;
    }

    public static final int SRCWBID_FIELD_NUMBER = 5;
    private long srcwbid_;
    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 5;</code>
     */
    public long getSrcwbid() {
      return srcwbid_;
    }
    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 5;</code>
     */
    private void setSrcwbid(long value) {
      
      srcwbid_ = value;
    }
    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 5;</code>
     */
    private void clearSrcwbid() {
      
      srcwbid_ = 0L;
    }

    public static final int USERID_FIELD_NUMBER = 6;
    private com.google.protobuf.Internal.IntList userid_;
    /**
     * <pre>
     *参会人员
     * </pre>
     *
     * <code>repeated fixed32 userid = 6;</code>
     */
    public java.util.List<java.lang.Integer>
        getUseridList() {
      return userid_;
    }
    /**
     * <pre>
     *参会人员
     * </pre>
     *
     * <code>repeated fixed32 userid = 6;</code>
     */
    public int getUseridCount() {
      return userid_.size();
    }
    /**
     * <pre>
     *参会人员
     * </pre>
     *
     * <code>repeated fixed32 userid = 6;</code>
     */
    public int getUserid(int index) {
      return userid_.getInt(index);
    }
    private void ensureUseridIsMutable() {
      if (!userid_.isModifiable()) {
        userid_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(userid_);
       }
    }
    /**
     * <pre>
     *参会人员
     * </pre>
     *
     * <code>repeated fixed32 userid = 6;</code>
     */
    private void setUserid(
        int index, int value) {
      ensureUseridIsMutable();
      userid_.setInt(index, value);
    }
    /**
     * <pre>
     *参会人员
     * </pre>
     *
     * <code>repeated fixed32 userid = 6;</code>
     */
    private void addUserid(int value) {
      ensureUseridIsMutable();
      userid_.addInt(value);
    }
    /**
     * <pre>
     *参会人员
     * </pre>
     *
     * <code>repeated fixed32 userid = 6;</code>
     */
    private void addAllUserid(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureUseridIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, userid_);
    }
    /**
     * <pre>
     *参会人员
     * </pre>
     *
     * <code>repeated fixed32 userid = 6;</code>
     */
    private void clearUserid() {
      userid_ = emptyIntList();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (operflag_ != 0) {
        output.writeFixed32(1, operflag_);
      }
      if (!medianame_.isEmpty()) {
        output.writeBytes(2, medianame_);
      }
      if (opermemberid_ != 0) {
        output.writeFixed32(3, opermemberid_);
      }
      if (srcmemid_ != 0) {
        output.writeFixed32(4, srcmemid_);
      }
      if (srcwbid_ != 0L) {
        output.writeFixed64(5, srcwbid_);
      }
      for (int i = 0; i < userid_.size(); i++) {
        output.writeFixed32(6, userid_.getInt(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (operflag_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, operflag_);
      }
      if (!medianame_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, medianame_);
      }
      if (opermemberid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(3, opermemberid_);
      }
      if (srcmemid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(4, srcmemid_);
      }
      if (srcwbid_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(5, srcwbid_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getUseridList().size();
        size += dataSize;
        size += 1 * getUseridList().size();
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardControl parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardControl parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardControl parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardControl parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardControl parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardControl parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardControl parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardControl parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardControl parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardControl parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardControl parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardControl parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardControl prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     *&#47;/////////////////////////////////////////////////////////////////////
     *执行一个白板操作 用于会议交流 指定需要执行操作的标志
     *call
     *type:Pb_TYPE_MEET_INTERFACE_WHITEBOARD
     *method: control 
     * </pre>
     *
     * Protobuf type {@code pbui_Type_MeetWhiteBoardControl}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardControl, Builder> implements
        // @@protoc_insertion_point(builder_implements:pbui_Type_MeetWhiteBoardControl)
        com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardControlOrBuilder {
      // Construct using com.mogujie.tt.com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardControl.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *指定操作标志 参见Pb_MeetPostilOperType
       * </pre>
       *
       * <code>fixed32 operflag = 1;</code>
       */
      public int getOperflag() {
        return instance.getOperflag();
      }
      /**
       * <pre>
       *指定操作标志 参见Pb_MeetPostilOperType
       * </pre>
       *
       * <code>fixed32 operflag = 1;</code>
       */
      public Builder setOperflag(int value) {
        copyOnWrite();
        instance.setOperflag(value);
        return this;
      }
      /**
       * <pre>
       *指定操作标志 参见Pb_MeetPostilOperType
       * </pre>
       *
       * <code>fixed32 operflag = 1;</code>
       */
      public Builder clearOperflag() {
        copyOnWrite();
        instance.clearOperflag();
        return this;
      }

      /**
       * <pre>
       *白板操作描述
       * </pre>
       *
       * <code>bytes medianame = 2;</code>
       */
      public com.google.protobuf.ByteString getMedianame() {
        return instance.getMedianame();
      }
      /**
       * <pre>
       *白板操作描述
       * </pre>
       *
       * <code>bytes medianame = 2;</code>
       */
      public Builder setMedianame(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setMedianame(value);
        return this;
      }
      /**
       * <pre>
       *白板操作描述
       * </pre>
       *
       * <code>bytes medianame = 2;</code>
       */
      public Builder clearMedianame() {
        copyOnWrite();
        instance.clearMedianame();
        return this;
      }

      /**
       * <pre>
       *当前该命令的人员ID
       * </pre>
       *
       * <code>fixed32 opermemberid = 3;</code>
       */
      public int getOpermemberid() {
        return instance.getOpermemberid();
      }
      /**
       * <pre>
       *当前该命令的人员ID
       * </pre>
       *
       * <code>fixed32 opermemberid = 3;</code>
       */
      public Builder setOpermemberid(int value) {
        copyOnWrite();
        instance.setOpermemberid(value);
        return this;
      }
      /**
       * <pre>
       *当前该命令的人员ID
       * </pre>
       *
       * <code>fixed32 opermemberid = 3;</code>
       */
      public Builder clearOpermemberid() {
        copyOnWrite();
        instance.clearOpermemberid();
        return this;
      }

      /**
       * <pre>
       *发起人的人员ID 白板标识使用
       * </pre>
       *
       * <code>fixed32 srcmemid = 4;</code>
       */
      public int getSrcmemid() {
        return instance.getSrcmemid();
      }
      /**
       * <pre>
       *发起人的人员ID 白板标识使用
       * </pre>
       *
       * <code>fixed32 srcmemid = 4;</code>
       */
      public Builder setSrcmemid(int value) {
        copyOnWrite();
        instance.setSrcmemid(value);
        return this;
      }
      /**
       * <pre>
       *发起人的人员ID 白板标识使用
       * </pre>
       *
       * <code>fixed32 srcmemid = 4;</code>
       */
      public Builder clearSrcmemid() {
        copyOnWrite();
        instance.clearSrcmemid();
        return this;
      }

      /**
       * <pre>
       *发起人的白板标识 取微秒级的时间作标识 白板标识使用
       * </pre>
       *
       * <code>fixed64 srcwbid = 5;</code>
       */
      public long getSrcwbid() {
        return instance.getSrcwbid();
      }
      /**
       * <pre>
       *发起人的白板标识 取微秒级的时间作标识 白板标识使用
       * </pre>
       *
       * <code>fixed64 srcwbid = 5;</code>
       */
      public Builder setSrcwbid(long value) {
        copyOnWrite();
        instance.setSrcwbid(value);
        return this;
      }
      /**
       * <pre>
       *发起人的白板标识 取微秒级的时间作标识 白板标识使用
       * </pre>
       *
       * <code>fixed64 srcwbid = 5;</code>
       */
      public Builder clearSrcwbid() {
        copyOnWrite();
        instance.clearSrcwbid();
        return this;
      }

      /**
       * <pre>
       *参会人员
       * </pre>
       *
       * <code>repeated fixed32 userid = 6;</code>
       */
      public java.util.List<java.lang.Integer>
          getUseridList() {
        return java.util.Collections.unmodifiableList(
            instance.getUseridList());
      }
      /**
       * <pre>
       *参会人员
       * </pre>
       *
       * <code>repeated fixed32 userid = 6;</code>
       */
      public int getUseridCount() {
        return instance.getUseridCount();
      }
      /**
       * <pre>
       *参会人员
       * </pre>
       *
       * <code>repeated fixed32 userid = 6;</code>
       */
      public int getUserid(int index) {
        return instance.getUserid(index);
      }
      /**
       * <pre>
       *参会人员
       * </pre>
       *
       * <code>repeated fixed32 userid = 6;</code>
       */
      public Builder setUserid(
          int index, int value) {
        copyOnWrite();
        instance.setUserid(index, value);
        return this;
      }
      /**
       * <pre>
       *参会人员
       * </pre>
       *
       * <code>repeated fixed32 userid = 6;</code>
       */
      public Builder addUserid(int value) {
        copyOnWrite();
        instance.addUserid(value);
        return this;
      }
      /**
       * <pre>
       *参会人员
       * </pre>
       *
       * <code>repeated fixed32 userid = 6;</code>
       */
      public Builder addAllUserid(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllUserid(values);
        return this;
      }
      /**
       * <pre>
       *参会人员
       * </pre>
       *
       * <code>repeated fixed32 userid = 6;</code>
       */
      public Builder clearUserid() {
        copyOnWrite();
        instance.clearUserid();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pbui_Type_MeetWhiteBoardControl)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardControl();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          userid_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardControl other = (com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardControl) arg1;
          operflag_ = visitor.visitInt(operflag_ != 0, operflag_,
              other.operflag_ != 0, other.operflag_);
          medianame_ = visitor.visitByteString(medianame_ != com.google.protobuf.ByteString.EMPTY, medianame_,
              other.medianame_ != com.google.protobuf.ByteString.EMPTY, other.medianame_);
          opermemberid_ = visitor.visitInt(opermemberid_ != 0, opermemberid_,
              other.opermemberid_ != 0, other.opermemberid_);
          srcmemid_ = visitor.visitInt(srcmemid_ != 0, srcmemid_,
              other.srcmemid_ != 0, other.srcmemid_);
          srcwbid_ = visitor.visitLong(srcwbid_ != 0L, srcwbid_,
              other.srcwbid_ != 0L, other.srcwbid_);
          userid_= visitor.visitIntList(userid_, other.userid_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 13: {

                  operflag_ = input.readFixed32();
                  break;
                }
                case 18: {

                  medianame_ = input.readBytes();
                  break;
                }
                case 29: {

                  opermemberid_ = input.readFixed32();
                  break;
                }
                case 37: {

                  srcmemid_ = input.readFixed32();
                  break;
                }
                case 41: {

                  srcwbid_ = input.readFixed64();
                  break;
                }
                case 53: {
                  if (!userid_.isModifiable()) {
                    userid_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(userid_);
                  }
                  userid_.addInt(input.readFixed32());
                  break;
                }
                case 50: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  if (!userid_.isModifiable() && input.getBytesUntilLimit() > 0) {
                    final int currentSize = userid_.size();
                    userid_ = userid_.mutableCopyWithCapacity(
                        currentSize + (length/4));
                  }
                  while (input.getBytesUntilLimit() > 0) {
                    userid_.addInt(input.readFixed32());
                  }
                  input.popLimit(limit);
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardControl.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pbui_Type_MeetWhiteBoardControl)
    private static final com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardControl DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pbui_Type_MeetWhiteBoardControl();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardControl getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<pbui_Type_MeetWhiteBoardControl> PARSER;

    public static com.google.protobuf.Parser<pbui_Type_MeetWhiteBoardControl> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface pbui_Type_MeetStartWhiteBoardOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pbui_Type_MeetStartWhiteBoard)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *指定操作标志 参见Pb_MeetPostilOperType
     * </pre>
     *
     * <code>fixed32 operflag = 1;</code>
     */
    int getOperflag();

    /**
     * <pre>
     *白板操作描述
     * </pre>
     *
     * <code>bytes medianame = 2;</code>
     */
    com.google.protobuf.ByteString getMedianame();

    /**
     * <pre>
     *当前该命令的人员ID
     * </pre>
     *
     * <code>fixed32 opermemberid = 3;</code>
     */
    int getOpermemberid();

    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 4;</code>
     */
    int getSrcmemid();

    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 5;</code>
     */
    long getSrcwbid();
  }
  /**
   * <pre>
   *收到白板打开操作
   *callback
   *type:Pb_TYPE_MEET_INTERFACE_WHITEBOARD
   *method: ask 
   * </pre>
   *
   * Protobuf type {@code pbui_Type_MeetStartWhiteBoard}
   */
  public  static final class pbui_Type_MeetStartWhiteBoard extends
      com.google.protobuf.GeneratedMessageLite<
          pbui_Type_MeetStartWhiteBoard, pbui_Type_MeetStartWhiteBoard.Builder> implements
      // @@protoc_insertion_point(message_implements:pbui_Type_MeetStartWhiteBoard)
      pbui_Type_MeetStartWhiteBoardOrBuilder {
    private pbui_Type_MeetStartWhiteBoard() {
      medianame_ = com.google.protobuf.ByteString.EMPTY;
    }
    public static final int OPERFLAG_FIELD_NUMBER = 1;
    private int operflag_;
    /**
     * <pre>
     *指定操作标志 参见Pb_MeetPostilOperType
     * </pre>
     *
     * <code>fixed32 operflag = 1;</code>
     */
    public int getOperflag() {
      return operflag_;
    }
    /**
     * <pre>
     *指定操作标志 参见Pb_MeetPostilOperType
     * </pre>
     *
     * <code>fixed32 operflag = 1;</code>
     */
    private void setOperflag(int value) {
      
      operflag_ = value;
    }
    /**
     * <pre>
     *指定操作标志 参见Pb_MeetPostilOperType
     * </pre>
     *
     * <code>fixed32 operflag = 1;</code>
     */
    private void clearOperflag() {
      
      operflag_ = 0;
    }

    public static final int MEDIANAME_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString medianame_;
    /**
     * <pre>
     *白板操作描述
     * </pre>
     *
     * <code>bytes medianame = 2;</code>
     */
    public com.google.protobuf.ByteString getMedianame() {
      return medianame_;
    }
    /**
     * <pre>
     *白板操作描述
     * </pre>
     *
     * <code>bytes medianame = 2;</code>
     */
    private void setMedianame(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      medianame_ = value;
    }
    /**
     * <pre>
     *白板操作描述
     * </pre>
     *
     * <code>bytes medianame = 2;</code>
     */
    private void clearMedianame() {
      
      medianame_ = getDefaultInstance().getMedianame();
    }

    public static final int OPERMEMBERID_FIELD_NUMBER = 3;
    private int opermemberid_;
    /**
     * <pre>
     *当前该命令的人员ID
     * </pre>
     *
     * <code>fixed32 opermemberid = 3;</code>
     */
    public int getOpermemberid() {
      return opermemberid_;
    }
    /**
     * <pre>
     *当前该命令的人员ID
     * </pre>
     *
     * <code>fixed32 opermemberid = 3;</code>
     */
    private void setOpermemberid(int value) {
      
      opermemberid_ = value;
    }
    /**
     * <pre>
     *当前该命令的人员ID
     * </pre>
     *
     * <code>fixed32 opermemberid = 3;</code>
     */
    private void clearOpermemberid() {
      
      opermemberid_ = 0;
    }

    public static final int SRCMEMID_FIELD_NUMBER = 4;
    private int srcmemid_;
    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 4;</code>
     */
    public int getSrcmemid() {
      return srcmemid_;
    }
    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 4;</code>
     */
    private void setSrcmemid(int value) {
      
      srcmemid_ = value;
    }
    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 4;</code>
     */
    private void clearSrcmemid() {
      
      srcmemid_ = 0;
    }

    public static final int SRCWBID_FIELD_NUMBER = 5;
    private long srcwbid_;
    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 5;</code>
     */
    public long getSrcwbid() {
      return srcwbid_;
    }
    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 5;</code>
     */
    private void setSrcwbid(long value) {
      
      srcwbid_ = value;
    }
    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 5;</code>
     */
    private void clearSrcwbid() {
      
      srcwbid_ = 0L;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (operflag_ != 0) {
        output.writeFixed32(1, operflag_);
      }
      if (!medianame_.isEmpty()) {
        output.writeBytes(2, medianame_);
      }
      if (opermemberid_ != 0) {
        output.writeFixed32(3, opermemberid_);
      }
      if (srcmemid_ != 0) {
        output.writeFixed32(4, srcmemid_);
      }
      if (srcwbid_ != 0L) {
        output.writeFixed64(5, srcwbid_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (operflag_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, operflag_);
      }
      if (!medianame_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, medianame_);
      }
      if (opermemberid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(3, opermemberid_);
      }
      if (srcmemid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(4, srcmemid_);
      }
      if (srcwbid_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(5, srcwbid_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetStartWhiteBoard parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetStartWhiteBoard parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetStartWhiteBoard parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetStartWhiteBoard parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetStartWhiteBoard parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetStartWhiteBoard parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetStartWhiteBoard parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetStartWhiteBoard parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetStartWhiteBoard parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetStartWhiteBoard parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetStartWhiteBoard parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetStartWhiteBoard parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetStartWhiteBoard prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     *收到白板打开操作
     *callback
     *type:Pb_TYPE_MEET_INTERFACE_WHITEBOARD
     *method: ask 
     * </pre>
     *
     * Protobuf type {@code pbui_Type_MeetStartWhiteBoard}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetStartWhiteBoard, Builder> implements
        // @@protoc_insertion_point(builder_implements:pbui_Type_MeetStartWhiteBoard)
        com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetStartWhiteBoardOrBuilder {
      // Construct using com.mogujie.tt.com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetStartWhiteBoard.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *指定操作标志 参见Pb_MeetPostilOperType
       * </pre>
       *
       * <code>fixed32 operflag = 1;</code>
       */
      public int getOperflag() {
        return instance.getOperflag();
      }
      /**
       * <pre>
       *指定操作标志 参见Pb_MeetPostilOperType
       * </pre>
       *
       * <code>fixed32 operflag = 1;</code>
       */
      public Builder setOperflag(int value) {
        copyOnWrite();
        instance.setOperflag(value);
        return this;
      }
      /**
       * <pre>
       *指定操作标志 参见Pb_MeetPostilOperType
       * </pre>
       *
       * <code>fixed32 operflag = 1;</code>
       */
      public Builder clearOperflag() {
        copyOnWrite();
        instance.clearOperflag();
        return this;
      }

      /**
       * <pre>
       *白板操作描述
       * </pre>
       *
       * <code>bytes medianame = 2;</code>
       */
      public com.google.protobuf.ByteString getMedianame() {
        return instance.getMedianame();
      }
      /**
       * <pre>
       *白板操作描述
       * </pre>
       *
       * <code>bytes medianame = 2;</code>
       */
      public Builder setMedianame(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setMedianame(value);
        return this;
      }
      /**
       * <pre>
       *白板操作描述
       * </pre>
       *
       * <code>bytes medianame = 2;</code>
       */
      public Builder clearMedianame() {
        copyOnWrite();
        instance.clearMedianame();
        return this;
      }

      /**
       * <pre>
       *当前该命令的人员ID
       * </pre>
       *
       * <code>fixed32 opermemberid = 3;</code>
       */
      public int getOpermemberid() {
        return instance.getOpermemberid();
      }
      /**
       * <pre>
       *当前该命令的人员ID
       * </pre>
       *
       * <code>fixed32 opermemberid = 3;</code>
       */
      public Builder setOpermemberid(int value) {
        copyOnWrite();
        instance.setOpermemberid(value);
        return this;
      }
      /**
       * <pre>
       *当前该命令的人员ID
       * </pre>
       *
       * <code>fixed32 opermemberid = 3;</code>
       */
      public Builder clearOpermemberid() {
        copyOnWrite();
        instance.clearOpermemberid();
        return this;
      }

      /**
       * <pre>
       *发起人的人员ID 白板标识使用
       * </pre>
       *
       * <code>fixed32 srcmemid = 4;</code>
       */
      public int getSrcmemid() {
        return instance.getSrcmemid();
      }
      /**
       * <pre>
       *发起人的人员ID 白板标识使用
       * </pre>
       *
       * <code>fixed32 srcmemid = 4;</code>
       */
      public Builder setSrcmemid(int value) {
        copyOnWrite();
        instance.setSrcmemid(value);
        return this;
      }
      /**
       * <pre>
       *发起人的人员ID 白板标识使用
       * </pre>
       *
       * <code>fixed32 srcmemid = 4;</code>
       */
      public Builder clearSrcmemid() {
        copyOnWrite();
        instance.clearSrcmemid();
        return this;
      }

      /**
       * <pre>
       *发起人的白板标识 取微秒级的时间作标识 白板标识使用
       * </pre>
       *
       * <code>fixed64 srcwbid = 5;</code>
       */
      public long getSrcwbid() {
        return instance.getSrcwbid();
      }
      /**
       * <pre>
       *发起人的白板标识 取微秒级的时间作标识 白板标识使用
       * </pre>
       *
       * <code>fixed64 srcwbid = 5;</code>
       */
      public Builder setSrcwbid(long value) {
        copyOnWrite();
        instance.setSrcwbid(value);
        return this;
      }
      /**
       * <pre>
       *发起人的白板标识 取微秒级的时间作标识 白板标识使用
       * </pre>
       *
       * <code>fixed64 srcwbid = 5;</code>
       */
      public Builder clearSrcwbid() {
        copyOnWrite();
        instance.clearSrcwbid();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pbui_Type_MeetStartWhiteBoard)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetStartWhiteBoard();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetStartWhiteBoard other = (com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetStartWhiteBoard) arg1;
          operflag_ = visitor.visitInt(operflag_ != 0, operflag_,
              other.operflag_ != 0, other.operflag_);
          medianame_ = visitor.visitByteString(medianame_ != com.google.protobuf.ByteString.EMPTY, medianame_,
              other.medianame_ != com.google.protobuf.ByteString.EMPTY, other.medianame_);
          opermemberid_ = visitor.visitInt(opermemberid_ != 0, opermemberid_,
              other.opermemberid_ != 0, other.opermemberid_);
          srcmemid_ = visitor.visitInt(srcmemid_ != 0, srcmemid_,
              other.srcmemid_ != 0, other.srcmemid_);
          srcwbid_ = visitor.visitLong(srcwbid_ != 0L, srcwbid_,
              other.srcwbid_ != 0L, other.srcwbid_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 13: {

                  operflag_ = input.readFixed32();
                  break;
                }
                case 18: {

                  medianame_ = input.readBytes();
                  break;
                }
                case 29: {

                  opermemberid_ = input.readFixed32();
                  break;
                }
                case 37: {

                  srcmemid_ = input.readFixed32();
                  break;
                }
                case 41: {

                  srcwbid_ = input.readFixed64();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetStartWhiteBoard.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pbui_Type_MeetStartWhiteBoard)
    private static final com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetStartWhiteBoard DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pbui_Type_MeetStartWhiteBoard();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetStartWhiteBoard getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<pbui_Type_MeetStartWhiteBoard> PARSER;

    public static com.google.protobuf.Parser<pbui_Type_MeetStartWhiteBoard> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface pbui_Type_MeetWhiteBoardOperOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pbui_Type_MeetWhiteBoardOper)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *当前该命令的人员ID
     * </pre>
     *
     * <code>fixed32 opermemberid = 1;</code>
     */
    int getOpermemberid();

    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 2;</code>
     */
    int getSrcmemid();

    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 3;</code>
     */
    long getSrcwbid();
  }
  /**
   * <pre>
   *被邀请人拒绝加入你发起的白板(callback/call)
   *被邀请人退出了你发起的白板(callback)
   *被邀请人加入了你发起的白板(callback/call)
   *type:Pb_TYPE_MEET_INTERFACE_WHITEBOARD
   *method: reject&#92;exit&#92;enter
   * </pre>
   *
   * Protobuf type {@code pbui_Type_MeetWhiteBoardOper}
   */
  public  static final class pbui_Type_MeetWhiteBoardOper extends
      com.google.protobuf.GeneratedMessageLite<
          pbui_Type_MeetWhiteBoardOper, pbui_Type_MeetWhiteBoardOper.Builder> implements
      // @@protoc_insertion_point(message_implements:pbui_Type_MeetWhiteBoardOper)
      pbui_Type_MeetWhiteBoardOperOrBuilder {
    private pbui_Type_MeetWhiteBoardOper() {
    }
    public static final int OPERMEMBERID_FIELD_NUMBER = 1;
    private int opermemberid_;
    /**
     * <pre>
     *当前该命令的人员ID
     * </pre>
     *
     * <code>fixed32 opermemberid = 1;</code>
     */
    public int getOpermemberid() {
      return opermemberid_;
    }
    /**
     * <pre>
     *当前该命令的人员ID
     * </pre>
     *
     * <code>fixed32 opermemberid = 1;</code>
     */
    private void setOpermemberid(int value) {
      
      opermemberid_ = value;
    }
    /**
     * <pre>
     *当前该命令的人员ID
     * </pre>
     *
     * <code>fixed32 opermemberid = 1;</code>
     */
    private void clearOpermemberid() {
      
      opermemberid_ = 0;
    }

    public static final int SRCMEMID_FIELD_NUMBER = 2;
    private int srcmemid_;
    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 2;</code>
     */
    public int getSrcmemid() {
      return srcmemid_;
    }
    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 2;</code>
     */
    private void setSrcmemid(int value) {
      
      srcmemid_ = value;
    }
    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 2;</code>
     */
    private void clearSrcmemid() {
      
      srcmemid_ = 0;
    }

    public static final int SRCWBID_FIELD_NUMBER = 3;
    private long srcwbid_;
    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 3;</code>
     */
    public long getSrcwbid() {
      return srcwbid_;
    }
    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 3;</code>
     */
    private void setSrcwbid(long value) {
      
      srcwbid_ = value;
    }
    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 3;</code>
     */
    private void clearSrcwbid() {
      
      srcwbid_ = 0L;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (opermemberid_ != 0) {
        output.writeFixed32(1, opermemberid_);
      }
      if (srcmemid_ != 0) {
        output.writeFixed32(2, srcmemid_);
      }
      if (srcwbid_ != 0L) {
        output.writeFixed64(3, srcwbid_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (opermemberid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, opermemberid_);
      }
      if (srcmemid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(2, srcmemid_);
      }
      if (srcwbid_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(3, srcwbid_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardOper parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardOper parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardOper parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardOper parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardOper parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardOper parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardOper parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardOper parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardOper parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardOper parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardOper parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardOper parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardOper prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     *被邀请人拒绝加入你发起的白板(callback/call)
     *被邀请人退出了你发起的白板(callback)
     *被邀请人加入了你发起的白板(callback/call)
     *type:Pb_TYPE_MEET_INTERFACE_WHITEBOARD
     *method: reject&#92;exit&#92;enter
     * </pre>
     *
     * Protobuf type {@code pbui_Type_MeetWhiteBoardOper}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardOper, Builder> implements
        // @@protoc_insertion_point(builder_implements:pbui_Type_MeetWhiteBoardOper)
        com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardOperOrBuilder {
      // Construct using com.mogujie.tt.com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardOper.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *当前该命令的人员ID
       * </pre>
       *
       * <code>fixed32 opermemberid = 1;</code>
       */
      public int getOpermemberid() {
        return instance.getOpermemberid();
      }
      /**
       * <pre>
       *当前该命令的人员ID
       * </pre>
       *
       * <code>fixed32 opermemberid = 1;</code>
       */
      public Builder setOpermemberid(int value) {
        copyOnWrite();
        instance.setOpermemberid(value);
        return this;
      }
      /**
       * <pre>
       *当前该命令的人员ID
       * </pre>
       *
       * <code>fixed32 opermemberid = 1;</code>
       */
      public Builder clearOpermemberid() {
        copyOnWrite();
        instance.clearOpermemberid();
        return this;
      }

      /**
       * <pre>
       *发起人的人员ID 白板标识使用
       * </pre>
       *
       * <code>fixed32 srcmemid = 2;</code>
       */
      public int getSrcmemid() {
        return instance.getSrcmemid();
      }
      /**
       * <pre>
       *发起人的人员ID 白板标识使用
       * </pre>
       *
       * <code>fixed32 srcmemid = 2;</code>
       */
      public Builder setSrcmemid(int value) {
        copyOnWrite();
        instance.setSrcmemid(value);
        return this;
      }
      /**
       * <pre>
       *发起人的人员ID 白板标识使用
       * </pre>
       *
       * <code>fixed32 srcmemid = 2;</code>
       */
      public Builder clearSrcmemid() {
        copyOnWrite();
        instance.clearSrcmemid();
        return this;
      }

      /**
       * <pre>
       *发起人的白板标识 取微秒级的时间作标识 白板标识使用
       * </pre>
       *
       * <code>fixed64 srcwbid = 3;</code>
       */
      public long getSrcwbid() {
        return instance.getSrcwbid();
      }
      /**
       * <pre>
       *发起人的白板标识 取微秒级的时间作标识 白板标识使用
       * </pre>
       *
       * <code>fixed64 srcwbid = 3;</code>
       */
      public Builder setSrcwbid(long value) {
        copyOnWrite();
        instance.setSrcwbid(value);
        return this;
      }
      /**
       * <pre>
       *发起人的白板标识 取微秒级的时间作标识 白板标识使用
       * </pre>
       *
       * <code>fixed64 srcwbid = 3;</code>
       */
      public Builder clearSrcwbid() {
        copyOnWrite();
        instance.clearSrcwbid();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pbui_Type_MeetWhiteBoardOper)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardOper();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardOper other = (com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardOper) arg1;
          opermemberid_ = visitor.visitInt(opermemberid_ != 0, opermemberid_,
              other.opermemberid_ != 0, other.opermemberid_);
          srcmemid_ = visitor.visitInt(srcmemid_ != 0, srcmemid_,
              other.srcmemid_ != 0, other.srcmemid_);
          srcwbid_ = visitor.visitLong(srcwbid_ != 0L, srcwbid_,
              other.srcwbid_ != 0L, other.srcwbid_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 13: {

                  opermemberid_ = input.readFixed32();
                  break;
                }
                case 21: {

                  srcmemid_ = input.readFixed32();
                  break;
                }
                case 25: {

                  srcwbid_ = input.readFixed64();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardOper.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pbui_Type_MeetWhiteBoardOper)
    private static final com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardOper DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pbui_Type_MeetWhiteBoardOper();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardOper getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<pbui_Type_MeetWhiteBoardOper> PARSER;

    public static com.google.protobuf.Parser<pbui_Type_MeetWhiteBoardOper> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface pbui_Type_MeetClearWhiteBoardOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pbui_Type_MeetClearWhiteBoard)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 operid = 1;</code>
     */
    int getOperid();

    /**
     * <pre>
     *当前该命令的人员ID 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 opermemberid = 2;</code>
     */
    int getOpermemberid();

    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 3;</code>
     */
    int getSrcmemid();

    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 4;</code>
     */
    long getSrcwbid();

    /**
     * <pre>
     *时间戳  微秒
     * </pre>
     *
     * <code>fixed64 utcstamp = 5;</code>
     */
    long getUtcstamp();

    /**
     * <pre>
     *图形类型 为0表示清除所有等于figuretype的白板操作
     * </pre>
     *
     * <code>fixed32 figuretype = 6;</code>
     */
    int getFiguretype();
  }
  /**
   * <pre>
   *白板删除和清空记录通知
   *callback
   *type:Pb_TYPE_MEET_INTERFACE_WHITEBOARD
   *method: clear, del
   * </pre>
   *
   * Protobuf type {@code pbui_Type_MeetClearWhiteBoard}
   */
  public  static final class pbui_Type_MeetClearWhiteBoard extends
      com.google.protobuf.GeneratedMessageLite<
          pbui_Type_MeetClearWhiteBoard, pbui_Type_MeetClearWhiteBoard.Builder> implements
      // @@protoc_insertion_point(message_implements:pbui_Type_MeetClearWhiteBoard)
      pbui_Type_MeetClearWhiteBoardOrBuilder {
    private pbui_Type_MeetClearWhiteBoard() {
    }
    public static final int OPERID_FIELD_NUMBER = 1;
    private int operid_;
    /**
     * <pre>
     *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 operid = 1;</code>
     */
    public int getOperid() {
      return operid_;
    }
    /**
     * <pre>
     *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 operid = 1;</code>
     */
    private void setOperid(int value) {
      
      operid_ = value;
    }
    /**
     * <pre>
     *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 operid = 1;</code>
     */
    private void clearOperid() {
      
      operid_ = 0;
    }

    public static final int OPERMEMBERID_FIELD_NUMBER = 2;
    private int opermemberid_;
    /**
     * <pre>
     *当前该命令的人员ID 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 opermemberid = 2;</code>
     */
    public int getOpermemberid() {
      return opermemberid_;
    }
    /**
     * <pre>
     *当前该命令的人员ID 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 opermemberid = 2;</code>
     */
    private void setOpermemberid(int value) {
      
      opermemberid_ = value;
    }
    /**
     * <pre>
     *当前该命令的人员ID 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 opermemberid = 2;</code>
     */
    private void clearOpermemberid() {
      
      opermemberid_ = 0;
    }

    public static final int SRCMEMID_FIELD_NUMBER = 3;
    private int srcmemid_;
    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 3;</code>
     */
    public int getSrcmemid() {
      return srcmemid_;
    }
    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 3;</code>
     */
    private void setSrcmemid(int value) {
      
      srcmemid_ = value;
    }
    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 3;</code>
     */
    private void clearSrcmemid() {
      
      srcmemid_ = 0;
    }

    public static final int SRCWBID_FIELD_NUMBER = 4;
    private long srcwbid_;
    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 4;</code>
     */
    public long getSrcwbid() {
      return srcwbid_;
    }
    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 4;</code>
     */
    private void setSrcwbid(long value) {
      
      srcwbid_ = value;
    }
    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 4;</code>
     */
    private void clearSrcwbid() {
      
      srcwbid_ = 0L;
    }

    public static final int UTCSTAMP_FIELD_NUMBER = 5;
    private long utcstamp_;
    /**
     * <pre>
     *时间戳  微秒
     * </pre>
     *
     * <code>fixed64 utcstamp = 5;</code>
     */
    public long getUtcstamp() {
      return utcstamp_;
    }
    /**
     * <pre>
     *时间戳  微秒
     * </pre>
     *
     * <code>fixed64 utcstamp = 5;</code>
     */
    private void setUtcstamp(long value) {
      
      utcstamp_ = value;
    }
    /**
     * <pre>
     *时间戳  微秒
     * </pre>
     *
     * <code>fixed64 utcstamp = 5;</code>
     */
    private void clearUtcstamp() {
      
      utcstamp_ = 0L;
    }

    public static final int FIGURETYPE_FIELD_NUMBER = 6;
    private int figuretype_;
    /**
     * <pre>
     *图形类型 为0表示清除所有等于figuretype的白板操作
     * </pre>
     *
     * <code>fixed32 figuretype = 6;</code>
     */
    public int getFiguretype() {
      return figuretype_;
    }
    /**
     * <pre>
     *图形类型 为0表示清除所有等于figuretype的白板操作
     * </pre>
     *
     * <code>fixed32 figuretype = 6;</code>
     */
    private void setFiguretype(int value) {
      
      figuretype_ = value;
    }
    /**
     * <pre>
     *图形类型 为0表示清除所有等于figuretype的白板操作
     * </pre>
     *
     * <code>fixed32 figuretype = 6;</code>
     */
    private void clearFiguretype() {
      
      figuretype_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (operid_ != 0) {
        output.writeFixed32(1, operid_);
      }
      if (opermemberid_ != 0) {
        output.writeFixed32(2, opermemberid_);
      }
      if (srcmemid_ != 0) {
        output.writeFixed32(3, srcmemid_);
      }
      if (srcwbid_ != 0L) {
        output.writeFixed64(4, srcwbid_);
      }
      if (utcstamp_ != 0L) {
        output.writeFixed64(5, utcstamp_);
      }
      if (figuretype_ != 0) {
        output.writeFixed32(6, figuretype_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (operid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, operid_);
      }
      if (opermemberid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(2, opermemberid_);
      }
      if (srcmemid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(3, srcmemid_);
      }
      if (srcwbid_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(4, srcwbid_);
      }
      if (utcstamp_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(5, utcstamp_);
      }
      if (figuretype_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(6, figuretype_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetClearWhiteBoard parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetClearWhiteBoard parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetClearWhiteBoard parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetClearWhiteBoard parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetClearWhiteBoard parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetClearWhiteBoard parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetClearWhiteBoard parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetClearWhiteBoard parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetClearWhiteBoard parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetClearWhiteBoard parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetClearWhiteBoard parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetClearWhiteBoard parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetClearWhiteBoard prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     *白板删除和清空记录通知
     *callback
     *type:Pb_TYPE_MEET_INTERFACE_WHITEBOARD
     *method: clear, del
     * </pre>
     *
     * Protobuf type {@code pbui_Type_MeetClearWhiteBoard}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetClearWhiteBoard, Builder> implements
        // @@protoc_insertion_point(builder_implements:pbui_Type_MeetClearWhiteBoard)
        com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetClearWhiteBoardOrBuilder {
      // Construct using com.mogujie.tt.com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetClearWhiteBoard.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
       * </pre>
       *
       * <code>fixed32 operid = 1;</code>
       */
      public int getOperid() {
        return instance.getOperid();
      }
      /**
       * <pre>
       *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
       * </pre>
       *
       * <code>fixed32 operid = 1;</code>
       */
      public Builder setOperid(int value) {
        copyOnWrite();
        instance.setOperid(value);
        return this;
      }
      /**
       * <pre>
       *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
       * </pre>
       *
       * <code>fixed32 operid = 1;</code>
       */
      public Builder clearOperid() {
        copyOnWrite();
        instance.clearOperid();
        return this;
      }

      /**
       * <pre>
       *当前该命令的人员ID 为0表示清除所有等于opermemberid的白板操作
       * </pre>
       *
       * <code>fixed32 opermemberid = 2;</code>
       */
      public int getOpermemberid() {
        return instance.getOpermemberid();
      }
      /**
       * <pre>
       *当前该命令的人员ID 为0表示清除所有等于opermemberid的白板操作
       * </pre>
       *
       * <code>fixed32 opermemberid = 2;</code>
       */
      public Builder setOpermemberid(int value) {
        copyOnWrite();
        instance.setOpermemberid(value);
        return this;
      }
      /**
       * <pre>
       *当前该命令的人员ID 为0表示清除所有等于opermemberid的白板操作
       * </pre>
       *
       * <code>fixed32 opermemberid = 2;</code>
       */
      public Builder clearOpermemberid() {
        copyOnWrite();
        instance.clearOpermemberid();
        return this;
      }

      /**
       * <pre>
       *发起人的人员ID 白板标识使用
       * </pre>
       *
       * <code>fixed32 srcmemid = 3;</code>
       */
      public int getSrcmemid() {
        return instance.getSrcmemid();
      }
      /**
       * <pre>
       *发起人的人员ID 白板标识使用
       * </pre>
       *
       * <code>fixed32 srcmemid = 3;</code>
       */
      public Builder setSrcmemid(int value) {
        copyOnWrite();
        instance.setSrcmemid(value);
        return this;
      }
      /**
       * <pre>
       *发起人的人员ID 白板标识使用
       * </pre>
       *
       * <code>fixed32 srcmemid = 3;</code>
       */
      public Builder clearSrcmemid() {
        copyOnWrite();
        instance.clearSrcmemid();
        return this;
      }

      /**
       * <pre>
       *发起人的白板标识 取微秒级的时间作标识 白板标识使用
       * </pre>
       *
       * <code>fixed64 srcwbid = 4;</code>
       */
      public long getSrcwbid() {
        return instance.getSrcwbid();
      }
      /**
       * <pre>
       *发起人的白板标识 取微秒级的时间作标识 白板标识使用
       * </pre>
       *
       * <code>fixed64 srcwbid = 4;</code>
       */
      public Builder setSrcwbid(long value) {
        copyOnWrite();
        instance.setSrcwbid(value);
        return this;
      }
      /**
       * <pre>
       *发起人的白板标识 取微秒级的时间作标识 白板标识使用
       * </pre>
       *
       * <code>fixed64 srcwbid = 4;</code>
       */
      public Builder clearSrcwbid() {
        copyOnWrite();
        instance.clearSrcwbid();
        return this;
      }

      /**
       * <pre>
       *时间戳  微秒
       * </pre>
       *
       * <code>fixed64 utcstamp = 5;</code>
       */
      public long getUtcstamp() {
        return instance.getUtcstamp();
      }
      /**
       * <pre>
       *时间戳  微秒
       * </pre>
       *
       * <code>fixed64 utcstamp = 5;</code>
       */
      public Builder setUtcstamp(long value) {
        copyOnWrite();
        instance.setUtcstamp(value);
        return this;
      }
      /**
       * <pre>
       *时间戳  微秒
       * </pre>
       *
       * <code>fixed64 utcstamp = 5;</code>
       */
      public Builder clearUtcstamp() {
        copyOnWrite();
        instance.clearUtcstamp();
        return this;
      }

      /**
       * <pre>
       *图形类型 为0表示清除所有等于figuretype的白板操作
       * </pre>
       *
       * <code>fixed32 figuretype = 6;</code>
       */
      public int getFiguretype() {
        return instance.getFiguretype();
      }
      /**
       * <pre>
       *图形类型 为0表示清除所有等于figuretype的白板操作
       * </pre>
       *
       * <code>fixed32 figuretype = 6;</code>
       */
      public Builder setFiguretype(int value) {
        copyOnWrite();
        instance.setFiguretype(value);
        return this;
      }
      /**
       * <pre>
       *图形类型 为0表示清除所有等于figuretype的白板操作
       * </pre>
       *
       * <code>fixed32 figuretype = 6;</code>
       */
      public Builder clearFiguretype() {
        copyOnWrite();
        instance.clearFiguretype();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pbui_Type_MeetClearWhiteBoard)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetClearWhiteBoard();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetClearWhiteBoard other = (com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetClearWhiteBoard) arg1;
          operid_ = visitor.visitInt(operid_ != 0, operid_,
              other.operid_ != 0, other.operid_);
          opermemberid_ = visitor.visitInt(opermemberid_ != 0, opermemberid_,
              other.opermemberid_ != 0, other.opermemberid_);
          srcmemid_ = visitor.visitInt(srcmemid_ != 0, srcmemid_,
              other.srcmemid_ != 0, other.srcmemid_);
          srcwbid_ = visitor.visitLong(srcwbid_ != 0L, srcwbid_,
              other.srcwbid_ != 0L, other.srcwbid_);
          utcstamp_ = visitor.visitLong(utcstamp_ != 0L, utcstamp_,
              other.utcstamp_ != 0L, other.utcstamp_);
          figuretype_ = visitor.visitInt(figuretype_ != 0, figuretype_,
              other.figuretype_ != 0, other.figuretype_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 13: {

                  operid_ = input.readFixed32();
                  break;
                }
                case 21: {

                  opermemberid_ = input.readFixed32();
                  break;
                }
                case 29: {

                  srcmemid_ = input.readFixed32();
                  break;
                }
                case 33: {

                  srcwbid_ = input.readFixed64();
                  break;
                }
                case 41: {

                  utcstamp_ = input.readFixed64();
                  break;
                }
                case 53: {

                  figuretype_ = input.readFixed32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetClearWhiteBoard.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pbui_Type_MeetClearWhiteBoard)
    private static final com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetClearWhiteBoard DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pbui_Type_MeetClearWhiteBoard();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetClearWhiteBoard getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<pbui_Type_MeetClearWhiteBoard> PARSER;

    public static com.google.protobuf.Parser<pbui_Type_MeetClearWhiteBoard> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface pbui_Type_MeetDoClearWhiteBoardOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pbui_Type_MeetDoClearWhiteBoard)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *需要删除的人员ID 为0表示清除所有等于人员的白板操作
     * </pre>
     *
     * <code>fixed32 memberid = 1;</code>
     */
    int getMemberid();

    /**
     * <pre>
     *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 operid = 2;</code>
     */
    int getOperid();

    /**
     * <pre>
     *当前该命令的人员ID
     * </pre>
     *
     * <code>fixed32 opermemberid = 3;</code>
     */
    int getOpermemberid();

    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 4;</code>
     */
    int getSrcmemid();

    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 5;</code>
     */
    long getSrcwbid();

    /**
     * <pre>
     *时间戳 微秒
     * </pre>
     *
     * <code>fixed64 utcstamp = 6;</code>
     */
    long getUtcstamp();

    /**
     * <pre>
     *图形类型 为0表示清除所有类型的白板操作
     * </pre>
     *
     * <code>fixed32 figuretype = 7;</code>
     */
    int getFiguretype();
  }
  /**
   * <pre>
   *白板删除和清空记录操作
   *(call)
   *type:Pb_TYPE_MEET_INTERFACE_WHITEBOARD
   *method: delall, del 
   * </pre>
   *
   * Protobuf type {@code pbui_Type_MeetDoClearWhiteBoard}
   */
  public  static final class pbui_Type_MeetDoClearWhiteBoard extends
      com.google.protobuf.GeneratedMessageLite<
          pbui_Type_MeetDoClearWhiteBoard, pbui_Type_MeetDoClearWhiteBoard.Builder> implements
      // @@protoc_insertion_point(message_implements:pbui_Type_MeetDoClearWhiteBoard)
      pbui_Type_MeetDoClearWhiteBoardOrBuilder {
    private pbui_Type_MeetDoClearWhiteBoard() {
    }
    public static final int MEMBERID_FIELD_NUMBER = 1;
    private int memberid_;
    /**
     * <pre>
     *需要删除的人员ID 为0表示清除所有等于人员的白板操作
     * </pre>
     *
     * <code>fixed32 memberid = 1;</code>
     */
    public int getMemberid() {
      return memberid_;
    }
    /**
     * <pre>
     *需要删除的人员ID 为0表示清除所有等于人员的白板操作
     * </pre>
     *
     * <code>fixed32 memberid = 1;</code>
     */
    private void setMemberid(int value) {
      
      memberid_ = value;
    }
    /**
     * <pre>
     *需要删除的人员ID 为0表示清除所有等于人员的白板操作
     * </pre>
     *
     * <code>fixed32 memberid = 1;</code>
     */
    private void clearMemberid() {
      
      memberid_ = 0;
    }

    public static final int OPERID_FIELD_NUMBER = 2;
    private int operid_;
    /**
     * <pre>
     *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 operid = 2;</code>
     */
    public int getOperid() {
      return operid_;
    }
    /**
     * <pre>
     *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 operid = 2;</code>
     */
    private void setOperid(int value) {
      
      operid_ = value;
    }
    /**
     * <pre>
     *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 operid = 2;</code>
     */
    private void clearOperid() {
      
      operid_ = 0;
    }

    public static final int OPERMEMBERID_FIELD_NUMBER = 3;
    private int opermemberid_;
    /**
     * <pre>
     *当前该命令的人员ID
     * </pre>
     *
     * <code>fixed32 opermemberid = 3;</code>
     */
    public int getOpermemberid() {
      return opermemberid_;
    }
    /**
     * <pre>
     *当前该命令的人员ID
     * </pre>
     *
     * <code>fixed32 opermemberid = 3;</code>
     */
    private void setOpermemberid(int value) {
      
      opermemberid_ = value;
    }
    /**
     * <pre>
     *当前该命令的人员ID
     * </pre>
     *
     * <code>fixed32 opermemberid = 3;</code>
     */
    private void clearOpermemberid() {
      
      opermemberid_ = 0;
    }

    public static final int SRCMEMID_FIELD_NUMBER = 4;
    private int srcmemid_;
    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 4;</code>
     */
    public int getSrcmemid() {
      return srcmemid_;
    }
    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 4;</code>
     */
    private void setSrcmemid(int value) {
      
      srcmemid_ = value;
    }
    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 4;</code>
     */
    private void clearSrcmemid() {
      
      srcmemid_ = 0;
    }

    public static final int SRCWBID_FIELD_NUMBER = 5;
    private long srcwbid_;
    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 5;</code>
     */
    public long getSrcwbid() {
      return srcwbid_;
    }
    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 5;</code>
     */
    private void setSrcwbid(long value) {
      
      srcwbid_ = value;
    }
    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 5;</code>
     */
    private void clearSrcwbid() {
      
      srcwbid_ = 0L;
    }

    public static final int UTCSTAMP_FIELD_NUMBER = 6;
    private long utcstamp_;
    /**
     * <pre>
     *时间戳 微秒
     * </pre>
     *
     * <code>fixed64 utcstamp = 6;</code>
     */
    public long getUtcstamp() {
      return utcstamp_;
    }
    /**
     * <pre>
     *时间戳 微秒
     * </pre>
     *
     * <code>fixed64 utcstamp = 6;</code>
     */
    private void setUtcstamp(long value) {
      
      utcstamp_ = value;
    }
    /**
     * <pre>
     *时间戳 微秒
     * </pre>
     *
     * <code>fixed64 utcstamp = 6;</code>
     */
    private void clearUtcstamp() {
      
      utcstamp_ = 0L;
    }

    public static final int FIGURETYPE_FIELD_NUMBER = 7;
    private int figuretype_;
    /**
     * <pre>
     *图形类型 为0表示清除所有类型的白板操作
     * </pre>
     *
     * <code>fixed32 figuretype = 7;</code>
     */
    public int getFiguretype() {
      return figuretype_;
    }
    /**
     * <pre>
     *图形类型 为0表示清除所有类型的白板操作
     * </pre>
     *
     * <code>fixed32 figuretype = 7;</code>
     */
    private void setFiguretype(int value) {
      
      figuretype_ = value;
    }
    /**
     * <pre>
     *图形类型 为0表示清除所有类型的白板操作
     * </pre>
     *
     * <code>fixed32 figuretype = 7;</code>
     */
    private void clearFiguretype() {
      
      figuretype_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (memberid_ != 0) {
        output.writeFixed32(1, memberid_);
      }
      if (operid_ != 0) {
        output.writeFixed32(2, operid_);
      }
      if (opermemberid_ != 0) {
        output.writeFixed32(3, opermemberid_);
      }
      if (srcmemid_ != 0) {
        output.writeFixed32(4, srcmemid_);
      }
      if (srcwbid_ != 0L) {
        output.writeFixed64(5, srcwbid_);
      }
      if (utcstamp_ != 0L) {
        output.writeFixed64(6, utcstamp_);
      }
      if (figuretype_ != 0) {
        output.writeFixed32(7, figuretype_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (memberid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, memberid_);
      }
      if (operid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(2, operid_);
      }
      if (opermemberid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(3, opermemberid_);
      }
      if (srcmemid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(4, srcmemid_);
      }
      if (srcwbid_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(5, srcwbid_);
      }
      if (utcstamp_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(6, utcstamp_);
      }
      if (figuretype_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(7, figuretype_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetDoClearWhiteBoard parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetDoClearWhiteBoard parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetDoClearWhiteBoard parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetDoClearWhiteBoard parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetDoClearWhiteBoard parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetDoClearWhiteBoard parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetDoClearWhiteBoard parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetDoClearWhiteBoard parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetDoClearWhiteBoard parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetDoClearWhiteBoard parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetDoClearWhiteBoard parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetDoClearWhiteBoard parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetDoClearWhiteBoard prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     *白板删除和清空记录操作
     *(call)
     *type:Pb_TYPE_MEET_INTERFACE_WHITEBOARD
     *method: delall, del 
     * </pre>
     *
     * Protobuf type {@code pbui_Type_MeetDoClearWhiteBoard}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetDoClearWhiteBoard, Builder> implements
        // @@protoc_insertion_point(builder_implements:pbui_Type_MeetDoClearWhiteBoard)
        com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetDoClearWhiteBoardOrBuilder {
      // Construct using com.mogujie.tt.com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetDoClearWhiteBoard.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *需要删除的人员ID 为0表示清除所有等于人员的白板操作
       * </pre>
       *
       * <code>fixed32 memberid = 1;</code>
       */
      public int getMemberid() {
        return instance.getMemberid();
      }
      /**
       * <pre>
       *需要删除的人员ID 为0表示清除所有等于人员的白板操作
       * </pre>
       *
       * <code>fixed32 memberid = 1;</code>
       */
      public Builder setMemberid(int value) {
        copyOnWrite();
        instance.setMemberid(value);
        return this;
      }
      /**
       * <pre>
       *需要删除的人员ID 为0表示清除所有等于人员的白板操作
       * </pre>
       *
       * <code>fixed32 memberid = 1;</code>
       */
      public Builder clearMemberid() {
        copyOnWrite();
        instance.clearMemberid();
        return this;
      }

      /**
       * <pre>
       *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
       * </pre>
       *
       * <code>fixed32 operid = 2;</code>
       */
      public int getOperid() {
        return instance.getOperid();
      }
      /**
       * <pre>
       *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
       * </pre>
       *
       * <code>fixed32 operid = 2;</code>
       */
      public Builder setOperid(int value) {
        copyOnWrite();
        instance.setOperid(value);
        return this;
      }
      /**
       * <pre>
       *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
       * </pre>
       *
       * <code>fixed32 operid = 2;</code>
       */
      public Builder clearOperid() {
        copyOnWrite();
        instance.clearOperid();
        return this;
      }

      /**
       * <pre>
       *当前该命令的人员ID
       * </pre>
       *
       * <code>fixed32 opermemberid = 3;</code>
       */
      public int getOpermemberid() {
        return instance.getOpermemberid();
      }
      /**
       * <pre>
       *当前该命令的人员ID
       * </pre>
       *
       * <code>fixed32 opermemberid = 3;</code>
       */
      public Builder setOpermemberid(int value) {
        copyOnWrite();
        instance.setOpermemberid(value);
        return this;
      }
      /**
       * <pre>
       *当前该命令的人员ID
       * </pre>
       *
       * <code>fixed32 opermemberid = 3;</code>
       */
      public Builder clearOpermemberid() {
        copyOnWrite();
        instance.clearOpermemberid();
        return this;
      }

      /**
       * <pre>
       *发起人的人员ID 白板标识使用
       * </pre>
       *
       * <code>fixed32 srcmemid = 4;</code>
       */
      public int getSrcmemid() {
        return instance.getSrcmemid();
      }
      /**
       * <pre>
       *发起人的人员ID 白板标识使用
       * </pre>
       *
       * <code>fixed32 srcmemid = 4;</code>
       */
      public Builder setSrcmemid(int value) {
        copyOnWrite();
        instance.setSrcmemid(value);
        return this;
      }
      /**
       * <pre>
       *发起人的人员ID 白板标识使用
       * </pre>
       *
       * <code>fixed32 srcmemid = 4;</code>
       */
      public Builder clearSrcmemid() {
        copyOnWrite();
        instance.clearSrcmemid();
        return this;
      }

      /**
       * <pre>
       *发起人的白板标识 取微秒级的时间作标识 白板标识使用
       * </pre>
       *
       * <code>fixed64 srcwbid = 5;</code>
       */
      public long getSrcwbid() {
        return instance.getSrcwbid();
      }
      /**
       * <pre>
       *发起人的白板标识 取微秒级的时间作标识 白板标识使用
       * </pre>
       *
       * <code>fixed64 srcwbid = 5;</code>
       */
      public Builder setSrcwbid(long value) {
        copyOnWrite();
        instance.setSrcwbid(value);
        return this;
      }
      /**
       * <pre>
       *发起人的白板标识 取微秒级的时间作标识 白板标识使用
       * </pre>
       *
       * <code>fixed64 srcwbid = 5;</code>
       */
      public Builder clearSrcwbid() {
        copyOnWrite();
        instance.clearSrcwbid();
        return this;
      }

      /**
       * <pre>
       *时间戳 微秒
       * </pre>
       *
       * <code>fixed64 utcstamp = 6;</code>
       */
      public long getUtcstamp() {
        return instance.getUtcstamp();
      }
      /**
       * <pre>
       *时间戳 微秒
       * </pre>
       *
       * <code>fixed64 utcstamp = 6;</code>
       */
      public Builder setUtcstamp(long value) {
        copyOnWrite();
        instance.setUtcstamp(value);
        return this;
      }
      /**
       * <pre>
       *时间戳 微秒
       * </pre>
       *
       * <code>fixed64 utcstamp = 6;</code>
       */
      public Builder clearUtcstamp() {
        copyOnWrite();
        instance.clearUtcstamp();
        return this;
      }

      /**
       * <pre>
       *图形类型 为0表示清除所有类型的白板操作
       * </pre>
       *
       * <code>fixed32 figuretype = 7;</code>
       */
      public int getFiguretype() {
        return instance.getFiguretype();
      }
      /**
       * <pre>
       *图形类型 为0表示清除所有类型的白板操作
       * </pre>
       *
       * <code>fixed32 figuretype = 7;</code>
       */
      public Builder setFiguretype(int value) {
        copyOnWrite();
        instance.setFiguretype(value);
        return this;
      }
      /**
       * <pre>
       *图形类型 为0表示清除所有类型的白板操作
       * </pre>
       *
       * <code>fixed32 figuretype = 7;</code>
       */
      public Builder clearFiguretype() {
        copyOnWrite();
        instance.clearFiguretype();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pbui_Type_MeetDoClearWhiteBoard)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetDoClearWhiteBoard();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetDoClearWhiteBoard other = (com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetDoClearWhiteBoard) arg1;
          memberid_ = visitor.visitInt(memberid_ != 0, memberid_,
              other.memberid_ != 0, other.memberid_);
          operid_ = visitor.visitInt(operid_ != 0, operid_,
              other.operid_ != 0, other.operid_);
          opermemberid_ = visitor.visitInt(opermemberid_ != 0, opermemberid_,
              other.opermemberid_ != 0, other.opermemberid_);
          srcmemid_ = visitor.visitInt(srcmemid_ != 0, srcmemid_,
              other.srcmemid_ != 0, other.srcmemid_);
          srcwbid_ = visitor.visitLong(srcwbid_ != 0L, srcwbid_,
              other.srcwbid_ != 0L, other.srcwbid_);
          utcstamp_ = visitor.visitLong(utcstamp_ != 0L, utcstamp_,
              other.utcstamp_ != 0L, other.utcstamp_);
          figuretype_ = visitor.visitInt(figuretype_ != 0, figuretype_,
              other.figuretype_ != 0, other.figuretype_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 13: {

                  memberid_ = input.readFixed32();
                  break;
                }
                case 21: {

                  operid_ = input.readFixed32();
                  break;
                }
                case 29: {

                  opermemberid_ = input.readFixed32();
                  break;
                }
                case 37: {

                  srcmemid_ = input.readFixed32();
                  break;
                }
                case 41: {

                  srcwbid_ = input.readFixed64();
                  break;
                }
                case 49: {

                  utcstamp_ = input.readFixed64();
                  break;
                }
                case 61: {

                  figuretype_ = input.readFixed32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetDoClearWhiteBoard.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pbui_Type_MeetDoClearWhiteBoard)
    private static final com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetDoClearWhiteBoard DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pbui_Type_MeetDoClearWhiteBoard();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetDoClearWhiteBoard getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<pbui_Type_MeetDoClearWhiteBoard> PARSER;

    public static com.google.protobuf.Parser<pbui_Type_MeetDoClearWhiteBoard> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface pbui_Type_MeetWhiteBoardQueryOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pbui_Type_MeetWhiteBoardQuery)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 1;</code>
     */
    int getSrcmemid();

    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 2;</code>
     */
    long getSrcwbid();

    /**
     * <pre>
     *图形类型 必须指定一种类型,因为不同类型结构不同,不好解析,所以要按类型查询
     * </pre>
     *
     * <code>fixed32 figuretype = 3;</code>
     */
    int getFiguretype();
  }
  /**
   * <pre>
   *白板项普通查询
   *(call)
   *type:Pb_TYPE_MEET_INTERFACE_WHITEBOARD
   *method: query
   * </pre>
   *
   * Protobuf type {@code pbui_Type_MeetWhiteBoardQuery}
   */
  public  static final class pbui_Type_MeetWhiteBoardQuery extends
      com.google.protobuf.GeneratedMessageLite<
          pbui_Type_MeetWhiteBoardQuery, pbui_Type_MeetWhiteBoardQuery.Builder> implements
      // @@protoc_insertion_point(message_implements:pbui_Type_MeetWhiteBoardQuery)
      pbui_Type_MeetWhiteBoardQueryOrBuilder {
    private pbui_Type_MeetWhiteBoardQuery() {
    }
    public static final int SRCMEMID_FIELD_NUMBER = 1;
    private int srcmemid_;
    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 1;</code>
     */
    public int getSrcmemid() {
      return srcmemid_;
    }
    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 1;</code>
     */
    private void setSrcmemid(int value) {
      
      srcmemid_ = value;
    }
    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 1;</code>
     */
    private void clearSrcmemid() {
      
      srcmemid_ = 0;
    }

    public static final int SRCWBID_FIELD_NUMBER = 2;
    private long srcwbid_;
    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 2;</code>
     */
    public long getSrcwbid() {
      return srcwbid_;
    }
    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 2;</code>
     */
    private void setSrcwbid(long value) {
      
      srcwbid_ = value;
    }
    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 2;</code>
     */
    private void clearSrcwbid() {
      
      srcwbid_ = 0L;
    }

    public static final int FIGURETYPE_FIELD_NUMBER = 3;
    private int figuretype_;
    /**
     * <pre>
     *图形类型 必须指定一种类型,因为不同类型结构不同,不好解析,所以要按类型查询
     * </pre>
     *
     * <code>fixed32 figuretype = 3;</code>
     */
    public int getFiguretype() {
      return figuretype_;
    }
    /**
     * <pre>
     *图形类型 必须指定一种类型,因为不同类型结构不同,不好解析,所以要按类型查询
     * </pre>
     *
     * <code>fixed32 figuretype = 3;</code>
     */
    private void setFiguretype(int value) {
      
      figuretype_ = value;
    }
    /**
     * <pre>
     *图形类型 必须指定一种类型,因为不同类型结构不同,不好解析,所以要按类型查询
     * </pre>
     *
     * <code>fixed32 figuretype = 3;</code>
     */
    private void clearFiguretype() {
      
      figuretype_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (srcmemid_ != 0) {
        output.writeFixed32(1, srcmemid_);
      }
      if (srcwbid_ != 0L) {
        output.writeFixed64(2, srcwbid_);
      }
      if (figuretype_ != 0) {
        output.writeFixed32(3, figuretype_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (srcmemid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, srcmemid_);
      }
      if (srcwbid_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(2, srcwbid_);
      }
      if (figuretype_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(3, figuretype_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardQuery parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardQuery parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardQuery parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardQuery parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardQuery parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardQuery parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardQuery parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardQuery parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardQuery parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardQuery parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardQuery parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardQuery parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardQuery prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     *白板项普通查询
     *(call)
     *type:Pb_TYPE_MEET_INTERFACE_WHITEBOARD
     *method: query
     * </pre>
     *
     * Protobuf type {@code pbui_Type_MeetWhiteBoardQuery}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardQuery, Builder> implements
        // @@protoc_insertion_point(builder_implements:pbui_Type_MeetWhiteBoardQuery)
        com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardQueryOrBuilder {
      // Construct using com.mogujie.tt.com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardQuery.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *发起人的人员ID 白板标识使用
       * </pre>
       *
       * <code>fixed32 srcmemid = 1;</code>
       */
      public int getSrcmemid() {
        return instance.getSrcmemid();
      }
      /**
       * <pre>
       *发起人的人员ID 白板标识使用
       * </pre>
       *
       * <code>fixed32 srcmemid = 1;</code>
       */
      public Builder setSrcmemid(int value) {
        copyOnWrite();
        instance.setSrcmemid(value);
        return this;
      }
      /**
       * <pre>
       *发起人的人员ID 白板标识使用
       * </pre>
       *
       * <code>fixed32 srcmemid = 1;</code>
       */
      public Builder clearSrcmemid() {
        copyOnWrite();
        instance.clearSrcmemid();
        return this;
      }

      /**
       * <pre>
       *发起人的白板标识 取微秒级的时间作标识 白板标识使用
       * </pre>
       *
       * <code>fixed64 srcwbid = 2;</code>
       */
      public long getSrcwbid() {
        return instance.getSrcwbid();
      }
      /**
       * <pre>
       *发起人的白板标识 取微秒级的时间作标识 白板标识使用
       * </pre>
       *
       * <code>fixed64 srcwbid = 2;</code>
       */
      public Builder setSrcwbid(long value) {
        copyOnWrite();
        instance.setSrcwbid(value);
        return this;
      }
      /**
       * <pre>
       *发起人的白板标识 取微秒级的时间作标识 白板标识使用
       * </pre>
       *
       * <code>fixed64 srcwbid = 2;</code>
       */
      public Builder clearSrcwbid() {
        copyOnWrite();
        instance.clearSrcwbid();
        return this;
      }

      /**
       * <pre>
       *图形类型 必须指定一种类型,因为不同类型结构不同,不好解析,所以要按类型查询
       * </pre>
       *
       * <code>fixed32 figuretype = 3;</code>
       */
      public int getFiguretype() {
        return instance.getFiguretype();
      }
      /**
       * <pre>
       *图形类型 必须指定一种类型,因为不同类型结构不同,不好解析,所以要按类型查询
       * </pre>
       *
       * <code>fixed32 figuretype = 3;</code>
       */
      public Builder setFiguretype(int value) {
        copyOnWrite();
        instance.setFiguretype(value);
        return this;
      }
      /**
       * <pre>
       *图形类型 必须指定一种类型,因为不同类型结构不同,不好解析,所以要按类型查询
       * </pre>
       *
       * <code>fixed32 figuretype = 3;</code>
       */
      public Builder clearFiguretype() {
        copyOnWrite();
        instance.clearFiguretype();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pbui_Type_MeetWhiteBoardQuery)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardQuery();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardQuery other = (com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardQuery) arg1;
          srcmemid_ = visitor.visitInt(srcmemid_ != 0, srcmemid_,
              other.srcmemid_ != 0, other.srcmemid_);
          srcwbid_ = visitor.visitLong(srcwbid_ != 0L, srcwbid_,
              other.srcwbid_ != 0L, other.srcwbid_);
          figuretype_ = visitor.visitInt(figuretype_ != 0, figuretype_,
              other.figuretype_ != 0, other.figuretype_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 13: {

                  srcmemid_ = input.readFixed32();
                  break;
                }
                case 17: {

                  srcwbid_ = input.readFixed64();
                  break;
                }
                case 29: {

                  figuretype_ = input.readFixed32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardQuery.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pbui_Type_MeetWhiteBoardQuery)
    private static final com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardQuery DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pbui_Type_MeetWhiteBoardQuery();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardQuery getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<pbui_Type_MeetWhiteBoardQuery> PARSER;

    public static com.google.protobuf.Parser<pbui_Type_MeetWhiteBoardQuery> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface pbui_Type_MeetWhiteBoardComplexQueryOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pbui_Type_MeetWhiteBoardComplexQuery)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 1;</code>
     */
    int getSrcmemid();

    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 2;</code>
     */
    long getSrcwbid();

    /**
     * <pre>
     *图形类型 必须指定一种类型,因为不同类型结构不同,不好解析,所以要按类型查询
     * </pre>
     *
     * <code>fixed32 figuretype = 3;</code>
     */
    int getFiguretype();

    /**
     * <pre>
     *人员ID
     * </pre>
     *
     * <code>fixed32 opermemberid = 4;</code>
     */
    int getOpermemberid();
  }
  /**
   * <pre>
   *白板项高级查询
   *(call)
   *type:Pb_TYPE_MEET_INTERFACE_WHITEBOARD
   *method: complexquery
   * </pre>
   *
   * Protobuf type {@code pbui_Type_MeetWhiteBoardComplexQuery}
   */
  public  static final class pbui_Type_MeetWhiteBoardComplexQuery extends
      com.google.protobuf.GeneratedMessageLite<
          pbui_Type_MeetWhiteBoardComplexQuery, pbui_Type_MeetWhiteBoardComplexQuery.Builder> implements
      // @@protoc_insertion_point(message_implements:pbui_Type_MeetWhiteBoardComplexQuery)
      pbui_Type_MeetWhiteBoardComplexQueryOrBuilder {
    private pbui_Type_MeetWhiteBoardComplexQuery() {
    }
    public static final int SRCMEMID_FIELD_NUMBER = 1;
    private int srcmemid_;
    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 1;</code>
     */
    public int getSrcmemid() {
      return srcmemid_;
    }
    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 1;</code>
     */
    private void setSrcmemid(int value) {
      
      srcmemid_ = value;
    }
    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 1;</code>
     */
    private void clearSrcmemid() {
      
      srcmemid_ = 0;
    }

    public static final int SRCWBID_FIELD_NUMBER = 2;
    private long srcwbid_;
    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 2;</code>
     */
    public long getSrcwbid() {
      return srcwbid_;
    }
    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 2;</code>
     */
    private void setSrcwbid(long value) {
      
      srcwbid_ = value;
    }
    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 2;</code>
     */
    private void clearSrcwbid() {
      
      srcwbid_ = 0L;
    }

    public static final int FIGURETYPE_FIELD_NUMBER = 3;
    private int figuretype_;
    /**
     * <pre>
     *图形类型 必须指定一种类型,因为不同类型结构不同,不好解析,所以要按类型查询
     * </pre>
     *
     * <code>fixed32 figuretype = 3;</code>
     */
    public int getFiguretype() {
      return figuretype_;
    }
    /**
     * <pre>
     *图形类型 必须指定一种类型,因为不同类型结构不同,不好解析,所以要按类型查询
     * </pre>
     *
     * <code>fixed32 figuretype = 3;</code>
     */
    private void setFiguretype(int value) {
      
      figuretype_ = value;
    }
    /**
     * <pre>
     *图形类型 必须指定一种类型,因为不同类型结构不同,不好解析,所以要按类型查询
     * </pre>
     *
     * <code>fixed32 figuretype = 3;</code>
     */
    private void clearFiguretype() {
      
      figuretype_ = 0;
    }

    public static final int OPERMEMBERID_FIELD_NUMBER = 4;
    private int opermemberid_;
    /**
     * <pre>
     *人员ID
     * </pre>
     *
     * <code>fixed32 opermemberid = 4;</code>
     */
    public int getOpermemberid() {
      return opermemberid_;
    }
    /**
     * <pre>
     *人员ID
     * </pre>
     *
     * <code>fixed32 opermemberid = 4;</code>
     */
    private void setOpermemberid(int value) {
      
      opermemberid_ = value;
    }
    /**
     * <pre>
     *人员ID
     * </pre>
     *
     * <code>fixed32 opermemberid = 4;</code>
     */
    private void clearOpermemberid() {
      
      opermemberid_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (srcmemid_ != 0) {
        output.writeFixed32(1, srcmemid_);
      }
      if (srcwbid_ != 0L) {
        output.writeFixed64(2, srcwbid_);
      }
      if (figuretype_ != 0) {
        output.writeFixed32(3, figuretype_);
      }
      if (opermemberid_ != 0) {
        output.writeFixed32(4, opermemberid_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (srcmemid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, srcmemid_);
      }
      if (srcwbid_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(2, srcwbid_);
      }
      if (figuretype_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(3, figuretype_);
      }
      if (opermemberid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(4, opermemberid_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardComplexQuery parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardComplexQuery parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardComplexQuery parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardComplexQuery parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardComplexQuery parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardComplexQuery parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardComplexQuery parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardComplexQuery parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardComplexQuery parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardComplexQuery parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardComplexQuery parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardComplexQuery parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardComplexQuery prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     *白板项高级查询
     *(call)
     *type:Pb_TYPE_MEET_INTERFACE_WHITEBOARD
     *method: complexquery
     * </pre>
     *
     * Protobuf type {@code pbui_Type_MeetWhiteBoardComplexQuery}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardComplexQuery, Builder> implements
        // @@protoc_insertion_point(builder_implements:pbui_Type_MeetWhiteBoardComplexQuery)
        com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardComplexQueryOrBuilder {
      // Construct using com.mogujie.tt.com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardComplexQuery.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *发起人的人员ID 白板标识使用
       * </pre>
       *
       * <code>fixed32 srcmemid = 1;</code>
       */
      public int getSrcmemid() {
        return instance.getSrcmemid();
      }
      /**
       * <pre>
       *发起人的人员ID 白板标识使用
       * </pre>
       *
       * <code>fixed32 srcmemid = 1;</code>
       */
      public Builder setSrcmemid(int value) {
        copyOnWrite();
        instance.setSrcmemid(value);
        return this;
      }
      /**
       * <pre>
       *发起人的人员ID 白板标识使用
       * </pre>
       *
       * <code>fixed32 srcmemid = 1;</code>
       */
      public Builder clearSrcmemid() {
        copyOnWrite();
        instance.clearSrcmemid();
        return this;
      }

      /**
       * <pre>
       *发起人的白板标识 取微秒级的时间作标识 白板标识使用
       * </pre>
       *
       * <code>fixed64 srcwbid = 2;</code>
       */
      public long getSrcwbid() {
        return instance.getSrcwbid();
      }
      /**
       * <pre>
       *发起人的白板标识 取微秒级的时间作标识 白板标识使用
       * </pre>
       *
       * <code>fixed64 srcwbid = 2;</code>
       */
      public Builder setSrcwbid(long value) {
        copyOnWrite();
        instance.setSrcwbid(value);
        return this;
      }
      /**
       * <pre>
       *发起人的白板标识 取微秒级的时间作标识 白板标识使用
       * </pre>
       *
       * <code>fixed64 srcwbid = 2;</code>
       */
      public Builder clearSrcwbid() {
        copyOnWrite();
        instance.clearSrcwbid();
        return this;
      }

      /**
       * <pre>
       *图形类型 必须指定一种类型,因为不同类型结构不同,不好解析,所以要按类型查询
       * </pre>
       *
       * <code>fixed32 figuretype = 3;</code>
       */
      public int getFiguretype() {
        return instance.getFiguretype();
      }
      /**
       * <pre>
       *图形类型 必须指定一种类型,因为不同类型结构不同,不好解析,所以要按类型查询
       * </pre>
       *
       * <code>fixed32 figuretype = 3;</code>
       */
      public Builder setFiguretype(int value) {
        copyOnWrite();
        instance.setFiguretype(value);
        return this;
      }
      /**
       * <pre>
       *图形类型 必须指定一种类型,因为不同类型结构不同,不好解析,所以要按类型查询
       * </pre>
       *
       * <code>fixed32 figuretype = 3;</code>
       */
      public Builder clearFiguretype() {
        copyOnWrite();
        instance.clearFiguretype();
        return this;
      }

      /**
       * <pre>
       *人员ID
       * </pre>
       *
       * <code>fixed32 opermemberid = 4;</code>
       */
      public int getOpermemberid() {
        return instance.getOpermemberid();
      }
      /**
       * <pre>
       *人员ID
       * </pre>
       *
       * <code>fixed32 opermemberid = 4;</code>
       */
      public Builder setOpermemberid(int value) {
        copyOnWrite();
        instance.setOpermemberid(value);
        return this;
      }
      /**
       * <pre>
       *人员ID
       * </pre>
       *
       * <code>fixed32 opermemberid = 4;</code>
       */
      public Builder clearOpermemberid() {
        copyOnWrite();
        instance.clearOpermemberid();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pbui_Type_MeetWhiteBoardComplexQuery)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardComplexQuery();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardComplexQuery other = (com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardComplexQuery) arg1;
          srcmemid_ = visitor.visitInt(srcmemid_ != 0, srcmemid_,
              other.srcmemid_ != 0, other.srcmemid_);
          srcwbid_ = visitor.visitLong(srcwbid_ != 0L, srcwbid_,
              other.srcwbid_ != 0L, other.srcwbid_);
          figuretype_ = visitor.visitInt(figuretype_ != 0, figuretype_,
              other.figuretype_ != 0, other.figuretype_);
          opermemberid_ = visitor.visitInt(opermemberid_ != 0, opermemberid_,
              other.opermemberid_ != 0, other.opermemberid_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 13: {

                  srcmemid_ = input.readFixed32();
                  break;
                }
                case 17: {

                  srcwbid_ = input.readFixed64();
                  break;
                }
                case 29: {

                  figuretype_ = input.readFixed32();
                  break;
                }
                case 37: {

                  opermemberid_ = input.readFixed32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardComplexQuery.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pbui_Type_MeetWhiteBoardComplexQuery)
    private static final com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardComplexQuery DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pbui_Type_MeetWhiteBoardComplexQuery();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardComplexQuery getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<pbui_Type_MeetWhiteBoardComplexQuery> PARSER;

    public static com.google.protobuf.Parser<pbui_Type_MeetWhiteBoardComplexQuery> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface pbui_Type_MeetWhiteBoardInkItemOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pbui_Type_MeetWhiteBoardInkItem)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 operid = 1;</code>
     */
    int getOperid();

    /**
     * <pre>
     *当前该命令的人员ID 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 opermemberid = 2;</code>
     */
    int getOpermemberid();

    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 3;</code>
     */
    int getSrcmemid();

    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 4;</code>
     */
    long getSrcwbid();

    /**
     * <pre>
     *时间戳  微秒
     * </pre>
     *
     * <code>fixed64 utcstamp = 5;</code>
     */
    long getUtcstamp();

    /**
     * <pre>
     *图形类型 为0表示清除所有等于figuretype的白板操作
     * </pre>
     *
     * <code>fixed32 figuretype = 6;</code>
     */
    int getFiguretype();

    /**
     * <pre>
     *线条宽度
     * </pre>
     *
     * <code>fixed32 linesize = 7;</code>
     */
    int getLinesize();

    /**
     * <pre>
     *线条颜色
     * </pre>
     *
     * <code>fixed32 Argb = 8;</code>
     */
    int getArgb();

    /**
     * <pre>
     *ink point Num, float[2 * ptnum](x,y依次排列)	
     * </pre>
     *
     * <code>repeated float pinklist = 9;</code>
     */
    java.util.List<java.lang.Float> getPinklistList();
    /**
     * <pre>
     *ink point Num, float[2 * ptnum](x,y依次排列)	
     * </pre>
     *
     * <code>repeated float pinklist = 9;</code>
     */
    int getPinklistCount();
    /**
     * <pre>
     *ink point Num, float[2 * ptnum](x,y依次排列)	
     * </pre>
     *
     * <code>repeated float pinklist = 9;</code>
     */
    float getPinklist(int index);
  }
  /**
   * <pre>
   *添加墨迹
   *ink
   *type:Pb_TYPE_MEET_INTERFACE_WHITEBOARD
   *callback&#92;call
   *method: add
   * </pre>
   *
   * Protobuf type {@code pbui_Type_MeetWhiteBoardInkItem}
   */
  public  static final class pbui_Type_MeetWhiteBoardInkItem extends
      com.google.protobuf.GeneratedMessageLite<
          pbui_Type_MeetWhiteBoardInkItem, pbui_Type_MeetWhiteBoardInkItem.Builder> implements
      // @@protoc_insertion_point(message_implements:pbui_Type_MeetWhiteBoardInkItem)
      pbui_Type_MeetWhiteBoardInkItemOrBuilder {
    private pbui_Type_MeetWhiteBoardInkItem() {
      pinklist_ = emptyFloatList();
    }
    private int bitField0_;
    public static final int OPERID_FIELD_NUMBER = 1;
    private int operid_;
    /**
     * <pre>
     *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 operid = 1;</code>
     */
    public int getOperid() {
      return operid_;
    }
    /**
     * <pre>
     *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 operid = 1;</code>
     */
    private void setOperid(int value) {
      
      operid_ = value;
    }
    /**
     * <pre>
     *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 operid = 1;</code>
     */
    private void clearOperid() {
      
      operid_ = 0;
    }

    public static final int OPERMEMBERID_FIELD_NUMBER = 2;
    private int opermemberid_;
    /**
     * <pre>
     *当前该命令的人员ID 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 opermemberid = 2;</code>
     */
    public int getOpermemberid() {
      return opermemberid_;
    }
    /**
     * <pre>
     *当前该命令的人员ID 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 opermemberid = 2;</code>
     */
    private void setOpermemberid(int value) {
      
      opermemberid_ = value;
    }
    /**
     * <pre>
     *当前该命令的人员ID 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 opermemberid = 2;</code>
     */
    private void clearOpermemberid() {
      
      opermemberid_ = 0;
    }

    public static final int SRCMEMID_FIELD_NUMBER = 3;
    private int srcmemid_;
    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 3;</code>
     */
    public int getSrcmemid() {
      return srcmemid_;
    }
    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 3;</code>
     */
    private void setSrcmemid(int value) {
      
      srcmemid_ = value;
    }
    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 3;</code>
     */
    private void clearSrcmemid() {
      
      srcmemid_ = 0;
    }

    public static final int SRCWBID_FIELD_NUMBER = 4;
    private long srcwbid_;
    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 4;</code>
     */
    public long getSrcwbid() {
      return srcwbid_;
    }
    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 4;</code>
     */
    private void setSrcwbid(long value) {
      
      srcwbid_ = value;
    }
    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 4;</code>
     */
    private void clearSrcwbid() {
      
      srcwbid_ = 0L;
    }

    public static final int UTCSTAMP_FIELD_NUMBER = 5;
    private long utcstamp_;
    /**
     * <pre>
     *时间戳  微秒
     * </pre>
     *
     * <code>fixed64 utcstamp = 5;</code>
     */
    public long getUtcstamp() {
      return utcstamp_;
    }
    /**
     * <pre>
     *时间戳  微秒
     * </pre>
     *
     * <code>fixed64 utcstamp = 5;</code>
     */
    private void setUtcstamp(long value) {
      
      utcstamp_ = value;
    }
    /**
     * <pre>
     *时间戳  微秒
     * </pre>
     *
     * <code>fixed64 utcstamp = 5;</code>
     */
    private void clearUtcstamp() {
      
      utcstamp_ = 0L;
    }

    public static final int FIGURETYPE_FIELD_NUMBER = 6;
    private int figuretype_;
    /**
     * <pre>
     *图形类型 为0表示清除所有等于figuretype的白板操作
     * </pre>
     *
     * <code>fixed32 figuretype = 6;</code>
     */
    public int getFiguretype() {
      return figuretype_;
    }
    /**
     * <pre>
     *图形类型 为0表示清除所有等于figuretype的白板操作
     * </pre>
     *
     * <code>fixed32 figuretype = 6;</code>
     */
    private void setFiguretype(int value) {
      
      figuretype_ = value;
    }
    /**
     * <pre>
     *图形类型 为0表示清除所有等于figuretype的白板操作
     * </pre>
     *
     * <code>fixed32 figuretype = 6;</code>
     */
    private void clearFiguretype() {
      
      figuretype_ = 0;
    }

    public static final int LINESIZE_FIELD_NUMBER = 7;
    private int linesize_;
    /**
     * <pre>
     *线条宽度
     * </pre>
     *
     * <code>fixed32 linesize = 7;</code>
     */
    public int getLinesize() {
      return linesize_;
    }
    /**
     * <pre>
     *线条宽度
     * </pre>
     *
     * <code>fixed32 linesize = 7;</code>
     */
    private void setLinesize(int value) {
      
      linesize_ = value;
    }
    /**
     * <pre>
     *线条宽度
     * </pre>
     *
     * <code>fixed32 linesize = 7;</code>
     */
    private void clearLinesize() {
      
      linesize_ = 0;
    }

    public static final int ARGB_FIELD_NUMBER = 8;
    private int argb_;
    /**
     * <pre>
     *线条颜色
     * </pre>
     *
     * <code>fixed32 Argb = 8;</code>
     */
    public int getArgb() {
      return argb_;
    }
    /**
     * <pre>
     *线条颜色
     * </pre>
     *
     * <code>fixed32 Argb = 8;</code>
     */
    private void setArgb(int value) {
      
      argb_ = value;
    }
    /**
     * <pre>
     *线条颜色
     * </pre>
     *
     * <code>fixed32 Argb = 8;</code>
     */
    private void clearArgb() {
      
      argb_ = 0;
    }

    public static final int PINKLIST_FIELD_NUMBER = 9;
    private com.google.protobuf.Internal.FloatList pinklist_;
    /**
     * <pre>
     *ink point Num, float[2 * ptnum](x,y依次排列)	
     * </pre>
     *
     * <code>repeated float pinklist = 9;</code>
     */
    public java.util.List<java.lang.Float>
        getPinklistList() {
      return pinklist_;
    }
    /**
     * <pre>
     *ink point Num, float[2 * ptnum](x,y依次排列)	
     * </pre>
     *
     * <code>repeated float pinklist = 9;</code>
     */
    public int getPinklistCount() {
      return pinklist_.size();
    }
    /**
     * <pre>
     *ink point Num, float[2 * ptnum](x,y依次排列)	
     * </pre>
     *
     * <code>repeated float pinklist = 9;</code>
     */
    public float getPinklist(int index) {
      return pinklist_.getFloat(index);
    }
    private void ensurePinklistIsMutable() {
      if (!pinklist_.isModifiable()) {
        pinklist_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(pinklist_);
       }
    }
    /**
     * <pre>
     *ink point Num, float[2 * ptnum](x,y依次排列)	
     * </pre>
     *
     * <code>repeated float pinklist = 9;</code>
     */
    private void setPinklist(
        int index, float value) {
      ensurePinklistIsMutable();
      pinklist_.setFloat(index, value);
    }
    /**
     * <pre>
     *ink point Num, float[2 * ptnum](x,y依次排列)	
     * </pre>
     *
     * <code>repeated float pinklist = 9;</code>
     */
    private void addPinklist(float value) {
      ensurePinklistIsMutable();
      pinklist_.addFloat(value);
    }
    /**
     * <pre>
     *ink point Num, float[2 * ptnum](x,y依次排列)	
     * </pre>
     *
     * <code>repeated float pinklist = 9;</code>
     */
    private void addAllPinklist(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensurePinklistIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, pinklist_);
    }
    /**
     * <pre>
     *ink point Num, float[2 * ptnum](x,y依次排列)	
     * </pre>
     *
     * <code>repeated float pinklist = 9;</code>
     */
    private void clearPinklist() {
      pinklist_ = emptyFloatList();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (operid_ != 0) {
        output.writeFixed32(1, operid_);
      }
      if (opermemberid_ != 0) {
        output.writeFixed32(2, opermemberid_);
      }
      if (srcmemid_ != 0) {
        output.writeFixed32(3, srcmemid_);
      }
      if (srcwbid_ != 0L) {
        output.writeFixed64(4, srcwbid_);
      }
      if (utcstamp_ != 0L) {
        output.writeFixed64(5, utcstamp_);
      }
      if (figuretype_ != 0) {
        output.writeFixed32(6, figuretype_);
      }
      if (linesize_ != 0) {
        output.writeFixed32(7, linesize_);
      }
      if (argb_ != 0) {
        output.writeFixed32(8, argb_);
      }
      for (int i = 0; i < pinklist_.size(); i++) {
        output.writeFloat(9, pinklist_.getFloat(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (operid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, operid_);
      }
      if (opermemberid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(2, opermemberid_);
      }
      if (srcmemid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(3, srcmemid_);
      }
      if (srcwbid_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(4, srcwbid_);
      }
      if (utcstamp_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(5, utcstamp_);
      }
      if (figuretype_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(6, figuretype_);
      }
      if (linesize_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(7, linesize_);
      }
      if (argb_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(8, argb_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getPinklistList().size();
        size += dataSize;
        size += 1 * getPinklistList().size();
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardInkItem parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardInkItem parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardInkItem parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardInkItem parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardInkItem parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardInkItem parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardInkItem parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardInkItem parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardInkItem parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardInkItem parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardInkItem parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardInkItem parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardInkItem prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     *添加墨迹
     *ink
     *type:Pb_TYPE_MEET_INTERFACE_WHITEBOARD
     *callback&#92;call
     *method: add
     * </pre>
     *
     * Protobuf type {@code pbui_Type_MeetWhiteBoardInkItem}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardInkItem, Builder> implements
        // @@protoc_insertion_point(builder_implements:pbui_Type_MeetWhiteBoardInkItem)
        com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardInkItemOrBuilder {
      // Construct using com.mogujie.tt.com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardInkItem.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
       * </pre>
       *
       * <code>fixed32 operid = 1;</code>
       */
      public int getOperid() {
        return instance.getOperid();
      }
      /**
       * <pre>
       *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
       * </pre>
       *
       * <code>fixed32 operid = 1;</code>
       */
      public Builder setOperid(int value) {
        copyOnWrite();
        instance.setOperid(value);
        return this;
      }
      /**
       * <pre>
       *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
       * </pre>
       *
       * <code>fixed32 operid = 1;</code>
       */
      public Builder clearOperid() {
        copyOnWrite();
        instance.clearOperid();
        return this;
      }

      /**
       * <pre>
       *当前该命令的人员ID 为0表示清除所有等于opermemberid的白板操作
       * </pre>
       *
       * <code>fixed32 opermemberid = 2;</code>
       */
      public int getOpermemberid() {
        return instance.getOpermemberid();
      }
      /**
       * <pre>
       *当前该命令的人员ID 为0表示清除所有等于opermemberid的白板操作
       * </pre>
       *
       * <code>fixed32 opermemberid = 2;</code>
       */
      public Builder setOpermemberid(int value) {
        copyOnWrite();
        instance.setOpermemberid(value);
        return this;
      }
      /**
       * <pre>
       *当前该命令的人员ID 为0表示清除所有等于opermemberid的白板操作
       * </pre>
       *
       * <code>fixed32 opermemberid = 2;</code>
       */
      public Builder clearOpermemberid() {
        copyOnWrite();
        instance.clearOpermemberid();
        return this;
      }

      /**
       * <pre>
       *发起人的人员ID 白板标识使用
       * </pre>
       *
       * <code>fixed32 srcmemid = 3;</code>
       */
      public int getSrcmemid() {
        return instance.getSrcmemid();
      }
      /**
       * <pre>
       *发起人的人员ID 白板标识使用
       * </pre>
       *
       * <code>fixed32 srcmemid = 3;</code>
       */
      public Builder setSrcmemid(int value) {
        copyOnWrite();
        instance.setSrcmemid(value);
        return this;
      }
      /**
       * <pre>
       *发起人的人员ID 白板标识使用
       * </pre>
       *
       * <code>fixed32 srcmemid = 3;</code>
       */
      public Builder clearSrcmemid() {
        copyOnWrite();
        instance.clearSrcmemid();
        return this;
      }

      /**
       * <pre>
       *发起人的白板标识 取微秒级的时间作标识 白板标识使用
       * </pre>
       *
       * <code>fixed64 srcwbid = 4;</code>
       */
      public long getSrcwbid() {
        return instance.getSrcwbid();
      }
      /**
       * <pre>
       *发起人的白板标识 取微秒级的时间作标识 白板标识使用
       * </pre>
       *
       * <code>fixed64 srcwbid = 4;</code>
       */
      public Builder setSrcwbid(long value) {
        copyOnWrite();
        instance.setSrcwbid(value);
        return this;
      }
      /**
       * <pre>
       *发起人的白板标识 取微秒级的时间作标识 白板标识使用
       * </pre>
       *
       * <code>fixed64 srcwbid = 4;</code>
       */
      public Builder clearSrcwbid() {
        copyOnWrite();
        instance.clearSrcwbid();
        return this;
      }

      /**
       * <pre>
       *时间戳  微秒
       * </pre>
       *
       * <code>fixed64 utcstamp = 5;</code>
       */
      public long getUtcstamp() {
        return instance.getUtcstamp();
      }
      /**
       * <pre>
       *时间戳  微秒
       * </pre>
       *
       * <code>fixed64 utcstamp = 5;</code>
       */
      public Builder setUtcstamp(long value) {
        copyOnWrite();
        instance.setUtcstamp(value);
        return this;
      }
      /**
       * <pre>
       *时间戳  微秒
       * </pre>
       *
       * <code>fixed64 utcstamp = 5;</code>
       */
      public Builder clearUtcstamp() {
        copyOnWrite();
        instance.clearUtcstamp();
        return this;
      }

      /**
       * <pre>
       *图形类型 为0表示清除所有等于figuretype的白板操作
       * </pre>
       *
       * <code>fixed32 figuretype = 6;</code>
       */
      public int getFiguretype() {
        return instance.getFiguretype();
      }
      /**
       * <pre>
       *图形类型 为0表示清除所有等于figuretype的白板操作
       * </pre>
       *
       * <code>fixed32 figuretype = 6;</code>
       */
      public Builder setFiguretype(int value) {
        copyOnWrite();
        instance.setFiguretype(value);
        return this;
      }
      /**
       * <pre>
       *图形类型 为0表示清除所有等于figuretype的白板操作
       * </pre>
       *
       * <code>fixed32 figuretype = 6;</code>
       */
      public Builder clearFiguretype() {
        copyOnWrite();
        instance.clearFiguretype();
        return this;
      }

      /**
       * <pre>
       *线条宽度
       * </pre>
       *
       * <code>fixed32 linesize = 7;</code>
       */
      public int getLinesize() {
        return instance.getLinesize();
      }
      /**
       * <pre>
       *线条宽度
       * </pre>
       *
       * <code>fixed32 linesize = 7;</code>
       */
      public Builder setLinesize(int value) {
        copyOnWrite();
        instance.setLinesize(value);
        return this;
      }
      /**
       * <pre>
       *线条宽度
       * </pre>
       *
       * <code>fixed32 linesize = 7;</code>
       */
      public Builder clearLinesize() {
        copyOnWrite();
        instance.clearLinesize();
        return this;
      }

      /**
       * <pre>
       *线条颜色
       * </pre>
       *
       * <code>fixed32 Argb = 8;</code>
       */
      public int getArgb() {
        return instance.getArgb();
      }
      /**
       * <pre>
       *线条颜色
       * </pre>
       *
       * <code>fixed32 Argb = 8;</code>
       */
      public Builder setArgb(int value) {
        copyOnWrite();
        instance.setArgb(value);
        return this;
      }
      /**
       * <pre>
       *线条颜色
       * </pre>
       *
       * <code>fixed32 Argb = 8;</code>
       */
      public Builder clearArgb() {
        copyOnWrite();
        instance.clearArgb();
        return this;
      }

      /**
       * <pre>
       *ink point Num, float[2 * ptnum](x,y依次排列)	
       * </pre>
       *
       * <code>repeated float pinklist = 9;</code>
       */
      public java.util.List<java.lang.Float>
          getPinklistList() {
        return java.util.Collections.unmodifiableList(
            instance.getPinklistList());
      }
      /**
       * <pre>
       *ink point Num, float[2 * ptnum](x,y依次排列)	
       * </pre>
       *
       * <code>repeated float pinklist = 9;</code>
       */
      public int getPinklistCount() {
        return instance.getPinklistCount();
      }
      /**
       * <pre>
       *ink point Num, float[2 * ptnum](x,y依次排列)	
       * </pre>
       *
       * <code>repeated float pinklist = 9;</code>
       */
      public float getPinklist(int index) {
        return instance.getPinklist(index);
      }
      /**
       * <pre>
       *ink point Num, float[2 * ptnum](x,y依次排列)	
       * </pre>
       *
       * <code>repeated float pinklist = 9;</code>
       */
      public Builder setPinklist(
          int index, float value) {
        copyOnWrite();
        instance.setPinklist(index, value);
        return this;
      }
      /**
       * <pre>
       *ink point Num, float[2 * ptnum](x,y依次排列)	
       * </pre>
       *
       * <code>repeated float pinklist = 9;</code>
       */
      public Builder addPinklist(float value) {
        copyOnWrite();
        instance.addPinklist(value);
        return this;
      }
      /**
       * <pre>
       *ink point Num, float[2 * ptnum](x,y依次排列)	
       * </pre>
       *
       * <code>repeated float pinklist = 9;</code>
       */
      public Builder addAllPinklist(
          java.lang.Iterable<? extends java.lang.Float> values) {
        copyOnWrite();
        instance.addAllPinklist(values);
        return this;
      }
      /**
       * <pre>
       *ink point Num, float[2 * ptnum](x,y依次排列)	
       * </pre>
       *
       * <code>repeated float pinklist = 9;</code>
       */
      public Builder clearPinklist() {
        copyOnWrite();
        instance.clearPinklist();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pbui_Type_MeetWhiteBoardInkItem)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardInkItem();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          pinklist_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardInkItem other = (com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardInkItem) arg1;
          operid_ = visitor.visitInt(operid_ != 0, operid_,
              other.operid_ != 0, other.operid_);
          opermemberid_ = visitor.visitInt(opermemberid_ != 0, opermemberid_,
              other.opermemberid_ != 0, other.opermemberid_);
          srcmemid_ = visitor.visitInt(srcmemid_ != 0, srcmemid_,
              other.srcmemid_ != 0, other.srcmemid_);
          srcwbid_ = visitor.visitLong(srcwbid_ != 0L, srcwbid_,
              other.srcwbid_ != 0L, other.srcwbid_);
          utcstamp_ = visitor.visitLong(utcstamp_ != 0L, utcstamp_,
              other.utcstamp_ != 0L, other.utcstamp_);
          figuretype_ = visitor.visitInt(figuretype_ != 0, figuretype_,
              other.figuretype_ != 0, other.figuretype_);
          linesize_ = visitor.visitInt(linesize_ != 0, linesize_,
              other.linesize_ != 0, other.linesize_);
          argb_ = visitor.visitInt(argb_ != 0, argb_,
              other.argb_ != 0, other.argb_);
          pinklist_= visitor.visitFloatList(pinklist_, other.pinklist_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 13: {

                  operid_ = input.readFixed32();
                  break;
                }
                case 21: {

                  opermemberid_ = input.readFixed32();
                  break;
                }
                case 29: {

                  srcmemid_ = input.readFixed32();
                  break;
                }
                case 33: {

                  srcwbid_ = input.readFixed64();
                  break;
                }
                case 41: {

                  utcstamp_ = input.readFixed64();
                  break;
                }
                case 53: {

                  figuretype_ = input.readFixed32();
                  break;
                }
                case 61: {

                  linesize_ = input.readFixed32();
                  break;
                }
                case 69: {

                  argb_ = input.readFixed32();
                  break;
                }
                case 77: {
                  if (!pinklist_.isModifiable()) {
                    pinklist_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(pinklist_);
                  }
                  pinklist_.addFloat(input.readFloat());
                  break;
                }
                case 74: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  if (!pinklist_.isModifiable() && input.getBytesUntilLimit() > 0) {
                    final int currentSize = pinklist_.size();
                    pinklist_ = pinklist_.mutableCopyWithCapacity(
                        currentSize + (length/4));
                  }
                  while (input.getBytesUntilLimit() > 0) {
                    pinklist_.addFloat(input.readFloat());
                  }
                  input.popLimit(limit);
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardInkItem.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pbui_Type_MeetWhiteBoardInkItem)
    private static final com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardInkItem DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pbui_Type_MeetWhiteBoardInkItem();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWhiteBoardInkItem getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<pbui_Type_MeetWhiteBoardInkItem> PARSER;

    public static com.google.protobuf.Parser<pbui_Type_MeetWhiteBoardInkItem> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface pbui_Item_MeetWBInkDetailOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pbui_Item_MeetWBInkDetail)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *操作ID 终端计算产生
     * </pre>
     *
     * <code>fixed32 operid = 1;</code>
     */
    int getOperid();

    /**
     * <pre>
     *当前该命令的人员ID
     * </pre>
     *
     * <code>fixed32 opermemberid = 2;</code>
     */
    int getOpermemberid();

    /**
     * <pre>
     *时间戳
     * </pre>
     *
     * <code>fixed64 utcstamp = 3;</code>
     */
    long getUtcstamp();

    /**
     * <pre>
     *线条宽度
     * </pre>
     *
     * <code>fixed32 linesize = 4;</code>
     */
    int getLinesize();

    /**
     * <pre>
     *线条颜色
     * </pre>
     *
     * <code>fixed32 Argb = 5;</code>
     */
    int getArgb();

    /**
     * <pre>
     *ink point Num, float[2 * ptnum](x,y依次排列)
     * </pre>
     *
     * <code>repeated float pinklist = 6;</code>
     */
    java.util.List<java.lang.Float> getPinklistList();
    /**
     * <pre>
     *ink point Num, float[2 * ptnum](x,y依次排列)
     * </pre>
     *
     * <code>repeated float pinklist = 6;</code>
     */
    int getPinklistCount();
    /**
     * <pre>
     *ink point Num, float[2 * ptnum](x,y依次排列)
     * </pre>
     *
     * <code>repeated float pinklist = 6;</code>
     */
    float getPinklist(int index);
  }
  /**
   * <pre>
   *查询Ink白板操作
   *callreturn
   *type:Pb_TYPE_MEET_INTERFACE_WHITEBOARD
   *method: query pagequery
   * </pre>
   *
   * Protobuf type {@code pbui_Item_MeetWBInkDetail}
   */
  public  static final class pbui_Item_MeetWBInkDetail extends
      com.google.protobuf.GeneratedMessageLite<
          pbui_Item_MeetWBInkDetail, pbui_Item_MeetWBInkDetail.Builder> implements
      // @@protoc_insertion_point(message_implements:pbui_Item_MeetWBInkDetail)
      pbui_Item_MeetWBInkDetailOrBuilder {
    private pbui_Item_MeetWBInkDetail() {
      pinklist_ = emptyFloatList();
    }
    private int bitField0_;
    public static final int OPERID_FIELD_NUMBER = 1;
    private int operid_;
    /**
     * <pre>
     *操作ID 终端计算产生
     * </pre>
     *
     * <code>fixed32 operid = 1;</code>
     */
    public int getOperid() {
      return operid_;
    }
    /**
     * <pre>
     *操作ID 终端计算产生
     * </pre>
     *
     * <code>fixed32 operid = 1;</code>
     */
    private void setOperid(int value) {
      
      operid_ = value;
    }
    /**
     * <pre>
     *操作ID 终端计算产生
     * </pre>
     *
     * <code>fixed32 operid = 1;</code>
     */
    private void clearOperid() {
      
      operid_ = 0;
    }

    public static final int OPERMEMBERID_FIELD_NUMBER = 2;
    private int opermemberid_;
    /**
     * <pre>
     *当前该命令的人员ID
     * </pre>
     *
     * <code>fixed32 opermemberid = 2;</code>
     */
    public int getOpermemberid() {
      return opermemberid_;
    }
    /**
     * <pre>
     *当前该命令的人员ID
     * </pre>
     *
     * <code>fixed32 opermemberid = 2;</code>
     */
    private void setOpermemberid(int value) {
      
      opermemberid_ = value;
    }
    /**
     * <pre>
     *当前该命令的人员ID
     * </pre>
     *
     * <code>fixed32 opermemberid = 2;</code>
     */
    private void clearOpermemberid() {
      
      opermemberid_ = 0;
    }

    public static final int UTCSTAMP_FIELD_NUMBER = 3;
    private long utcstamp_;
    /**
     * <pre>
     *时间戳
     * </pre>
     *
     * <code>fixed64 utcstamp = 3;</code>
     */
    public long getUtcstamp() {
      return utcstamp_;
    }
    /**
     * <pre>
     *时间戳
     * </pre>
     *
     * <code>fixed64 utcstamp = 3;</code>
     */
    private void setUtcstamp(long value) {
      
      utcstamp_ = value;
    }
    /**
     * <pre>
     *时间戳
     * </pre>
     *
     * <code>fixed64 utcstamp = 3;</code>
     */
    private void clearUtcstamp() {
      
      utcstamp_ = 0L;
    }

    public static final int LINESIZE_FIELD_NUMBER = 4;
    private int linesize_;
    /**
     * <pre>
     *线条宽度
     * </pre>
     *
     * <code>fixed32 linesize = 4;</code>
     */
    public int getLinesize() {
      return linesize_;
    }
    /**
     * <pre>
     *线条宽度
     * </pre>
     *
     * <code>fixed32 linesize = 4;</code>
     */
    private void setLinesize(int value) {
      
      linesize_ = value;
    }
    /**
     * <pre>
     *线条宽度
     * </pre>
     *
     * <code>fixed32 linesize = 4;</code>
     */
    private void clearLinesize() {
      
      linesize_ = 0;
    }

    public static final int ARGB_FIELD_NUMBER = 5;
    private int argb_;
    /**
     * <pre>
     *线条颜色
     * </pre>
     *
     * <code>fixed32 Argb = 5;</code>
     */
    public int getArgb() {
      return argb_;
    }
    /**
     * <pre>
     *线条颜色
     * </pre>
     *
     * <code>fixed32 Argb = 5;</code>
     */
    private void setArgb(int value) {
      
      argb_ = value;
    }
    /**
     * <pre>
     *线条颜色
     * </pre>
     *
     * <code>fixed32 Argb = 5;</code>
     */
    private void clearArgb() {
      
      argb_ = 0;
    }

    public static final int PINKLIST_FIELD_NUMBER = 6;
    private com.google.protobuf.Internal.FloatList pinklist_;
    /**
     * <pre>
     *ink point Num, float[2 * ptnum](x,y依次排列)
     * </pre>
     *
     * <code>repeated float pinklist = 6;</code>
     */
    public java.util.List<java.lang.Float>
        getPinklistList() {
      return pinklist_;
    }
    /**
     * <pre>
     *ink point Num, float[2 * ptnum](x,y依次排列)
     * </pre>
     *
     * <code>repeated float pinklist = 6;</code>
     */
    public int getPinklistCount() {
      return pinklist_.size();
    }
    /**
     * <pre>
     *ink point Num, float[2 * ptnum](x,y依次排列)
     * </pre>
     *
     * <code>repeated float pinklist = 6;</code>
     */
    public float getPinklist(int index) {
      return pinklist_.getFloat(index);
    }
    private void ensurePinklistIsMutable() {
      if (!pinklist_.isModifiable()) {
        pinklist_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(pinklist_);
       }
    }
    /**
     * <pre>
     *ink point Num, float[2 * ptnum](x,y依次排列)
     * </pre>
     *
     * <code>repeated float pinklist = 6;</code>
     */
    private void setPinklist(
        int index, float value) {
      ensurePinklistIsMutable();
      pinklist_.setFloat(index, value);
    }
    /**
     * <pre>
     *ink point Num, float[2 * ptnum](x,y依次排列)
     * </pre>
     *
     * <code>repeated float pinklist = 6;</code>
     */
    private void addPinklist(float value) {
      ensurePinklistIsMutable();
      pinklist_.addFloat(value);
    }
    /**
     * <pre>
     *ink point Num, float[2 * ptnum](x,y依次排列)
     * </pre>
     *
     * <code>repeated float pinklist = 6;</code>
     */
    private void addAllPinklist(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensurePinklistIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, pinklist_);
    }
    /**
     * <pre>
     *ink point Num, float[2 * ptnum](x,y依次排列)
     * </pre>
     *
     * <code>repeated float pinklist = 6;</code>
     */
    private void clearPinklist() {
      pinklist_ = emptyFloatList();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (operid_ != 0) {
        output.writeFixed32(1, operid_);
      }
      if (opermemberid_ != 0) {
        output.writeFixed32(2, opermemberid_);
      }
      if (utcstamp_ != 0L) {
        output.writeFixed64(3, utcstamp_);
      }
      if (linesize_ != 0) {
        output.writeFixed32(4, linesize_);
      }
      if (argb_ != 0) {
        output.writeFixed32(5, argb_);
      }
      for (int i = 0; i < pinklist_.size(); i++) {
        output.writeFloat(6, pinklist_.getFloat(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (operid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, operid_);
      }
      if (opermemberid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(2, opermemberid_);
      }
      if (utcstamp_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(3, utcstamp_);
      }
      if (linesize_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(4, linesize_);
      }
      if (argb_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(5, argb_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getPinklistList().size();
        size += dataSize;
        size += 1 * getPinklistList().size();
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     *查询Ink白板操作
     *callreturn
     *type:Pb_TYPE_MEET_INTERFACE_WHITEBOARD
     *method: query pagequery
     * </pre>
     *
     * Protobuf type {@code pbui_Item_MeetWBInkDetail}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail, Builder> implements
        // @@protoc_insertion_point(builder_implements:pbui_Item_MeetWBInkDetail)
        com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetailOrBuilder {
      // Construct using com.mogujie.tt.com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *操作ID 终端计算产生
       * </pre>
       *
       * <code>fixed32 operid = 1;</code>
       */
      public int getOperid() {
        return instance.getOperid();
      }
      /**
       * <pre>
       *操作ID 终端计算产生
       * </pre>
       *
       * <code>fixed32 operid = 1;</code>
       */
      public Builder setOperid(int value) {
        copyOnWrite();
        instance.setOperid(value);
        return this;
      }
      /**
       * <pre>
       *操作ID 终端计算产生
       * </pre>
       *
       * <code>fixed32 operid = 1;</code>
       */
      public Builder clearOperid() {
        copyOnWrite();
        instance.clearOperid();
        return this;
      }

      /**
       * <pre>
       *当前该命令的人员ID
       * </pre>
       *
       * <code>fixed32 opermemberid = 2;</code>
       */
      public int getOpermemberid() {
        return instance.getOpermemberid();
      }
      /**
       * <pre>
       *当前该命令的人员ID
       * </pre>
       *
       * <code>fixed32 opermemberid = 2;</code>
       */
      public Builder setOpermemberid(int value) {
        copyOnWrite();
        instance.setOpermemberid(value);
        return this;
      }
      /**
       * <pre>
       *当前该命令的人员ID
       * </pre>
       *
       * <code>fixed32 opermemberid = 2;</code>
       */
      public Builder clearOpermemberid() {
        copyOnWrite();
        instance.clearOpermemberid();
        return this;
      }

      /**
       * <pre>
       *时间戳
       * </pre>
       *
       * <code>fixed64 utcstamp = 3;</code>
       */
      public long getUtcstamp() {
        return instance.getUtcstamp();
      }
      /**
       * <pre>
       *时间戳
       * </pre>
       *
       * <code>fixed64 utcstamp = 3;</code>
       */
      public Builder setUtcstamp(long value) {
        copyOnWrite();
        instance.setUtcstamp(value);
        return this;
      }
      /**
       * <pre>
       *时间戳
       * </pre>
       *
       * <code>fixed64 utcstamp = 3;</code>
       */
      public Builder clearUtcstamp() {
        copyOnWrite();
        instance.clearUtcstamp();
        return this;
      }

      /**
       * <pre>
       *线条宽度
       * </pre>
       *
       * <code>fixed32 linesize = 4;</code>
       */
      public int getLinesize() {
        return instance.getLinesize();
      }
      /**
       * <pre>
       *线条宽度
       * </pre>
       *
       * <code>fixed32 linesize = 4;</code>
       */
      public Builder setLinesize(int value) {
        copyOnWrite();
        instance.setLinesize(value);
        return this;
      }
      /**
       * <pre>
       *线条宽度
       * </pre>
       *
       * <code>fixed32 linesize = 4;</code>
       */
      public Builder clearLinesize() {
        copyOnWrite();
        instance.clearLinesize();
        return this;
      }

      /**
       * <pre>
       *线条颜色
       * </pre>
       *
       * <code>fixed32 Argb = 5;</code>
       */
      public int getArgb() {
        return instance.getArgb();
      }
      /**
       * <pre>
       *线条颜色
       * </pre>
       *
       * <code>fixed32 Argb = 5;</code>
       */
      public Builder setArgb(int value) {
        copyOnWrite();
        instance.setArgb(value);
        return this;
      }
      /**
       * <pre>
       *线条颜色
       * </pre>
       *
       * <code>fixed32 Argb = 5;</code>
       */
      public Builder clearArgb() {
        copyOnWrite();
        instance.clearArgb();
        return this;
      }

      /**
       * <pre>
       *ink point Num, float[2 * ptnum](x,y依次排列)
       * </pre>
       *
       * <code>repeated float pinklist = 6;</code>
       */
      public java.util.List<java.lang.Float>
          getPinklistList() {
        return java.util.Collections.unmodifiableList(
            instance.getPinklistList());
      }
      /**
       * <pre>
       *ink point Num, float[2 * ptnum](x,y依次排列)
       * </pre>
       *
       * <code>repeated float pinklist = 6;</code>
       */
      public int getPinklistCount() {
        return instance.getPinklistCount();
      }
      /**
       * <pre>
       *ink point Num, float[2 * ptnum](x,y依次排列)
       * </pre>
       *
       * <code>repeated float pinklist = 6;</code>
       */
      public float getPinklist(int index) {
        return instance.getPinklist(index);
      }
      /**
       * <pre>
       *ink point Num, float[2 * ptnum](x,y依次排列)
       * </pre>
       *
       * <code>repeated float pinklist = 6;</code>
       */
      public Builder setPinklist(
          int index, float value) {
        copyOnWrite();
        instance.setPinklist(index, value);
        return this;
      }
      /**
       * <pre>
       *ink point Num, float[2 * ptnum](x,y依次排列)
       * </pre>
       *
       * <code>repeated float pinklist = 6;</code>
       */
      public Builder addPinklist(float value) {
        copyOnWrite();
        instance.addPinklist(value);
        return this;
      }
      /**
       * <pre>
       *ink point Num, float[2 * ptnum](x,y依次排列)
       * </pre>
       *
       * <code>repeated float pinklist = 6;</code>
       */
      public Builder addAllPinklist(
          java.lang.Iterable<? extends java.lang.Float> values) {
        copyOnWrite();
        instance.addAllPinklist(values);
        return this;
      }
      /**
       * <pre>
       *ink point Num, float[2 * ptnum](x,y依次排列)
       * </pre>
       *
       * <code>repeated float pinklist = 6;</code>
       */
      public Builder clearPinklist() {
        copyOnWrite();
        instance.clearPinklist();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pbui_Item_MeetWBInkDetail)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          pinklist_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail other = (com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail) arg1;
          operid_ = visitor.visitInt(operid_ != 0, operid_,
              other.operid_ != 0, other.operid_);
          opermemberid_ = visitor.visitInt(opermemberid_ != 0, opermemberid_,
              other.opermemberid_ != 0, other.opermemberid_);
          utcstamp_ = visitor.visitLong(utcstamp_ != 0L, utcstamp_,
              other.utcstamp_ != 0L, other.utcstamp_);
          linesize_ = visitor.visitInt(linesize_ != 0, linesize_,
              other.linesize_ != 0, other.linesize_);
          argb_ = visitor.visitInt(argb_ != 0, argb_,
              other.argb_ != 0, other.argb_);
          pinklist_= visitor.visitFloatList(pinklist_, other.pinklist_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 13: {

                  operid_ = input.readFixed32();
                  break;
                }
                case 21: {

                  opermemberid_ = input.readFixed32();
                  break;
                }
                case 25: {

                  utcstamp_ = input.readFixed64();
                  break;
                }
                case 37: {

                  linesize_ = input.readFixed32();
                  break;
                }
                case 45: {

                  argb_ = input.readFixed32();
                  break;
                }
                case 53: {
                  if (!pinklist_.isModifiable()) {
                    pinklist_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(pinklist_);
                  }
                  pinklist_.addFloat(input.readFloat());
                  break;
                }
                case 50: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  if (!pinklist_.isModifiable() && input.getBytesUntilLimit() > 0) {
                    final int currentSize = pinklist_.size();
                    pinklist_ = pinklist_.mutableCopyWithCapacity(
                        currentSize + (length/4));
                  }
                  while (input.getBytesUntilLimit() > 0) {
                    pinklist_.addFloat(input.readFloat());
                  }
                  input.popLimit(limit);
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pbui_Item_MeetWBInkDetail)
    private static final com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pbui_Item_MeetWBInkDetail();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<pbui_Item_MeetWBInkDetail> PARSER;

    public static com.google.protobuf.Parser<pbui_Item_MeetWBInkDetail> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface pbui_Type_MeetWBInkDetailOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pbui_Type_MeetWBInkDetail)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .pbui_Item_MeetWBInkDetail item = 1;</code>
     */
    java.util.List<com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail> 
        getItemList();
    /**
     * <code>repeated .pbui_Item_MeetWBInkDetail item = 1;</code>
     */
    com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail getItem(int index);
    /**
     * <code>repeated .pbui_Item_MeetWBInkDetail item = 1;</code>
     */
    int getItemCount();
  }
  /**
   * Protobuf type {@code pbui_Type_MeetWBInkDetail}
   */
  public  static final class pbui_Type_MeetWBInkDetail extends
      com.google.protobuf.GeneratedMessageLite<
          pbui_Type_MeetWBInkDetail, pbui_Type_MeetWBInkDetail.Builder> implements
      // @@protoc_insertion_point(message_implements:pbui_Type_MeetWBInkDetail)
      pbui_Type_MeetWBInkDetailOrBuilder {
    private pbui_Type_MeetWBInkDetail() {
      item_ = emptyProtobufList();
    }
    public static final int ITEM_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail> item_;
    /**
     * <code>repeated .pbui_Item_MeetWBInkDetail item = 1;</code>
     */
    public java.util.List<com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail> getItemList() {
      return item_;
    }
    /**
     * <code>repeated .pbui_Item_MeetWBInkDetail item = 1;</code>
     */
    public java.util.List<? extends com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetailOrBuilder> 
        getItemOrBuilderList() {
      return item_;
    }
    /**
     * <code>repeated .pbui_Item_MeetWBInkDetail item = 1;</code>
     */
    public int getItemCount() {
      return item_.size();
    }
    /**
     * <code>repeated .pbui_Item_MeetWBInkDetail item = 1;</code>
     */
    public com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail getItem(int index) {
      return item_.get(index);
    }
    /**
     * <code>repeated .pbui_Item_MeetWBInkDetail item = 1;</code>
     */
    public com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetailOrBuilder getItemOrBuilder(
        int index) {
      return item_.get(index);
    }
    private void ensureItemIsMutable() {
      if (!item_.isModifiable()) {
        item_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(item_);
       }
    }

    /**
     * <code>repeated .pbui_Item_MeetWBInkDetail item = 1;</code>
     */
    private void setItem(
        int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureItemIsMutable();
      item_.set(index, value);
    }
    /**
     * <code>repeated .pbui_Item_MeetWBInkDetail item = 1;</code>
     */
    private void setItem(
        int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail.Builder builderForValue) {
      ensureItemIsMutable();
      item_.set(index, builderForValue.build());
    }
    /**
     * <code>repeated .pbui_Item_MeetWBInkDetail item = 1;</code>
     */
    private void addItem(com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureItemIsMutable();
      item_.add(value);
    }
    /**
     * <code>repeated .pbui_Item_MeetWBInkDetail item = 1;</code>
     */
    private void addItem(
        int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureItemIsMutable();
      item_.add(index, value);
    }
    /**
     * <code>repeated .pbui_Item_MeetWBInkDetail item = 1;</code>
     */
    private void addItem(
        com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail.Builder builderForValue) {
      ensureItemIsMutable();
      item_.add(builderForValue.build());
    }
    /**
     * <code>repeated .pbui_Item_MeetWBInkDetail item = 1;</code>
     */
    private void addItem(
        int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail.Builder builderForValue) {
      ensureItemIsMutable();
      item_.add(index, builderForValue.build());
    }
    /**
     * <code>repeated .pbui_Item_MeetWBInkDetail item = 1;</code>
     */
    private void addAllItem(
        java.lang.Iterable<? extends com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail> values) {
      ensureItemIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, item_);
    }
    /**
     * <code>repeated .pbui_Item_MeetWBInkDetail item = 1;</code>
     */
    private void clearItem() {
      item_ = emptyProtobufList();
    }
    /**
     * <code>repeated .pbui_Item_MeetWBInkDetail item = 1;</code>
     */
    private void removeItem(int index) {
      ensureItemIsMutable();
      item_.remove(index);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < item_.size(); i++) {
        output.writeMessage(1, item_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < item_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, item_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBInkDetail parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBInkDetail parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBInkDetail parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBInkDetail parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBInkDetail parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBInkDetail parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBInkDetail parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBInkDetail parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBInkDetail parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBInkDetail parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBInkDetail parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBInkDetail parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBInkDetail prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code pbui_Type_MeetWBInkDetail}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBInkDetail, Builder> implements
        // @@protoc_insertion_point(builder_implements:pbui_Type_MeetWBInkDetail)
        com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBInkDetailOrBuilder {
      // Construct using com.mogujie.tt.com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBInkDetail.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated .pbui_Item_MeetWBInkDetail item = 1;</code>
       */
      public java.util.List<com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail> getItemList() {
        return java.util.Collections.unmodifiableList(
            instance.getItemList());
      }
      /**
       * <code>repeated .pbui_Item_MeetWBInkDetail item = 1;</code>
       */
      public int getItemCount() {
        return instance.getItemCount();
      }/**
       * <code>repeated .pbui_Item_MeetWBInkDetail item = 1;</code>
       */
      public com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail getItem(int index) {
        return instance.getItem(index);
      }
      /**
       * <code>repeated .pbui_Item_MeetWBInkDetail item = 1;</code>
       */
      public Builder setItem(
          int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail value) {
        copyOnWrite();
        instance.setItem(index, value);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetWBInkDetail item = 1;</code>
       */
      public Builder setItem(
          int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail.Builder builderForValue) {
        copyOnWrite();
        instance.setItem(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetWBInkDetail item = 1;</code>
       */
      public Builder addItem(com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail value) {
        copyOnWrite();
        instance.addItem(value);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetWBInkDetail item = 1;</code>
       */
      public Builder addItem(
          int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail value) {
        copyOnWrite();
        instance.addItem(index, value);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetWBInkDetail item = 1;</code>
       */
      public Builder addItem(
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail.Builder builderForValue) {
        copyOnWrite();
        instance.addItem(builderForValue);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetWBInkDetail item = 1;</code>
       */
      public Builder addItem(
          int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail.Builder builderForValue) {
        copyOnWrite();
        instance.addItem(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetWBInkDetail item = 1;</code>
       */
      public Builder addAllItem(
          java.lang.Iterable<? extends com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail> values) {
        copyOnWrite();
        instance.addAllItem(values);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetWBInkDetail item = 1;</code>
       */
      public Builder clearItem() {
        copyOnWrite();
        instance.clearItem();
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetWBInkDetail item = 1;</code>
       */
      public Builder removeItem(int index) {
        copyOnWrite();
        instance.removeItem(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pbui_Type_MeetWBInkDetail)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBInkDetail();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          item_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBInkDetail other = (com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBInkDetail) arg1;
          item_= visitor.visitList(item_, other.item_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  if (!item_.isModifiable()) {
                    item_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(item_);
                  }
                  item_.add(
                      input.readMessage(com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBInkDetail.parser(), extensionRegistry));
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBInkDetail.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pbui_Type_MeetWBInkDetail)
    private static final com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBInkDetail DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pbui_Type_MeetWBInkDetail();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBInkDetail getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<pbui_Type_MeetWBInkDetail> PARSER;

    public static com.google.protobuf.Parser<pbui_Type_MeetWBInkDetail> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface pbui_Item_MeetWBRectDetailOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pbui_Item_MeetWBRectDetail)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 operid = 1;</code>
     */
    int getOperid();

    /**
     * <pre>
     *当前该命令的人员ID 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 opermemberid = 2;</code>
     */
    int getOpermemberid();

    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 3;</code>
     */
    int getSrcmemid();

    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 4;</code>
     */
    long getSrcwbid();

    /**
     * <pre>
     *时间戳  微秒
     * </pre>
     *
     * <code>fixed64 utcstamp = 5;</code>
     */
    long getUtcstamp();

    /**
     * <pre>
     *图形类型 为0表示清除所有等于figuretype的白板操作
     * </pre>
     *
     * <code>fixed32 figuretype = 6;</code>
     */
    int getFiguretype();

    /**
     * <pre>
     *线条宽度
     * </pre>
     *
     * <code>fixed32 linesize = 7;</code>
     */
    int getLinesize();

    /**
     * <pre>
     *线条颜色
     * </pre>
     *
     * <code>fixed32 Argb = 8;</code>
     */
    int getArgb();

    /**
     * <pre>
     *(lx,ly,rx,ry 左上角,右下角坐标)
     * </pre>
     *
     * <code>repeated float pt = 9;</code>
     */
    java.util.List<java.lang.Float> getPtList();
    /**
     * <pre>
     *(lx,ly,rx,ry 左上角,右下角坐标)
     * </pre>
     *
     * <code>repeated float pt = 9;</code>
     */
    int getPtCount();
    /**
     * <pre>
     *(lx,ly,rx,ry 左上角,右下角坐标)
     * </pre>
     *
     * <code>repeated float pt = 9;</code>
     */
    float getPt(int index);
  }
  /**
   * <pre>
   *添加矩形、直线、圆形
   *type:Pb_TYPE_MEET_INTERFACE_WHITEBOARD
   *rect line elipse
   *callback&#92;call
   *method: add&#92;query pagequery
   * </pre>
   *
   * Protobuf type {@code pbui_Item_MeetWBRectDetail}
   */
  public  static final class pbui_Item_MeetWBRectDetail extends
      com.google.protobuf.GeneratedMessageLite<
          pbui_Item_MeetWBRectDetail, pbui_Item_MeetWBRectDetail.Builder> implements
      // @@protoc_insertion_point(message_implements:pbui_Item_MeetWBRectDetail)
      pbui_Item_MeetWBRectDetailOrBuilder {
    private pbui_Item_MeetWBRectDetail() {
      pt_ = emptyFloatList();
    }
    private int bitField0_;
    public static final int OPERID_FIELD_NUMBER = 1;
    private int operid_;
    /**
     * <pre>
     *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 operid = 1;</code>
     */
    public int getOperid() {
      return operid_;
    }
    /**
     * <pre>
     *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 operid = 1;</code>
     */
    private void setOperid(int value) {
      
      operid_ = value;
    }
    /**
     * <pre>
     *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 operid = 1;</code>
     */
    private void clearOperid() {
      
      operid_ = 0;
    }

    public static final int OPERMEMBERID_FIELD_NUMBER = 2;
    private int opermemberid_;
    /**
     * <pre>
     *当前该命令的人员ID 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 opermemberid = 2;</code>
     */
    public int getOpermemberid() {
      return opermemberid_;
    }
    /**
     * <pre>
     *当前该命令的人员ID 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 opermemberid = 2;</code>
     */
    private void setOpermemberid(int value) {
      
      opermemberid_ = value;
    }
    /**
     * <pre>
     *当前该命令的人员ID 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 opermemberid = 2;</code>
     */
    private void clearOpermemberid() {
      
      opermemberid_ = 0;
    }

    public static final int SRCMEMID_FIELD_NUMBER = 3;
    private int srcmemid_;
    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 3;</code>
     */
    public int getSrcmemid() {
      return srcmemid_;
    }
    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 3;</code>
     */
    private void setSrcmemid(int value) {
      
      srcmemid_ = value;
    }
    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 3;</code>
     */
    private void clearSrcmemid() {
      
      srcmemid_ = 0;
    }

    public static final int SRCWBID_FIELD_NUMBER = 4;
    private long srcwbid_;
    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 4;</code>
     */
    public long getSrcwbid() {
      return srcwbid_;
    }
    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 4;</code>
     */
    private void setSrcwbid(long value) {
      
      srcwbid_ = value;
    }
    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 4;</code>
     */
    private void clearSrcwbid() {
      
      srcwbid_ = 0L;
    }

    public static final int UTCSTAMP_FIELD_NUMBER = 5;
    private long utcstamp_;
    /**
     * <pre>
     *时间戳  微秒
     * </pre>
     *
     * <code>fixed64 utcstamp = 5;</code>
     */
    public long getUtcstamp() {
      return utcstamp_;
    }
    /**
     * <pre>
     *时间戳  微秒
     * </pre>
     *
     * <code>fixed64 utcstamp = 5;</code>
     */
    private void setUtcstamp(long value) {
      
      utcstamp_ = value;
    }
    /**
     * <pre>
     *时间戳  微秒
     * </pre>
     *
     * <code>fixed64 utcstamp = 5;</code>
     */
    private void clearUtcstamp() {
      
      utcstamp_ = 0L;
    }

    public static final int FIGURETYPE_FIELD_NUMBER = 6;
    private int figuretype_;
    /**
     * <pre>
     *图形类型 为0表示清除所有等于figuretype的白板操作
     * </pre>
     *
     * <code>fixed32 figuretype = 6;</code>
     */
    public int getFiguretype() {
      return figuretype_;
    }
    /**
     * <pre>
     *图形类型 为0表示清除所有等于figuretype的白板操作
     * </pre>
     *
     * <code>fixed32 figuretype = 6;</code>
     */
    private void setFiguretype(int value) {
      
      figuretype_ = value;
    }
    /**
     * <pre>
     *图形类型 为0表示清除所有等于figuretype的白板操作
     * </pre>
     *
     * <code>fixed32 figuretype = 6;</code>
     */
    private void clearFiguretype() {
      
      figuretype_ = 0;
    }

    public static final int LINESIZE_FIELD_NUMBER = 7;
    private int linesize_;
    /**
     * <pre>
     *线条宽度
     * </pre>
     *
     * <code>fixed32 linesize = 7;</code>
     */
    public int getLinesize() {
      return linesize_;
    }
    /**
     * <pre>
     *线条宽度
     * </pre>
     *
     * <code>fixed32 linesize = 7;</code>
     */
    private void setLinesize(int value) {
      
      linesize_ = value;
    }
    /**
     * <pre>
     *线条宽度
     * </pre>
     *
     * <code>fixed32 linesize = 7;</code>
     */
    private void clearLinesize() {
      
      linesize_ = 0;
    }

    public static final int ARGB_FIELD_NUMBER = 8;
    private int argb_;
    /**
     * <pre>
     *线条颜色
     * </pre>
     *
     * <code>fixed32 Argb = 8;</code>
     */
    public int getArgb() {
      return argb_;
    }
    /**
     * <pre>
     *线条颜色
     * </pre>
     *
     * <code>fixed32 Argb = 8;</code>
     */
    private void setArgb(int value) {
      
      argb_ = value;
    }
    /**
     * <pre>
     *线条颜色
     * </pre>
     *
     * <code>fixed32 Argb = 8;</code>
     */
    private void clearArgb() {
      
      argb_ = 0;
    }

    public static final int PT_FIELD_NUMBER = 9;
    private com.google.protobuf.Internal.FloatList pt_;
    /**
     * <pre>
     *(lx,ly,rx,ry 左上角,右下角坐标)
     * </pre>
     *
     * <code>repeated float pt = 9;</code>
     */
    public java.util.List<java.lang.Float>
        getPtList() {
      return pt_;
    }
    /**
     * <pre>
     *(lx,ly,rx,ry 左上角,右下角坐标)
     * </pre>
     *
     * <code>repeated float pt = 9;</code>
     */
    public int getPtCount() {
      return pt_.size();
    }
    /**
     * <pre>
     *(lx,ly,rx,ry 左上角,右下角坐标)
     * </pre>
     *
     * <code>repeated float pt = 9;</code>
     */
    public float getPt(int index) {
      return pt_.getFloat(index);
    }
    private void ensurePtIsMutable() {
      if (!pt_.isModifiable()) {
        pt_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(pt_);
       }
    }
    /**
     * <pre>
     *(lx,ly,rx,ry 左上角,右下角坐标)
     * </pre>
     *
     * <code>repeated float pt = 9;</code>
     */
    private void setPt(
        int index, float value) {
      ensurePtIsMutable();
      pt_.setFloat(index, value);
    }
    /**
     * <pre>
     *(lx,ly,rx,ry 左上角,右下角坐标)
     * </pre>
     *
     * <code>repeated float pt = 9;</code>
     */
    private void addPt(float value) {
      ensurePtIsMutable();
      pt_.addFloat(value);
    }
    /**
     * <pre>
     *(lx,ly,rx,ry 左上角,右下角坐标)
     * </pre>
     *
     * <code>repeated float pt = 9;</code>
     */
    private void addAllPt(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensurePtIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, pt_);
    }
    /**
     * <pre>
     *(lx,ly,rx,ry 左上角,右下角坐标)
     * </pre>
     *
     * <code>repeated float pt = 9;</code>
     */
    private void clearPt() {
      pt_ = emptyFloatList();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (operid_ != 0) {
        output.writeFixed32(1, operid_);
      }
      if (opermemberid_ != 0) {
        output.writeFixed32(2, opermemberid_);
      }
      if (srcmemid_ != 0) {
        output.writeFixed32(3, srcmemid_);
      }
      if (srcwbid_ != 0L) {
        output.writeFixed64(4, srcwbid_);
      }
      if (utcstamp_ != 0L) {
        output.writeFixed64(5, utcstamp_);
      }
      if (figuretype_ != 0) {
        output.writeFixed32(6, figuretype_);
      }
      if (linesize_ != 0) {
        output.writeFixed32(7, linesize_);
      }
      if (argb_ != 0) {
        output.writeFixed32(8, argb_);
      }
      for (int i = 0; i < pt_.size(); i++) {
        output.writeFloat(9, pt_.getFloat(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (operid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, operid_);
      }
      if (opermemberid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(2, opermemberid_);
      }
      if (srcmemid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(3, srcmemid_);
      }
      if (srcwbid_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(4, srcwbid_);
      }
      if (utcstamp_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(5, utcstamp_);
      }
      if (figuretype_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(6, figuretype_);
      }
      if (linesize_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(7, linesize_);
      }
      if (argb_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(8, argb_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getPtList().size();
        size += dataSize;
        size += 1 * getPtList().size();
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     *添加矩形、直线、圆形
     *type:Pb_TYPE_MEET_INTERFACE_WHITEBOARD
     *rect line elipse
     *callback&#92;call
     *method: add&#92;query pagequery
     * </pre>
     *
     * Protobuf type {@code pbui_Item_MeetWBRectDetail}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail, Builder> implements
        // @@protoc_insertion_point(builder_implements:pbui_Item_MeetWBRectDetail)
        com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetailOrBuilder {
      // Construct using com.mogujie.tt.com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
       * </pre>
       *
       * <code>fixed32 operid = 1;</code>
       */
      public int getOperid() {
        return instance.getOperid();
      }
      /**
       * <pre>
       *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
       * </pre>
       *
       * <code>fixed32 operid = 1;</code>
       */
      public Builder setOperid(int value) {
        copyOnWrite();
        instance.setOperid(value);
        return this;
      }
      /**
       * <pre>
       *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
       * </pre>
       *
       * <code>fixed32 operid = 1;</code>
       */
      public Builder clearOperid() {
        copyOnWrite();
        instance.clearOperid();
        return this;
      }

      /**
       * <pre>
       *当前该命令的人员ID 为0表示清除所有等于opermemberid的白板操作
       * </pre>
       *
       * <code>fixed32 opermemberid = 2;</code>
       */
      public int getOpermemberid() {
        return instance.getOpermemberid();
      }
      /**
       * <pre>
       *当前该命令的人员ID 为0表示清除所有等于opermemberid的白板操作
       * </pre>
       *
       * <code>fixed32 opermemberid = 2;</code>
       */
      public Builder setOpermemberid(int value) {
        copyOnWrite();
        instance.setOpermemberid(value);
        return this;
      }
      /**
       * <pre>
       *当前该命令的人员ID 为0表示清除所有等于opermemberid的白板操作
       * </pre>
       *
       * <code>fixed32 opermemberid = 2;</code>
       */
      public Builder clearOpermemberid() {
        copyOnWrite();
        instance.clearOpermemberid();
        return this;
      }

      /**
       * <pre>
       *发起人的人员ID 白板标识使用
       * </pre>
       *
       * <code>fixed32 srcmemid = 3;</code>
       */
      public int getSrcmemid() {
        return instance.getSrcmemid();
      }
      /**
       * <pre>
       *发起人的人员ID 白板标识使用
       * </pre>
       *
       * <code>fixed32 srcmemid = 3;</code>
       */
      public Builder setSrcmemid(int value) {
        copyOnWrite();
        instance.setSrcmemid(value);
        return this;
      }
      /**
       * <pre>
       *发起人的人员ID 白板标识使用
       * </pre>
       *
       * <code>fixed32 srcmemid = 3;</code>
       */
      public Builder clearSrcmemid() {
        copyOnWrite();
        instance.clearSrcmemid();
        return this;
      }

      /**
       * <pre>
       *发起人的白板标识 取微秒级的时间作标识 白板标识使用
       * </pre>
       *
       * <code>fixed64 srcwbid = 4;</code>
       */
      public long getSrcwbid() {
        return instance.getSrcwbid();
      }
      /**
       * <pre>
       *发起人的白板标识 取微秒级的时间作标识 白板标识使用
       * </pre>
       *
       * <code>fixed64 srcwbid = 4;</code>
       */
      public Builder setSrcwbid(long value) {
        copyOnWrite();
        instance.setSrcwbid(value);
        return this;
      }
      /**
       * <pre>
       *发起人的白板标识 取微秒级的时间作标识 白板标识使用
       * </pre>
       *
       * <code>fixed64 srcwbid = 4;</code>
       */
      public Builder clearSrcwbid() {
        copyOnWrite();
        instance.clearSrcwbid();
        return this;
      }

      /**
       * <pre>
       *时间戳  微秒
       * </pre>
       *
       * <code>fixed64 utcstamp = 5;</code>
       */
      public long getUtcstamp() {
        return instance.getUtcstamp();
      }
      /**
       * <pre>
       *时间戳  微秒
       * </pre>
       *
       * <code>fixed64 utcstamp = 5;</code>
       */
      public Builder setUtcstamp(long value) {
        copyOnWrite();
        instance.setUtcstamp(value);
        return this;
      }
      /**
       * <pre>
       *时间戳  微秒
       * </pre>
       *
       * <code>fixed64 utcstamp = 5;</code>
       */
      public Builder clearUtcstamp() {
        copyOnWrite();
        instance.clearUtcstamp();
        return this;
      }

      /**
       * <pre>
       *图形类型 为0表示清除所有等于figuretype的白板操作
       * </pre>
       *
       * <code>fixed32 figuretype = 6;</code>
       */
      public int getFiguretype() {
        return instance.getFiguretype();
      }
      /**
       * <pre>
       *图形类型 为0表示清除所有等于figuretype的白板操作
       * </pre>
       *
       * <code>fixed32 figuretype = 6;</code>
       */
      public Builder setFiguretype(int value) {
        copyOnWrite();
        instance.setFiguretype(value);
        return this;
      }
      /**
       * <pre>
       *图形类型 为0表示清除所有等于figuretype的白板操作
       * </pre>
       *
       * <code>fixed32 figuretype = 6;</code>
       */
      public Builder clearFiguretype() {
        copyOnWrite();
        instance.clearFiguretype();
        return this;
      }

      /**
       * <pre>
       *线条宽度
       * </pre>
       *
       * <code>fixed32 linesize = 7;</code>
       */
      public int getLinesize() {
        return instance.getLinesize();
      }
      /**
       * <pre>
       *线条宽度
       * </pre>
       *
       * <code>fixed32 linesize = 7;</code>
       */
      public Builder setLinesize(int value) {
        copyOnWrite();
        instance.setLinesize(value);
        return this;
      }
      /**
       * <pre>
       *线条宽度
       * </pre>
       *
       * <code>fixed32 linesize = 7;</code>
       */
      public Builder clearLinesize() {
        copyOnWrite();
        instance.clearLinesize();
        return this;
      }

      /**
       * <pre>
       *线条颜色
       * </pre>
       *
       * <code>fixed32 Argb = 8;</code>
       */
      public int getArgb() {
        return instance.getArgb();
      }
      /**
       * <pre>
       *线条颜色
       * </pre>
       *
       * <code>fixed32 Argb = 8;</code>
       */
      public Builder setArgb(int value) {
        copyOnWrite();
        instance.setArgb(value);
        return this;
      }
      /**
       * <pre>
       *线条颜色
       * </pre>
       *
       * <code>fixed32 Argb = 8;</code>
       */
      public Builder clearArgb() {
        copyOnWrite();
        instance.clearArgb();
        return this;
      }

      /**
       * <pre>
       *(lx,ly,rx,ry 左上角,右下角坐标)
       * </pre>
       *
       * <code>repeated float pt = 9;</code>
       */
      public java.util.List<java.lang.Float>
          getPtList() {
        return java.util.Collections.unmodifiableList(
            instance.getPtList());
      }
      /**
       * <pre>
       *(lx,ly,rx,ry 左上角,右下角坐标)
       * </pre>
       *
       * <code>repeated float pt = 9;</code>
       */
      public int getPtCount() {
        return instance.getPtCount();
      }
      /**
       * <pre>
       *(lx,ly,rx,ry 左上角,右下角坐标)
       * </pre>
       *
       * <code>repeated float pt = 9;</code>
       */
      public float getPt(int index) {
        return instance.getPt(index);
      }
      /**
       * <pre>
       *(lx,ly,rx,ry 左上角,右下角坐标)
       * </pre>
       *
       * <code>repeated float pt = 9;</code>
       */
      public Builder setPt(
          int index, float value) {
        copyOnWrite();
        instance.setPt(index, value);
        return this;
      }
      /**
       * <pre>
       *(lx,ly,rx,ry 左上角,右下角坐标)
       * </pre>
       *
       * <code>repeated float pt = 9;</code>
       */
      public Builder addPt(float value) {
        copyOnWrite();
        instance.addPt(value);
        return this;
      }
      /**
       * <pre>
       *(lx,ly,rx,ry 左上角,右下角坐标)
       * </pre>
       *
       * <code>repeated float pt = 9;</code>
       */
      public Builder addAllPt(
          java.lang.Iterable<? extends java.lang.Float> values) {
        copyOnWrite();
        instance.addAllPt(values);
        return this;
      }
      /**
       * <pre>
       *(lx,ly,rx,ry 左上角,右下角坐标)
       * </pre>
       *
       * <code>repeated float pt = 9;</code>
       */
      public Builder clearPt() {
        copyOnWrite();
        instance.clearPt();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pbui_Item_MeetWBRectDetail)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          pt_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail other = (com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail) arg1;
          operid_ = visitor.visitInt(operid_ != 0, operid_,
              other.operid_ != 0, other.operid_);
          opermemberid_ = visitor.visitInt(opermemberid_ != 0, opermemberid_,
              other.opermemberid_ != 0, other.opermemberid_);
          srcmemid_ = visitor.visitInt(srcmemid_ != 0, srcmemid_,
              other.srcmemid_ != 0, other.srcmemid_);
          srcwbid_ = visitor.visitLong(srcwbid_ != 0L, srcwbid_,
              other.srcwbid_ != 0L, other.srcwbid_);
          utcstamp_ = visitor.visitLong(utcstamp_ != 0L, utcstamp_,
              other.utcstamp_ != 0L, other.utcstamp_);
          figuretype_ = visitor.visitInt(figuretype_ != 0, figuretype_,
              other.figuretype_ != 0, other.figuretype_);
          linesize_ = visitor.visitInt(linesize_ != 0, linesize_,
              other.linesize_ != 0, other.linesize_);
          argb_ = visitor.visitInt(argb_ != 0, argb_,
              other.argb_ != 0, other.argb_);
          pt_= visitor.visitFloatList(pt_, other.pt_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 13: {

                  operid_ = input.readFixed32();
                  break;
                }
                case 21: {

                  opermemberid_ = input.readFixed32();
                  break;
                }
                case 29: {

                  srcmemid_ = input.readFixed32();
                  break;
                }
                case 33: {

                  srcwbid_ = input.readFixed64();
                  break;
                }
                case 41: {

                  utcstamp_ = input.readFixed64();
                  break;
                }
                case 53: {

                  figuretype_ = input.readFixed32();
                  break;
                }
                case 61: {

                  linesize_ = input.readFixed32();
                  break;
                }
                case 69: {

                  argb_ = input.readFixed32();
                  break;
                }
                case 77: {
                  if (!pt_.isModifiable()) {
                    pt_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(pt_);
                  }
                  pt_.addFloat(input.readFloat());
                  break;
                }
                case 74: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  if (!pt_.isModifiable() && input.getBytesUntilLimit() > 0) {
                    final int currentSize = pt_.size();
                    pt_ = pt_.mutableCopyWithCapacity(
                        currentSize + (length/4));
                  }
                  while (input.getBytesUntilLimit() > 0) {
                    pt_.addFloat(input.readFloat());
                  }
                  input.popLimit(limit);
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pbui_Item_MeetWBRectDetail)
    private static final com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pbui_Item_MeetWBRectDetail();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<pbui_Item_MeetWBRectDetail> PARSER;

    public static com.google.protobuf.Parser<pbui_Item_MeetWBRectDetail> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface pbui_Type_MeetWBRectDetailOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pbui_Type_MeetWBRectDetail)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .pbui_Item_MeetWBRectDetail item = 1;</code>
     */
    java.util.List<com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail> 
        getItemList();
    /**
     * <code>repeated .pbui_Item_MeetWBRectDetail item = 1;</code>
     */
    com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail getItem(int index);
    /**
     * <code>repeated .pbui_Item_MeetWBRectDetail item = 1;</code>
     */
    int getItemCount();
  }
  /**
   * <pre>
   *返回查询的矩形、直线、圆形
   *type:Pb_TYPE_MEET_INTERFACE_WHITEBOARD
   *rect line elipse
   *callback&#92;call
   *method: add&#92;query pagequery
   * </pre>
   *
   * Protobuf type {@code pbui_Type_MeetWBRectDetail}
   */
  public  static final class pbui_Type_MeetWBRectDetail extends
      com.google.protobuf.GeneratedMessageLite<
          pbui_Type_MeetWBRectDetail, pbui_Type_MeetWBRectDetail.Builder> implements
      // @@protoc_insertion_point(message_implements:pbui_Type_MeetWBRectDetail)
      pbui_Type_MeetWBRectDetailOrBuilder {
    private pbui_Type_MeetWBRectDetail() {
      item_ = emptyProtobufList();
    }
    public static final int ITEM_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail> item_;
    /**
     * <code>repeated .pbui_Item_MeetWBRectDetail item = 1;</code>
     */
    public java.util.List<com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail> getItemList() {
      return item_;
    }
    /**
     * <code>repeated .pbui_Item_MeetWBRectDetail item = 1;</code>
     */
    public java.util.List<? extends com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetailOrBuilder> 
        getItemOrBuilderList() {
      return item_;
    }
    /**
     * <code>repeated .pbui_Item_MeetWBRectDetail item = 1;</code>
     */
    public int getItemCount() {
      return item_.size();
    }
    /**
     * <code>repeated .pbui_Item_MeetWBRectDetail item = 1;</code>
     */
    public com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail getItem(int index) {
      return item_.get(index);
    }
    /**
     * <code>repeated .pbui_Item_MeetWBRectDetail item = 1;</code>
     */
    public com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetailOrBuilder getItemOrBuilder(
        int index) {
      return item_.get(index);
    }
    private void ensureItemIsMutable() {
      if (!item_.isModifiable()) {
        item_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(item_);
       }
    }

    /**
     * <code>repeated .pbui_Item_MeetWBRectDetail item = 1;</code>
     */
    private void setItem(
        int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureItemIsMutable();
      item_.set(index, value);
    }
    /**
     * <code>repeated .pbui_Item_MeetWBRectDetail item = 1;</code>
     */
    private void setItem(
        int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail.Builder builderForValue) {
      ensureItemIsMutable();
      item_.set(index, builderForValue.build());
    }
    /**
     * <code>repeated .pbui_Item_MeetWBRectDetail item = 1;</code>
     */
    private void addItem(com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureItemIsMutable();
      item_.add(value);
    }
    /**
     * <code>repeated .pbui_Item_MeetWBRectDetail item = 1;</code>
     */
    private void addItem(
        int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureItemIsMutable();
      item_.add(index, value);
    }
    /**
     * <code>repeated .pbui_Item_MeetWBRectDetail item = 1;</code>
     */
    private void addItem(
        com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail.Builder builderForValue) {
      ensureItemIsMutable();
      item_.add(builderForValue.build());
    }
    /**
     * <code>repeated .pbui_Item_MeetWBRectDetail item = 1;</code>
     */
    private void addItem(
        int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail.Builder builderForValue) {
      ensureItemIsMutable();
      item_.add(index, builderForValue.build());
    }
    /**
     * <code>repeated .pbui_Item_MeetWBRectDetail item = 1;</code>
     */
    private void addAllItem(
        java.lang.Iterable<? extends com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail> values) {
      ensureItemIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, item_);
    }
    /**
     * <code>repeated .pbui_Item_MeetWBRectDetail item = 1;</code>
     */
    private void clearItem() {
      item_ = emptyProtobufList();
    }
    /**
     * <code>repeated .pbui_Item_MeetWBRectDetail item = 1;</code>
     */
    private void removeItem(int index) {
      ensureItemIsMutable();
      item_.remove(index);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < item_.size(); i++) {
        output.writeMessage(1, item_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < item_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, item_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBRectDetail parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBRectDetail parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBRectDetail parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBRectDetail parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBRectDetail parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBRectDetail parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBRectDetail parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBRectDetail parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBRectDetail parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBRectDetail parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBRectDetail parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBRectDetail parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBRectDetail prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     *返回查询的矩形、直线、圆形
     *type:Pb_TYPE_MEET_INTERFACE_WHITEBOARD
     *rect line elipse
     *callback&#92;call
     *method: add&#92;query pagequery
     * </pre>
     *
     * Protobuf type {@code pbui_Type_MeetWBRectDetail}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBRectDetail, Builder> implements
        // @@protoc_insertion_point(builder_implements:pbui_Type_MeetWBRectDetail)
        com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBRectDetailOrBuilder {
      // Construct using com.mogujie.tt.com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBRectDetail.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated .pbui_Item_MeetWBRectDetail item = 1;</code>
       */
      public java.util.List<com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail> getItemList() {
        return java.util.Collections.unmodifiableList(
            instance.getItemList());
      }
      /**
       * <code>repeated .pbui_Item_MeetWBRectDetail item = 1;</code>
       */
      public int getItemCount() {
        return instance.getItemCount();
      }/**
       * <code>repeated .pbui_Item_MeetWBRectDetail item = 1;</code>
       */
      public com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail getItem(int index) {
        return instance.getItem(index);
      }
      /**
       * <code>repeated .pbui_Item_MeetWBRectDetail item = 1;</code>
       */
      public Builder setItem(
          int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail value) {
        copyOnWrite();
        instance.setItem(index, value);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetWBRectDetail item = 1;</code>
       */
      public Builder setItem(
          int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail.Builder builderForValue) {
        copyOnWrite();
        instance.setItem(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetWBRectDetail item = 1;</code>
       */
      public Builder addItem(com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail value) {
        copyOnWrite();
        instance.addItem(value);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetWBRectDetail item = 1;</code>
       */
      public Builder addItem(
          int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail value) {
        copyOnWrite();
        instance.addItem(index, value);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetWBRectDetail item = 1;</code>
       */
      public Builder addItem(
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail.Builder builderForValue) {
        copyOnWrite();
        instance.addItem(builderForValue);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetWBRectDetail item = 1;</code>
       */
      public Builder addItem(
          int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail.Builder builderForValue) {
        copyOnWrite();
        instance.addItem(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetWBRectDetail item = 1;</code>
       */
      public Builder addAllItem(
          java.lang.Iterable<? extends com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail> values) {
        copyOnWrite();
        instance.addAllItem(values);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetWBRectDetail item = 1;</code>
       */
      public Builder clearItem() {
        copyOnWrite();
        instance.clearItem();
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetWBRectDetail item = 1;</code>
       */
      public Builder removeItem(int index) {
        copyOnWrite();
        instance.removeItem(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pbui_Type_MeetWBRectDetail)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBRectDetail();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          item_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBRectDetail other = (com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBRectDetail) arg1;
          item_= visitor.visitList(item_, other.item_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  if (!item_.isModifiable()) {
                    item_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(item_);
                  }
                  item_.add(
                      input.readMessage(com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBRectDetail.parser(), extensionRegistry));
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBRectDetail.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pbui_Type_MeetWBRectDetail)
    private static final com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBRectDetail DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pbui_Type_MeetWBRectDetail();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBRectDetail getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<pbui_Type_MeetWBRectDetail> PARSER;

    public static com.google.protobuf.Parser<pbui_Type_MeetWBRectDetail> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface pbui_Item_MeetWBTextDetailOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pbui_Item_MeetWBTextDetail)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 operid = 1;</code>
     */
    int getOperid();

    /**
     * <pre>
     *当前该命令的人员ID 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 opermemberid = 2;</code>
     */
    int getOpermemberid();

    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 3;</code>
     */
    int getSrcmemid();

    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 4;</code>
     */
    long getSrcwbid();

    /**
     * <pre>
     *时间戳  微秒
     * </pre>
     *
     * <code>fixed64 utcstamp = 5;</code>
     */
    long getUtcstamp();

    /**
     * <pre>
     *图形类型 为0表示清除所有等于figuretype的白板操作
     * </pre>
     *
     * <code>fixed32 figuretype = 6;</code>
     */
    int getFiguretype();

    /**
     * <pre>
     *字体大小
     * </pre>
     *
     * <code>fixed32 fontsize = 7;</code>
     */
    int getFontsize();

    /**
     * <pre>
     *字体其它属性
     * </pre>
     *
     * <code>fixed32 fontflag = 8;</code>
     */
    int getFontflag();

    /**
     * <pre>
     *字体颜色
     * </pre>
     *
     * <code>fixed32 Argb = 9;</code>
     */
    int getArgb();

    /**
     * <pre>
     *字体名称
     * </pre>
     *
     * <code>bytes fontname = 10;</code>
     */
    com.google.protobuf.ByteString getFontname();

    /**
     * <pre>
     *(lx,ly,左上角坐标)
     * </pre>
     *
     * <code>float lx = 11;</code>
     */
    float getLx();

    /**
     * <pre>
     *(lx,ly,左上角坐标)
     * </pre>
     *
     * <code>float ly = 12;</code>
     */
    float getLy();

    /**
     * <code>bytes ptext = 13;</code>
     */
    com.google.protobuf.ByteString getPtext();
  }
  /**
   * <pre>
   *添加文本
   *type:Pb_TYPE_MEET_INTERFACE_WHITEBOARD
   *callreturn
   *method: add query pagequery
   * </pre>
   *
   * Protobuf type {@code pbui_Item_MeetWBTextDetail}
   */
  public  static final class pbui_Item_MeetWBTextDetail extends
      com.google.protobuf.GeneratedMessageLite<
          pbui_Item_MeetWBTextDetail, pbui_Item_MeetWBTextDetail.Builder> implements
      // @@protoc_insertion_point(message_implements:pbui_Item_MeetWBTextDetail)
      pbui_Item_MeetWBTextDetailOrBuilder {
    private pbui_Item_MeetWBTextDetail() {
      fontname_ = com.google.protobuf.ByteString.EMPTY;
      ptext_ = com.google.protobuf.ByteString.EMPTY;
    }
    public static final int OPERID_FIELD_NUMBER = 1;
    private int operid_;
    /**
     * <pre>
     *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 operid = 1;</code>
     */
    public int getOperid() {
      return operid_;
    }
    /**
     * <pre>
     *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 operid = 1;</code>
     */
    private void setOperid(int value) {
      
      operid_ = value;
    }
    /**
     * <pre>
     *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 operid = 1;</code>
     */
    private void clearOperid() {
      
      operid_ = 0;
    }

    public static final int OPERMEMBERID_FIELD_NUMBER = 2;
    private int opermemberid_;
    /**
     * <pre>
     *当前该命令的人员ID 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 opermemberid = 2;</code>
     */
    public int getOpermemberid() {
      return opermemberid_;
    }
    /**
     * <pre>
     *当前该命令的人员ID 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 opermemberid = 2;</code>
     */
    private void setOpermemberid(int value) {
      
      opermemberid_ = value;
    }
    /**
     * <pre>
     *当前该命令的人员ID 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 opermemberid = 2;</code>
     */
    private void clearOpermemberid() {
      
      opermemberid_ = 0;
    }

    public static final int SRCMEMID_FIELD_NUMBER = 3;
    private int srcmemid_;
    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 3;</code>
     */
    public int getSrcmemid() {
      return srcmemid_;
    }
    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 3;</code>
     */
    private void setSrcmemid(int value) {
      
      srcmemid_ = value;
    }
    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 3;</code>
     */
    private void clearSrcmemid() {
      
      srcmemid_ = 0;
    }

    public static final int SRCWBID_FIELD_NUMBER = 4;
    private long srcwbid_;
    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 4;</code>
     */
    public long getSrcwbid() {
      return srcwbid_;
    }
    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 4;</code>
     */
    private void setSrcwbid(long value) {
      
      srcwbid_ = value;
    }
    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 4;</code>
     */
    private void clearSrcwbid() {
      
      srcwbid_ = 0L;
    }

    public static final int UTCSTAMP_FIELD_NUMBER = 5;
    private long utcstamp_;
    /**
     * <pre>
     *时间戳  微秒
     * </pre>
     *
     * <code>fixed64 utcstamp = 5;</code>
     */
    public long getUtcstamp() {
      return utcstamp_;
    }
    /**
     * <pre>
     *时间戳  微秒
     * </pre>
     *
     * <code>fixed64 utcstamp = 5;</code>
     */
    private void setUtcstamp(long value) {
      
      utcstamp_ = value;
    }
    /**
     * <pre>
     *时间戳  微秒
     * </pre>
     *
     * <code>fixed64 utcstamp = 5;</code>
     */
    private void clearUtcstamp() {
      
      utcstamp_ = 0L;
    }

    public static final int FIGURETYPE_FIELD_NUMBER = 6;
    private int figuretype_;
    /**
     * <pre>
     *图形类型 为0表示清除所有等于figuretype的白板操作
     * </pre>
     *
     * <code>fixed32 figuretype = 6;</code>
     */
    public int getFiguretype() {
      return figuretype_;
    }
    /**
     * <pre>
     *图形类型 为0表示清除所有等于figuretype的白板操作
     * </pre>
     *
     * <code>fixed32 figuretype = 6;</code>
     */
    private void setFiguretype(int value) {
      
      figuretype_ = value;
    }
    /**
     * <pre>
     *图形类型 为0表示清除所有等于figuretype的白板操作
     * </pre>
     *
     * <code>fixed32 figuretype = 6;</code>
     */
    private void clearFiguretype() {
      
      figuretype_ = 0;
    }

    public static final int FONTSIZE_FIELD_NUMBER = 7;
    private int fontsize_;
    /**
     * <pre>
     *字体大小
     * </pre>
     *
     * <code>fixed32 fontsize = 7;</code>
     */
    public int getFontsize() {
      return fontsize_;
    }
    /**
     * <pre>
     *字体大小
     * </pre>
     *
     * <code>fixed32 fontsize = 7;</code>
     */
    private void setFontsize(int value) {
      
      fontsize_ = value;
    }
    /**
     * <pre>
     *字体大小
     * </pre>
     *
     * <code>fixed32 fontsize = 7;</code>
     */
    private void clearFontsize() {
      
      fontsize_ = 0;
    }

    public static final int FONTFLAG_FIELD_NUMBER = 8;
    private int fontflag_;
    /**
     * <pre>
     *字体其它属性
     * </pre>
     *
     * <code>fixed32 fontflag = 8;</code>
     */
    public int getFontflag() {
      return fontflag_;
    }
    /**
     * <pre>
     *字体其它属性
     * </pre>
     *
     * <code>fixed32 fontflag = 8;</code>
     */
    private void setFontflag(int value) {
      
      fontflag_ = value;
    }
    /**
     * <pre>
     *字体其它属性
     * </pre>
     *
     * <code>fixed32 fontflag = 8;</code>
     */
    private void clearFontflag() {
      
      fontflag_ = 0;
    }

    public static final int ARGB_FIELD_NUMBER = 9;
    private int argb_;
    /**
     * <pre>
     *字体颜色
     * </pre>
     *
     * <code>fixed32 Argb = 9;</code>
     */
    public int getArgb() {
      return argb_;
    }
    /**
     * <pre>
     *字体颜色
     * </pre>
     *
     * <code>fixed32 Argb = 9;</code>
     */
    private void setArgb(int value) {
      
      argb_ = value;
    }
    /**
     * <pre>
     *字体颜色
     * </pre>
     *
     * <code>fixed32 Argb = 9;</code>
     */
    private void clearArgb() {
      
      argb_ = 0;
    }

    public static final int FONTNAME_FIELD_NUMBER = 10;
    private com.google.protobuf.ByteString fontname_;
    /**
     * <pre>
     *字体名称
     * </pre>
     *
     * <code>bytes fontname = 10;</code>
     */
    public com.google.protobuf.ByteString getFontname() {
      return fontname_;
    }
    /**
     * <pre>
     *字体名称
     * </pre>
     *
     * <code>bytes fontname = 10;</code>
     */
    private void setFontname(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      fontname_ = value;
    }
    /**
     * <pre>
     *字体名称
     * </pre>
     *
     * <code>bytes fontname = 10;</code>
     */
    private void clearFontname() {
      
      fontname_ = getDefaultInstance().getFontname();
    }

    public static final int LX_FIELD_NUMBER = 11;
    private float lx_;
    /**
     * <pre>
     *(lx,ly,左上角坐标)
     * </pre>
     *
     * <code>float lx = 11;</code>
     */
    public float getLx() {
      return lx_;
    }
    /**
     * <pre>
     *(lx,ly,左上角坐标)
     * </pre>
     *
     * <code>float lx = 11;</code>
     */
    private void setLx(float value) {
      
      lx_ = value;
    }
    /**
     * <pre>
     *(lx,ly,左上角坐标)
     * </pre>
     *
     * <code>float lx = 11;</code>
     */
    private void clearLx() {
      
      lx_ = 0F;
    }

    public static final int LY_FIELD_NUMBER = 12;
    private float ly_;
    /**
     * <pre>
     *(lx,ly,左上角坐标)
     * </pre>
     *
     * <code>float ly = 12;</code>
     */
    public float getLy() {
      return ly_;
    }
    /**
     * <pre>
     *(lx,ly,左上角坐标)
     * </pre>
     *
     * <code>float ly = 12;</code>
     */
    private void setLy(float value) {
      
      ly_ = value;
    }
    /**
     * <pre>
     *(lx,ly,左上角坐标)
     * </pre>
     *
     * <code>float ly = 12;</code>
     */
    private void clearLy() {
      
      ly_ = 0F;
    }

    public static final int PTEXT_FIELD_NUMBER = 13;
    private com.google.protobuf.ByteString ptext_;
    /**
     * <code>bytes ptext = 13;</code>
     */
    public com.google.protobuf.ByteString getPtext() {
      return ptext_;
    }
    /**
     * <code>bytes ptext = 13;</code>
     */
    private void setPtext(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      ptext_ = value;
    }
    /**
     * <code>bytes ptext = 13;</code>
     */
    private void clearPtext() {
      
      ptext_ = getDefaultInstance().getPtext();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (operid_ != 0) {
        output.writeFixed32(1, operid_);
      }
      if (opermemberid_ != 0) {
        output.writeFixed32(2, opermemberid_);
      }
      if (srcmemid_ != 0) {
        output.writeFixed32(3, srcmemid_);
      }
      if (srcwbid_ != 0L) {
        output.writeFixed64(4, srcwbid_);
      }
      if (utcstamp_ != 0L) {
        output.writeFixed64(5, utcstamp_);
      }
      if (figuretype_ != 0) {
        output.writeFixed32(6, figuretype_);
      }
      if (fontsize_ != 0) {
        output.writeFixed32(7, fontsize_);
      }
      if (fontflag_ != 0) {
        output.writeFixed32(8, fontflag_);
      }
      if (argb_ != 0) {
        output.writeFixed32(9, argb_);
      }
      if (!fontname_.isEmpty()) {
        output.writeBytes(10, fontname_);
      }
      if (lx_ != 0F) {
        output.writeFloat(11, lx_);
      }
      if (ly_ != 0F) {
        output.writeFloat(12, ly_);
      }
      if (!ptext_.isEmpty()) {
        output.writeBytes(13, ptext_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (operid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, operid_);
      }
      if (opermemberid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(2, opermemberid_);
      }
      if (srcmemid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(3, srcmemid_);
      }
      if (srcwbid_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(4, srcwbid_);
      }
      if (utcstamp_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(5, utcstamp_);
      }
      if (figuretype_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(6, figuretype_);
      }
      if (fontsize_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(7, fontsize_);
      }
      if (fontflag_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(8, fontflag_);
      }
      if (argb_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(9, argb_);
      }
      if (!fontname_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(10, fontname_);
      }
      if (lx_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(11, lx_);
      }
      if (ly_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(12, ly_);
      }
      if (!ptext_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(13, ptext_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     *添加文本
     *type:Pb_TYPE_MEET_INTERFACE_WHITEBOARD
     *callreturn
     *method: add query pagequery
     * </pre>
     *
     * Protobuf type {@code pbui_Item_MeetWBTextDetail}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail, Builder> implements
        // @@protoc_insertion_point(builder_implements:pbui_Item_MeetWBTextDetail)
        com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetailOrBuilder {
      // Construct using com.mogujie.tt.com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
       * </pre>
       *
       * <code>fixed32 operid = 1;</code>
       */
      public int getOperid() {
        return instance.getOperid();
      }
      /**
       * <pre>
       *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
       * </pre>
       *
       * <code>fixed32 operid = 1;</code>
       */
      public Builder setOperid(int value) {
        copyOnWrite();
        instance.setOperid(value);
        return this;
      }
      /**
       * <pre>
       *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
       * </pre>
       *
       * <code>fixed32 operid = 1;</code>
       */
      public Builder clearOperid() {
        copyOnWrite();
        instance.clearOperid();
        return this;
      }

      /**
       * <pre>
       *当前该命令的人员ID 为0表示清除所有等于opermemberid的白板操作
       * </pre>
       *
       * <code>fixed32 opermemberid = 2;</code>
       */
      public int getOpermemberid() {
        return instance.getOpermemberid();
      }
      /**
       * <pre>
       *当前该命令的人员ID 为0表示清除所有等于opermemberid的白板操作
       * </pre>
       *
       * <code>fixed32 opermemberid = 2;</code>
       */
      public Builder setOpermemberid(int value) {
        copyOnWrite();
        instance.setOpermemberid(value);
        return this;
      }
      /**
       * <pre>
       *当前该命令的人员ID 为0表示清除所有等于opermemberid的白板操作
       * </pre>
       *
       * <code>fixed32 opermemberid = 2;</code>
       */
      public Builder clearOpermemberid() {
        copyOnWrite();
        instance.clearOpermemberid();
        return this;
      }

      /**
       * <pre>
       *发起人的人员ID 白板标识使用
       * </pre>
       *
       * <code>fixed32 srcmemid = 3;</code>
       */
      public int getSrcmemid() {
        return instance.getSrcmemid();
      }
      /**
       * <pre>
       *发起人的人员ID 白板标识使用
       * </pre>
       *
       * <code>fixed32 srcmemid = 3;</code>
       */
      public Builder setSrcmemid(int value) {
        copyOnWrite();
        instance.setSrcmemid(value);
        return this;
      }
      /**
       * <pre>
       *发起人的人员ID 白板标识使用
       * </pre>
       *
       * <code>fixed32 srcmemid = 3;</code>
       */
      public Builder clearSrcmemid() {
        copyOnWrite();
        instance.clearSrcmemid();
        return this;
      }

      /**
       * <pre>
       *发起人的白板标识 取微秒级的时间作标识 白板标识使用
       * </pre>
       *
       * <code>fixed64 srcwbid = 4;</code>
       */
      public long getSrcwbid() {
        return instance.getSrcwbid();
      }
      /**
       * <pre>
       *发起人的白板标识 取微秒级的时间作标识 白板标识使用
       * </pre>
       *
       * <code>fixed64 srcwbid = 4;</code>
       */
      public Builder setSrcwbid(long value) {
        copyOnWrite();
        instance.setSrcwbid(value);
        return this;
      }
      /**
       * <pre>
       *发起人的白板标识 取微秒级的时间作标识 白板标识使用
       * </pre>
       *
       * <code>fixed64 srcwbid = 4;</code>
       */
      public Builder clearSrcwbid() {
        copyOnWrite();
        instance.clearSrcwbid();
        return this;
      }

      /**
       * <pre>
       *时间戳  微秒
       * </pre>
       *
       * <code>fixed64 utcstamp = 5;</code>
       */
      public long getUtcstamp() {
        return instance.getUtcstamp();
      }
      /**
       * <pre>
       *时间戳  微秒
       * </pre>
       *
       * <code>fixed64 utcstamp = 5;</code>
       */
      public Builder setUtcstamp(long value) {
        copyOnWrite();
        instance.setUtcstamp(value);
        return this;
      }
      /**
       * <pre>
       *时间戳  微秒
       * </pre>
       *
       * <code>fixed64 utcstamp = 5;</code>
       */
      public Builder clearUtcstamp() {
        copyOnWrite();
        instance.clearUtcstamp();
        return this;
      }

      /**
       * <pre>
       *图形类型 为0表示清除所有等于figuretype的白板操作
       * </pre>
       *
       * <code>fixed32 figuretype = 6;</code>
       */
      public int getFiguretype() {
        return instance.getFiguretype();
      }
      /**
       * <pre>
       *图形类型 为0表示清除所有等于figuretype的白板操作
       * </pre>
       *
       * <code>fixed32 figuretype = 6;</code>
       */
      public Builder setFiguretype(int value) {
        copyOnWrite();
        instance.setFiguretype(value);
        return this;
      }
      /**
       * <pre>
       *图形类型 为0表示清除所有等于figuretype的白板操作
       * </pre>
       *
       * <code>fixed32 figuretype = 6;</code>
       */
      public Builder clearFiguretype() {
        copyOnWrite();
        instance.clearFiguretype();
        return this;
      }

      /**
       * <pre>
       *字体大小
       * </pre>
       *
       * <code>fixed32 fontsize = 7;</code>
       */
      public int getFontsize() {
        return instance.getFontsize();
      }
      /**
       * <pre>
       *字体大小
       * </pre>
       *
       * <code>fixed32 fontsize = 7;</code>
       */
      public Builder setFontsize(int value) {
        copyOnWrite();
        instance.setFontsize(value);
        return this;
      }
      /**
       * <pre>
       *字体大小
       * </pre>
       *
       * <code>fixed32 fontsize = 7;</code>
       */
      public Builder clearFontsize() {
        copyOnWrite();
        instance.clearFontsize();
        return this;
      }

      /**
       * <pre>
       *字体其它属性
       * </pre>
       *
       * <code>fixed32 fontflag = 8;</code>
       */
      public int getFontflag() {
        return instance.getFontflag();
      }
      /**
       * <pre>
       *字体其它属性
       * </pre>
       *
       * <code>fixed32 fontflag = 8;</code>
       */
      public Builder setFontflag(int value) {
        copyOnWrite();
        instance.setFontflag(value);
        return this;
      }
      /**
       * <pre>
       *字体其它属性
       * </pre>
       *
       * <code>fixed32 fontflag = 8;</code>
       */
      public Builder clearFontflag() {
        copyOnWrite();
        instance.clearFontflag();
        return this;
      }

      /**
       * <pre>
       *字体颜色
       * </pre>
       *
       * <code>fixed32 Argb = 9;</code>
       */
      public int getArgb() {
        return instance.getArgb();
      }
      /**
       * <pre>
       *字体颜色
       * </pre>
       *
       * <code>fixed32 Argb = 9;</code>
       */
      public Builder setArgb(int value) {
        copyOnWrite();
        instance.setArgb(value);
        return this;
      }
      /**
       * <pre>
       *字体颜色
       * </pre>
       *
       * <code>fixed32 Argb = 9;</code>
       */
      public Builder clearArgb() {
        copyOnWrite();
        instance.clearArgb();
        return this;
      }

      /**
       * <pre>
       *字体名称
       * </pre>
       *
       * <code>bytes fontname = 10;</code>
       */
      public com.google.protobuf.ByteString getFontname() {
        return instance.getFontname();
      }
      /**
       * <pre>
       *字体名称
       * </pre>
       *
       * <code>bytes fontname = 10;</code>
       */
      public Builder setFontname(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setFontname(value);
        return this;
      }
      /**
       * <pre>
       *字体名称
       * </pre>
       *
       * <code>bytes fontname = 10;</code>
       */
      public Builder clearFontname() {
        copyOnWrite();
        instance.clearFontname();
        return this;
      }

      /**
       * <pre>
       *(lx,ly,左上角坐标)
       * </pre>
       *
       * <code>float lx = 11;</code>
       */
      public float getLx() {
        return instance.getLx();
      }
      /**
       * <pre>
       *(lx,ly,左上角坐标)
       * </pre>
       *
       * <code>float lx = 11;</code>
       */
      public Builder setLx(float value) {
        copyOnWrite();
        instance.setLx(value);
        return this;
      }
      /**
       * <pre>
       *(lx,ly,左上角坐标)
       * </pre>
       *
       * <code>float lx = 11;</code>
       */
      public Builder clearLx() {
        copyOnWrite();
        instance.clearLx();
        return this;
      }

      /**
       * <pre>
       *(lx,ly,左上角坐标)
       * </pre>
       *
       * <code>float ly = 12;</code>
       */
      public float getLy() {
        return instance.getLy();
      }
      /**
       * <pre>
       *(lx,ly,左上角坐标)
       * </pre>
       *
       * <code>float ly = 12;</code>
       */
      public Builder setLy(float value) {
        copyOnWrite();
        instance.setLy(value);
        return this;
      }
      /**
       * <pre>
       *(lx,ly,左上角坐标)
       * </pre>
       *
       * <code>float ly = 12;</code>
       */
      public Builder clearLy() {
        copyOnWrite();
        instance.clearLy();
        return this;
      }

      /**
       * <code>bytes ptext = 13;</code>
       */
      public com.google.protobuf.ByteString getPtext() {
        return instance.getPtext();
      }
      /**
       * <code>bytes ptext = 13;</code>
       */
      public Builder setPtext(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPtext(value);
        return this;
      }
      /**
       * <code>bytes ptext = 13;</code>
       */
      public Builder clearPtext() {
        copyOnWrite();
        instance.clearPtext();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pbui_Item_MeetWBTextDetail)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail other = (com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail) arg1;
          operid_ = visitor.visitInt(operid_ != 0, operid_,
              other.operid_ != 0, other.operid_);
          opermemberid_ = visitor.visitInt(opermemberid_ != 0, opermemberid_,
              other.opermemberid_ != 0, other.opermemberid_);
          srcmemid_ = visitor.visitInt(srcmemid_ != 0, srcmemid_,
              other.srcmemid_ != 0, other.srcmemid_);
          srcwbid_ = visitor.visitLong(srcwbid_ != 0L, srcwbid_,
              other.srcwbid_ != 0L, other.srcwbid_);
          utcstamp_ = visitor.visitLong(utcstamp_ != 0L, utcstamp_,
              other.utcstamp_ != 0L, other.utcstamp_);
          figuretype_ = visitor.visitInt(figuretype_ != 0, figuretype_,
              other.figuretype_ != 0, other.figuretype_);
          fontsize_ = visitor.visitInt(fontsize_ != 0, fontsize_,
              other.fontsize_ != 0, other.fontsize_);
          fontflag_ = visitor.visitInt(fontflag_ != 0, fontflag_,
              other.fontflag_ != 0, other.fontflag_);
          argb_ = visitor.visitInt(argb_ != 0, argb_,
              other.argb_ != 0, other.argb_);
          fontname_ = visitor.visitByteString(fontname_ != com.google.protobuf.ByteString.EMPTY, fontname_,
              other.fontname_ != com.google.protobuf.ByteString.EMPTY, other.fontname_);
          lx_ = visitor.visitFloat(lx_ != 0F, lx_,
              other.lx_ != 0F, other.lx_);
          ly_ = visitor.visitFloat(ly_ != 0F, ly_,
              other.ly_ != 0F, other.ly_);
          ptext_ = visitor.visitByteString(ptext_ != com.google.protobuf.ByteString.EMPTY, ptext_,
              other.ptext_ != com.google.protobuf.ByteString.EMPTY, other.ptext_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 13: {

                  operid_ = input.readFixed32();
                  break;
                }
                case 21: {

                  opermemberid_ = input.readFixed32();
                  break;
                }
                case 29: {

                  srcmemid_ = input.readFixed32();
                  break;
                }
                case 33: {

                  srcwbid_ = input.readFixed64();
                  break;
                }
                case 41: {

                  utcstamp_ = input.readFixed64();
                  break;
                }
                case 53: {

                  figuretype_ = input.readFixed32();
                  break;
                }
                case 61: {

                  fontsize_ = input.readFixed32();
                  break;
                }
                case 69: {

                  fontflag_ = input.readFixed32();
                  break;
                }
                case 77: {

                  argb_ = input.readFixed32();
                  break;
                }
                case 82: {

                  fontname_ = input.readBytes();
                  break;
                }
                case 93: {

                  lx_ = input.readFloat();
                  break;
                }
                case 101: {

                  ly_ = input.readFloat();
                  break;
                }
                case 106: {

                  ptext_ = input.readBytes();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pbui_Item_MeetWBTextDetail)
    private static final com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pbui_Item_MeetWBTextDetail();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<pbui_Item_MeetWBTextDetail> PARSER;

    public static com.google.protobuf.Parser<pbui_Item_MeetWBTextDetail> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface pbui_Type_MeetWBTextDetailOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pbui_Type_MeetWBTextDetail)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .pbui_Item_MeetWBTextDetail item = 1;</code>
     */
    java.util.List<com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail> 
        getItemList();
    /**
     * <code>repeated .pbui_Item_MeetWBTextDetail item = 1;</code>
     */
    com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail getItem(int index);
    /**
     * <code>repeated .pbui_Item_MeetWBTextDetail item = 1;</code>
     */
    int getItemCount();
  }
  /**
   * Protobuf type {@code pbui_Type_MeetWBTextDetail}
   */
  public  static final class pbui_Type_MeetWBTextDetail extends
      com.google.protobuf.GeneratedMessageLite<
          pbui_Type_MeetWBTextDetail, pbui_Type_MeetWBTextDetail.Builder> implements
      // @@protoc_insertion_point(message_implements:pbui_Type_MeetWBTextDetail)
      pbui_Type_MeetWBTextDetailOrBuilder {
    private pbui_Type_MeetWBTextDetail() {
      item_ = emptyProtobufList();
    }
    public static final int ITEM_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail> item_;
    /**
     * <code>repeated .pbui_Item_MeetWBTextDetail item = 1;</code>
     */
    public java.util.List<com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail> getItemList() {
      return item_;
    }
    /**
     * <code>repeated .pbui_Item_MeetWBTextDetail item = 1;</code>
     */
    public java.util.List<? extends com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetailOrBuilder> 
        getItemOrBuilderList() {
      return item_;
    }
    /**
     * <code>repeated .pbui_Item_MeetWBTextDetail item = 1;</code>
     */
    public int getItemCount() {
      return item_.size();
    }
    /**
     * <code>repeated .pbui_Item_MeetWBTextDetail item = 1;</code>
     */
    public com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail getItem(int index) {
      return item_.get(index);
    }
    /**
     * <code>repeated .pbui_Item_MeetWBTextDetail item = 1;</code>
     */
    public com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetailOrBuilder getItemOrBuilder(
        int index) {
      return item_.get(index);
    }
    private void ensureItemIsMutable() {
      if (!item_.isModifiable()) {
        item_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(item_);
       }
    }

    /**
     * <code>repeated .pbui_Item_MeetWBTextDetail item = 1;</code>
     */
    private void setItem(
        int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureItemIsMutable();
      item_.set(index, value);
    }
    /**
     * <code>repeated .pbui_Item_MeetWBTextDetail item = 1;</code>
     */
    private void setItem(
        int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail.Builder builderForValue) {
      ensureItemIsMutable();
      item_.set(index, builderForValue.build());
    }
    /**
     * <code>repeated .pbui_Item_MeetWBTextDetail item = 1;</code>
     */
    private void addItem(com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureItemIsMutable();
      item_.add(value);
    }
    /**
     * <code>repeated .pbui_Item_MeetWBTextDetail item = 1;</code>
     */
    private void addItem(
        int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureItemIsMutable();
      item_.add(index, value);
    }
    /**
     * <code>repeated .pbui_Item_MeetWBTextDetail item = 1;</code>
     */
    private void addItem(
        com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail.Builder builderForValue) {
      ensureItemIsMutable();
      item_.add(builderForValue.build());
    }
    /**
     * <code>repeated .pbui_Item_MeetWBTextDetail item = 1;</code>
     */
    private void addItem(
        int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail.Builder builderForValue) {
      ensureItemIsMutable();
      item_.add(index, builderForValue.build());
    }
    /**
     * <code>repeated .pbui_Item_MeetWBTextDetail item = 1;</code>
     */
    private void addAllItem(
        java.lang.Iterable<? extends com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail> values) {
      ensureItemIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, item_);
    }
    /**
     * <code>repeated .pbui_Item_MeetWBTextDetail item = 1;</code>
     */
    private void clearItem() {
      item_ = emptyProtobufList();
    }
    /**
     * <code>repeated .pbui_Item_MeetWBTextDetail item = 1;</code>
     */
    private void removeItem(int index) {
      ensureItemIsMutable();
      item_.remove(index);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < item_.size(); i++) {
        output.writeMessage(1, item_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < item_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, item_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBTextDetail parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBTextDetail parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBTextDetail parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBTextDetail parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBTextDetail parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBTextDetail parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBTextDetail parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBTextDetail parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBTextDetail parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBTextDetail parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBTextDetail parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBTextDetail parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBTextDetail prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code pbui_Type_MeetWBTextDetail}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBTextDetail, Builder> implements
        // @@protoc_insertion_point(builder_implements:pbui_Type_MeetWBTextDetail)
        com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBTextDetailOrBuilder {
      // Construct using com.mogujie.tt.com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBTextDetail.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated .pbui_Item_MeetWBTextDetail item = 1;</code>
       */
      public java.util.List<com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail> getItemList() {
        return java.util.Collections.unmodifiableList(
            instance.getItemList());
      }
      /**
       * <code>repeated .pbui_Item_MeetWBTextDetail item = 1;</code>
       */
      public int getItemCount() {
        return instance.getItemCount();
      }/**
       * <code>repeated .pbui_Item_MeetWBTextDetail item = 1;</code>
       */
      public com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail getItem(int index) {
        return instance.getItem(index);
      }
      /**
       * <code>repeated .pbui_Item_MeetWBTextDetail item = 1;</code>
       */
      public Builder setItem(
          int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail value) {
        copyOnWrite();
        instance.setItem(index, value);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetWBTextDetail item = 1;</code>
       */
      public Builder setItem(
          int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail.Builder builderForValue) {
        copyOnWrite();
        instance.setItem(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetWBTextDetail item = 1;</code>
       */
      public Builder addItem(com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail value) {
        copyOnWrite();
        instance.addItem(value);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetWBTextDetail item = 1;</code>
       */
      public Builder addItem(
          int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail value) {
        copyOnWrite();
        instance.addItem(index, value);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetWBTextDetail item = 1;</code>
       */
      public Builder addItem(
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail.Builder builderForValue) {
        copyOnWrite();
        instance.addItem(builderForValue);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetWBTextDetail item = 1;</code>
       */
      public Builder addItem(
          int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail.Builder builderForValue) {
        copyOnWrite();
        instance.addItem(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetWBTextDetail item = 1;</code>
       */
      public Builder addAllItem(
          java.lang.Iterable<? extends com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail> values) {
        copyOnWrite();
        instance.addAllItem(values);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetWBTextDetail item = 1;</code>
       */
      public Builder clearItem() {
        copyOnWrite();
        instance.clearItem();
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetWBTextDetail item = 1;</code>
       */
      public Builder removeItem(int index) {
        copyOnWrite();
        instance.removeItem(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pbui_Type_MeetWBTextDetail)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBTextDetail();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          item_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBTextDetail other = (com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBTextDetail) arg1;
          item_= visitor.visitList(item_, other.item_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  if (!item_.isModifiable()) {
                    item_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(item_);
                  }
                  item_.add(
                      input.readMessage(com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBTextDetail.parser(), extensionRegistry));
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBTextDetail.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pbui_Type_MeetWBTextDetail)
    private static final com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBTextDetail DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pbui_Type_MeetWBTextDetail();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBTextDetail getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<pbui_Type_MeetWBTextDetail> PARSER;

    public static com.google.protobuf.Parser<pbui_Type_MeetWBTextDetail> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface pbui_Item_MeetWBPictureDetailOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pbui_Item_MeetWBPictureDetail)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 operid = 1;</code>
     */
    int getOperid();

    /**
     * <pre>
     *当前该命令的人员ID 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 opermemberid = 2;</code>
     */
    int getOpermemberid();

    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 3;</code>
     */
    int getSrcmemid();

    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 4;</code>
     */
    long getSrcwbid();

    /**
     * <pre>
     *时间戳  微秒
     * </pre>
     *
     * <code>fixed64 utcstamp = 5;</code>
     */
    long getUtcstamp();

    /**
     * <pre>
     *图形类型 为0表示清除所有等于figuretype的白板操作
     * </pre>
     *
     * <code>fixed32 figuretype = 6;</code>
     */
    int getFiguretype();

    /**
     * <pre>
     *(lx,ly,左上角坐标)
     * </pre>
     *
     * <code>float lx = 7;</code>
     */
    float getLx();

    /**
     * <pre>
     *(lx,ly,左上角坐标)
     * </pre>
     *
     * <code>float ly = 8;</code>
     */
    float getLy();

    /**
     * <pre>
     *png图片数据(二进制转hex编码)
     * </pre>
     *
     * <code>bytes picdata = 9;</code>
     */
    com.google.protobuf.ByteString getPicdata();
  }
  /**
   * <pre>
   *添加图片
   *type:Pb_TYPE_MEET_INTERFACE_WHITEBOARD
   *call return
   *method: add query pagequery
   * </pre>
   *
   * Protobuf type {@code pbui_Item_MeetWBPictureDetail}
   */
  public  static final class pbui_Item_MeetWBPictureDetail extends
      com.google.protobuf.GeneratedMessageLite<
          pbui_Item_MeetWBPictureDetail, pbui_Item_MeetWBPictureDetail.Builder> implements
      // @@protoc_insertion_point(message_implements:pbui_Item_MeetWBPictureDetail)
      pbui_Item_MeetWBPictureDetailOrBuilder {
    private pbui_Item_MeetWBPictureDetail() {
      picdata_ = com.google.protobuf.ByteString.EMPTY;
    }
    public static final int OPERID_FIELD_NUMBER = 1;
    private int operid_;
    /**
     * <pre>
     *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 operid = 1;</code>
     */
    public int getOperid() {
      return operid_;
    }
    /**
     * <pre>
     *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 operid = 1;</code>
     */
    private void setOperid(int value) {
      
      operid_ = value;
    }
    /**
     * <pre>
     *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 operid = 1;</code>
     */
    private void clearOperid() {
      
      operid_ = 0;
    }

    public static final int OPERMEMBERID_FIELD_NUMBER = 2;
    private int opermemberid_;
    /**
     * <pre>
     *当前该命令的人员ID 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 opermemberid = 2;</code>
     */
    public int getOpermemberid() {
      return opermemberid_;
    }
    /**
     * <pre>
     *当前该命令的人员ID 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 opermemberid = 2;</code>
     */
    private void setOpermemberid(int value) {
      
      opermemberid_ = value;
    }
    /**
     * <pre>
     *当前该命令的人员ID 为0表示清除所有等于opermemberid的白板操作
     * </pre>
     *
     * <code>fixed32 opermemberid = 2;</code>
     */
    private void clearOpermemberid() {
      
      opermemberid_ = 0;
    }

    public static final int SRCMEMID_FIELD_NUMBER = 3;
    private int srcmemid_;
    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 3;</code>
     */
    public int getSrcmemid() {
      return srcmemid_;
    }
    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 3;</code>
     */
    private void setSrcmemid(int value) {
      
      srcmemid_ = value;
    }
    /**
     * <pre>
     *发起人的人员ID 白板标识使用
     * </pre>
     *
     * <code>fixed32 srcmemid = 3;</code>
     */
    private void clearSrcmemid() {
      
      srcmemid_ = 0;
    }

    public static final int SRCWBID_FIELD_NUMBER = 4;
    private long srcwbid_;
    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 4;</code>
     */
    public long getSrcwbid() {
      return srcwbid_;
    }
    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 4;</code>
     */
    private void setSrcwbid(long value) {
      
      srcwbid_ = value;
    }
    /**
     * <pre>
     *发起人的白板标识 取微秒级的时间作标识 白板标识使用
     * </pre>
     *
     * <code>fixed64 srcwbid = 4;</code>
     */
    private void clearSrcwbid() {
      
      srcwbid_ = 0L;
    }

    public static final int UTCSTAMP_FIELD_NUMBER = 5;
    private long utcstamp_;
    /**
     * <pre>
     *时间戳  微秒
     * </pre>
     *
     * <code>fixed64 utcstamp = 5;</code>
     */
    public long getUtcstamp() {
      return utcstamp_;
    }
    /**
     * <pre>
     *时间戳  微秒
     * </pre>
     *
     * <code>fixed64 utcstamp = 5;</code>
     */
    private void setUtcstamp(long value) {
      
      utcstamp_ = value;
    }
    /**
     * <pre>
     *时间戳  微秒
     * </pre>
     *
     * <code>fixed64 utcstamp = 5;</code>
     */
    private void clearUtcstamp() {
      
      utcstamp_ = 0L;
    }

    public static final int FIGURETYPE_FIELD_NUMBER = 6;
    private int figuretype_;
    /**
     * <pre>
     *图形类型 为0表示清除所有等于figuretype的白板操作
     * </pre>
     *
     * <code>fixed32 figuretype = 6;</code>
     */
    public int getFiguretype() {
      return figuretype_;
    }
    /**
     * <pre>
     *图形类型 为0表示清除所有等于figuretype的白板操作
     * </pre>
     *
     * <code>fixed32 figuretype = 6;</code>
     */
    private void setFiguretype(int value) {
      
      figuretype_ = value;
    }
    /**
     * <pre>
     *图形类型 为0表示清除所有等于figuretype的白板操作
     * </pre>
     *
     * <code>fixed32 figuretype = 6;</code>
     */
    private void clearFiguretype() {
      
      figuretype_ = 0;
    }

    public static final int LX_FIELD_NUMBER = 7;
    private float lx_;
    /**
     * <pre>
     *(lx,ly,左上角坐标)
     * </pre>
     *
     * <code>float lx = 7;</code>
     */
    public float getLx() {
      return lx_;
    }
    /**
     * <pre>
     *(lx,ly,左上角坐标)
     * </pre>
     *
     * <code>float lx = 7;</code>
     */
    private void setLx(float value) {
      
      lx_ = value;
    }
    /**
     * <pre>
     *(lx,ly,左上角坐标)
     * </pre>
     *
     * <code>float lx = 7;</code>
     */
    private void clearLx() {
      
      lx_ = 0F;
    }

    public static final int LY_FIELD_NUMBER = 8;
    private float ly_;
    /**
     * <pre>
     *(lx,ly,左上角坐标)
     * </pre>
     *
     * <code>float ly = 8;</code>
     */
    public float getLy() {
      return ly_;
    }
    /**
     * <pre>
     *(lx,ly,左上角坐标)
     * </pre>
     *
     * <code>float ly = 8;</code>
     */
    private void setLy(float value) {
      
      ly_ = value;
    }
    /**
     * <pre>
     *(lx,ly,左上角坐标)
     * </pre>
     *
     * <code>float ly = 8;</code>
     */
    private void clearLy() {
      
      ly_ = 0F;
    }

    public static final int PICDATA_FIELD_NUMBER = 9;
    private com.google.protobuf.ByteString picdata_;
    /**
     * <pre>
     *png图片数据(二进制转hex编码)
     * </pre>
     *
     * <code>bytes picdata = 9;</code>
     */
    public com.google.protobuf.ByteString getPicdata() {
      return picdata_;
    }
    /**
     * <pre>
     *png图片数据(二进制转hex编码)
     * </pre>
     *
     * <code>bytes picdata = 9;</code>
     */
    private void setPicdata(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      picdata_ = value;
    }
    /**
     * <pre>
     *png图片数据(二进制转hex编码)
     * </pre>
     *
     * <code>bytes picdata = 9;</code>
     */
    private void clearPicdata() {
      
      picdata_ = getDefaultInstance().getPicdata();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (operid_ != 0) {
        output.writeFixed32(1, operid_);
      }
      if (opermemberid_ != 0) {
        output.writeFixed32(2, opermemberid_);
      }
      if (srcmemid_ != 0) {
        output.writeFixed32(3, srcmemid_);
      }
      if (srcwbid_ != 0L) {
        output.writeFixed64(4, srcwbid_);
      }
      if (utcstamp_ != 0L) {
        output.writeFixed64(5, utcstamp_);
      }
      if (figuretype_ != 0) {
        output.writeFixed32(6, figuretype_);
      }
      if (lx_ != 0F) {
        output.writeFloat(7, lx_);
      }
      if (ly_ != 0F) {
        output.writeFloat(8, ly_);
      }
      if (!picdata_.isEmpty()) {
        output.writeBytes(9, picdata_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (operid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, operid_);
      }
      if (opermemberid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(2, opermemberid_);
      }
      if (srcmemid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(3, srcmemid_);
      }
      if (srcwbid_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(4, srcwbid_);
      }
      if (utcstamp_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(5, utcstamp_);
      }
      if (figuretype_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(6, figuretype_);
      }
      if (lx_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(7, lx_);
      }
      if (ly_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(8, ly_);
      }
      if (!picdata_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(9, picdata_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     *添加图片
     *type:Pb_TYPE_MEET_INTERFACE_WHITEBOARD
     *call return
     *method: add query pagequery
     * </pre>
     *
     * Protobuf type {@code pbui_Item_MeetWBPictureDetail}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail, Builder> implements
        // @@protoc_insertion_point(builder_implements:pbui_Item_MeetWBPictureDetail)
        com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetailOrBuilder {
      // Construct using com.mogujie.tt.com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
       * </pre>
       *
       * <code>fixed32 operid = 1;</code>
       */
      public int getOperid() {
        return instance.getOperid();
      }
      /**
       * <pre>
       *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
       * </pre>
       *
       * <code>fixed32 operid = 1;</code>
       */
      public Builder setOperid(int value) {
        copyOnWrite();
        instance.setOperid(value);
        return this;
      }
      /**
       * <pre>
       *操作ID 终端计算产生 为0表示清除所有等于opermemberid的白板操作
       * </pre>
       *
       * <code>fixed32 operid = 1;</code>
       */
      public Builder clearOperid() {
        copyOnWrite();
        instance.clearOperid();
        return this;
      }

      /**
       * <pre>
       *当前该命令的人员ID 为0表示清除所有等于opermemberid的白板操作
       * </pre>
       *
       * <code>fixed32 opermemberid = 2;</code>
       */
      public int getOpermemberid() {
        return instance.getOpermemberid();
      }
      /**
       * <pre>
       *当前该命令的人员ID 为0表示清除所有等于opermemberid的白板操作
       * </pre>
       *
       * <code>fixed32 opermemberid = 2;</code>
       */
      public Builder setOpermemberid(int value) {
        copyOnWrite();
        instance.setOpermemberid(value);
        return this;
      }
      /**
       * <pre>
       *当前该命令的人员ID 为0表示清除所有等于opermemberid的白板操作
       * </pre>
       *
       * <code>fixed32 opermemberid = 2;</code>
       */
      public Builder clearOpermemberid() {
        copyOnWrite();
        instance.clearOpermemberid();
        return this;
      }

      /**
       * <pre>
       *发起人的人员ID 白板标识使用
       * </pre>
       *
       * <code>fixed32 srcmemid = 3;</code>
       */
      public int getSrcmemid() {
        return instance.getSrcmemid();
      }
      /**
       * <pre>
       *发起人的人员ID 白板标识使用
       * </pre>
       *
       * <code>fixed32 srcmemid = 3;</code>
       */
      public Builder setSrcmemid(int value) {
        copyOnWrite();
        instance.setSrcmemid(value);
        return this;
      }
      /**
       * <pre>
       *发起人的人员ID 白板标识使用
       * </pre>
       *
       * <code>fixed32 srcmemid = 3;</code>
       */
      public Builder clearSrcmemid() {
        copyOnWrite();
        instance.clearSrcmemid();
        return this;
      }

      /**
       * <pre>
       *发起人的白板标识 取微秒级的时间作标识 白板标识使用
       * </pre>
       *
       * <code>fixed64 srcwbid = 4;</code>
       */
      public long getSrcwbid() {
        return instance.getSrcwbid();
      }
      /**
       * <pre>
       *发起人的白板标识 取微秒级的时间作标识 白板标识使用
       * </pre>
       *
       * <code>fixed64 srcwbid = 4;</code>
       */
      public Builder setSrcwbid(long value) {
        copyOnWrite();
        instance.setSrcwbid(value);
        return this;
      }
      /**
       * <pre>
       *发起人的白板标识 取微秒级的时间作标识 白板标识使用
       * </pre>
       *
       * <code>fixed64 srcwbid = 4;</code>
       */
      public Builder clearSrcwbid() {
        copyOnWrite();
        instance.clearSrcwbid();
        return this;
      }

      /**
       * <pre>
       *时间戳  微秒
       * </pre>
       *
       * <code>fixed64 utcstamp = 5;</code>
       */
      public long getUtcstamp() {
        return instance.getUtcstamp();
      }
      /**
       * <pre>
       *时间戳  微秒
       * </pre>
       *
       * <code>fixed64 utcstamp = 5;</code>
       */
      public Builder setUtcstamp(long value) {
        copyOnWrite();
        instance.setUtcstamp(value);
        return this;
      }
      /**
       * <pre>
       *时间戳  微秒
       * </pre>
       *
       * <code>fixed64 utcstamp = 5;</code>
       */
      public Builder clearUtcstamp() {
        copyOnWrite();
        instance.clearUtcstamp();
        return this;
      }

      /**
       * <pre>
       *图形类型 为0表示清除所有等于figuretype的白板操作
       * </pre>
       *
       * <code>fixed32 figuretype = 6;</code>
       */
      public int getFiguretype() {
        return instance.getFiguretype();
      }
      /**
       * <pre>
       *图形类型 为0表示清除所有等于figuretype的白板操作
       * </pre>
       *
       * <code>fixed32 figuretype = 6;</code>
       */
      public Builder setFiguretype(int value) {
        copyOnWrite();
        instance.setFiguretype(value);
        return this;
      }
      /**
       * <pre>
       *图形类型 为0表示清除所有等于figuretype的白板操作
       * </pre>
       *
       * <code>fixed32 figuretype = 6;</code>
       */
      public Builder clearFiguretype() {
        copyOnWrite();
        instance.clearFiguretype();
        return this;
      }

      /**
       * <pre>
       *(lx,ly,左上角坐标)
       * </pre>
       *
       * <code>float lx = 7;</code>
       */
      public float getLx() {
        return instance.getLx();
      }
      /**
       * <pre>
       *(lx,ly,左上角坐标)
       * </pre>
       *
       * <code>float lx = 7;</code>
       */
      public Builder setLx(float value) {
        copyOnWrite();
        instance.setLx(value);
        return this;
      }
      /**
       * <pre>
       *(lx,ly,左上角坐标)
       * </pre>
       *
       * <code>float lx = 7;</code>
       */
      public Builder clearLx() {
        copyOnWrite();
        instance.clearLx();
        return this;
      }

      /**
       * <pre>
       *(lx,ly,左上角坐标)
       * </pre>
       *
       * <code>float ly = 8;</code>
       */
      public float getLy() {
        return instance.getLy();
      }
      /**
       * <pre>
       *(lx,ly,左上角坐标)
       * </pre>
       *
       * <code>float ly = 8;</code>
       */
      public Builder setLy(float value) {
        copyOnWrite();
        instance.setLy(value);
        return this;
      }
      /**
       * <pre>
       *(lx,ly,左上角坐标)
       * </pre>
       *
       * <code>float ly = 8;</code>
       */
      public Builder clearLy() {
        copyOnWrite();
        instance.clearLy();
        return this;
      }

      /**
       * <pre>
       *png图片数据(二进制转hex编码)
       * </pre>
       *
       * <code>bytes picdata = 9;</code>
       */
      public com.google.protobuf.ByteString getPicdata() {
        return instance.getPicdata();
      }
      /**
       * <pre>
       *png图片数据(二进制转hex编码)
       * </pre>
       *
       * <code>bytes picdata = 9;</code>
       */
      public Builder setPicdata(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPicdata(value);
        return this;
      }
      /**
       * <pre>
       *png图片数据(二进制转hex编码)
       * </pre>
       *
       * <code>bytes picdata = 9;</code>
       */
      public Builder clearPicdata() {
        copyOnWrite();
        instance.clearPicdata();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pbui_Item_MeetWBPictureDetail)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail other = (com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail) arg1;
          operid_ = visitor.visitInt(operid_ != 0, operid_,
              other.operid_ != 0, other.operid_);
          opermemberid_ = visitor.visitInt(opermemberid_ != 0, opermemberid_,
              other.opermemberid_ != 0, other.opermemberid_);
          srcmemid_ = visitor.visitInt(srcmemid_ != 0, srcmemid_,
              other.srcmemid_ != 0, other.srcmemid_);
          srcwbid_ = visitor.visitLong(srcwbid_ != 0L, srcwbid_,
              other.srcwbid_ != 0L, other.srcwbid_);
          utcstamp_ = visitor.visitLong(utcstamp_ != 0L, utcstamp_,
              other.utcstamp_ != 0L, other.utcstamp_);
          figuretype_ = visitor.visitInt(figuretype_ != 0, figuretype_,
              other.figuretype_ != 0, other.figuretype_);
          lx_ = visitor.visitFloat(lx_ != 0F, lx_,
              other.lx_ != 0F, other.lx_);
          ly_ = visitor.visitFloat(ly_ != 0F, ly_,
              other.ly_ != 0F, other.ly_);
          picdata_ = visitor.visitByteString(picdata_ != com.google.protobuf.ByteString.EMPTY, picdata_,
              other.picdata_ != com.google.protobuf.ByteString.EMPTY, other.picdata_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 13: {

                  operid_ = input.readFixed32();
                  break;
                }
                case 21: {

                  opermemberid_ = input.readFixed32();
                  break;
                }
                case 29: {

                  srcmemid_ = input.readFixed32();
                  break;
                }
                case 33: {

                  srcwbid_ = input.readFixed64();
                  break;
                }
                case 41: {

                  utcstamp_ = input.readFixed64();
                  break;
                }
                case 53: {

                  figuretype_ = input.readFixed32();
                  break;
                }
                case 61: {

                  lx_ = input.readFloat();
                  break;
                }
                case 69: {

                  ly_ = input.readFloat();
                  break;
                }
                case 74: {

                  picdata_ = input.readBytes();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pbui_Item_MeetWBPictureDetail)
    private static final com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pbui_Item_MeetWBPictureDetail();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<pbui_Item_MeetWBPictureDetail> PARSER;

    public static com.google.protobuf.Parser<pbui_Item_MeetWBPictureDetail> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface pbui_Type_MeetWBPictureDetailOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pbui_Type_MeetWBPictureDetail)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .pbui_Item_MeetWBPictureDetail item = 1;</code>
     */
    java.util.List<com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail> 
        getItemList();
    /**
     * <code>repeated .pbui_Item_MeetWBPictureDetail item = 1;</code>
     */
    com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail getItem(int index);
    /**
     * <code>repeated .pbui_Item_MeetWBPictureDetail item = 1;</code>
     */
    int getItemCount();
  }
  /**
   * Protobuf type {@code pbui_Type_MeetWBPictureDetail}
   */
  public  static final class pbui_Type_MeetWBPictureDetail extends
      com.google.protobuf.GeneratedMessageLite<
          pbui_Type_MeetWBPictureDetail, pbui_Type_MeetWBPictureDetail.Builder> implements
      // @@protoc_insertion_point(message_implements:pbui_Type_MeetWBPictureDetail)
      pbui_Type_MeetWBPictureDetailOrBuilder {
    private pbui_Type_MeetWBPictureDetail() {
      item_ = emptyProtobufList();
    }
    public static final int ITEM_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail> item_;
    /**
     * <code>repeated .pbui_Item_MeetWBPictureDetail item = 1;</code>
     */
    public java.util.List<com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail> getItemList() {
      return item_;
    }
    /**
     * <code>repeated .pbui_Item_MeetWBPictureDetail item = 1;</code>
     */
    public java.util.List<? extends com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetailOrBuilder> 
        getItemOrBuilderList() {
      return item_;
    }
    /**
     * <code>repeated .pbui_Item_MeetWBPictureDetail item = 1;</code>
     */
    public int getItemCount() {
      return item_.size();
    }
    /**
     * <code>repeated .pbui_Item_MeetWBPictureDetail item = 1;</code>
     */
    public com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail getItem(int index) {
      return item_.get(index);
    }
    /**
     * <code>repeated .pbui_Item_MeetWBPictureDetail item = 1;</code>
     */
    public com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetailOrBuilder getItemOrBuilder(
        int index) {
      return item_.get(index);
    }
    private void ensureItemIsMutable() {
      if (!item_.isModifiable()) {
        item_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(item_);
       }
    }

    /**
     * <code>repeated .pbui_Item_MeetWBPictureDetail item = 1;</code>
     */
    private void setItem(
        int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureItemIsMutable();
      item_.set(index, value);
    }
    /**
     * <code>repeated .pbui_Item_MeetWBPictureDetail item = 1;</code>
     */
    private void setItem(
        int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail.Builder builderForValue) {
      ensureItemIsMutable();
      item_.set(index, builderForValue.build());
    }
    /**
     * <code>repeated .pbui_Item_MeetWBPictureDetail item = 1;</code>
     */
    private void addItem(com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureItemIsMutable();
      item_.add(value);
    }
    /**
     * <code>repeated .pbui_Item_MeetWBPictureDetail item = 1;</code>
     */
    private void addItem(
        int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureItemIsMutable();
      item_.add(index, value);
    }
    /**
     * <code>repeated .pbui_Item_MeetWBPictureDetail item = 1;</code>
     */
    private void addItem(
        com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail.Builder builderForValue) {
      ensureItemIsMutable();
      item_.add(builderForValue.build());
    }
    /**
     * <code>repeated .pbui_Item_MeetWBPictureDetail item = 1;</code>
     */
    private void addItem(
        int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail.Builder builderForValue) {
      ensureItemIsMutable();
      item_.add(index, builderForValue.build());
    }
    /**
     * <code>repeated .pbui_Item_MeetWBPictureDetail item = 1;</code>
     */
    private void addAllItem(
        java.lang.Iterable<? extends com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail> values) {
      ensureItemIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, item_);
    }
    /**
     * <code>repeated .pbui_Item_MeetWBPictureDetail item = 1;</code>
     */
    private void clearItem() {
      item_ = emptyProtobufList();
    }
    /**
     * <code>repeated .pbui_Item_MeetWBPictureDetail item = 1;</code>
     */
    private void removeItem(int index) {
      ensureItemIsMutable();
      item_.remove(index);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < item_.size(); i++) {
        output.writeMessage(1, item_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < item_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, item_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBPictureDetail parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBPictureDetail parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBPictureDetail parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBPictureDetail parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBPictureDetail parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBPictureDetail parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBPictureDetail parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBPictureDetail parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBPictureDetail parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBPictureDetail parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBPictureDetail parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBPictureDetail parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBPictureDetail prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code pbui_Type_MeetWBPictureDetail}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBPictureDetail, Builder> implements
        // @@protoc_insertion_point(builder_implements:pbui_Type_MeetWBPictureDetail)
        com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBPictureDetailOrBuilder {
      // Construct using com.mogujie.tt.com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBPictureDetail.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated .pbui_Item_MeetWBPictureDetail item = 1;</code>
       */
      public java.util.List<com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail> getItemList() {
        return java.util.Collections.unmodifiableList(
            instance.getItemList());
      }
      /**
       * <code>repeated .pbui_Item_MeetWBPictureDetail item = 1;</code>
       */
      public int getItemCount() {
        return instance.getItemCount();
      }/**
       * <code>repeated .pbui_Item_MeetWBPictureDetail item = 1;</code>
       */
      public com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail getItem(int index) {
        return instance.getItem(index);
      }
      /**
       * <code>repeated .pbui_Item_MeetWBPictureDetail item = 1;</code>
       */
      public Builder setItem(
          int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail value) {
        copyOnWrite();
        instance.setItem(index, value);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetWBPictureDetail item = 1;</code>
       */
      public Builder setItem(
          int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail.Builder builderForValue) {
        copyOnWrite();
        instance.setItem(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetWBPictureDetail item = 1;</code>
       */
      public Builder addItem(com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail value) {
        copyOnWrite();
        instance.addItem(value);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetWBPictureDetail item = 1;</code>
       */
      public Builder addItem(
          int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail value) {
        copyOnWrite();
        instance.addItem(index, value);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetWBPictureDetail item = 1;</code>
       */
      public Builder addItem(
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail.Builder builderForValue) {
        copyOnWrite();
        instance.addItem(builderForValue);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetWBPictureDetail item = 1;</code>
       */
      public Builder addItem(
          int index, com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail.Builder builderForValue) {
        copyOnWrite();
        instance.addItem(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetWBPictureDetail item = 1;</code>
       */
      public Builder addAllItem(
          java.lang.Iterable<? extends com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail> values) {
        copyOnWrite();
        instance.addAllItem(values);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetWBPictureDetail item = 1;</code>
       */
      public Builder clearItem() {
        copyOnWrite();
        instance.clearItem();
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetWBPictureDetail item = 1;</code>
       */
      public Builder removeItem(int index) {
        copyOnWrite();
        instance.removeItem(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pbui_Type_MeetWBPictureDetail)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBPictureDetail();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          item_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBPictureDetail other = (com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBPictureDetail) arg1;
          item_= visitor.visitList(item_, other.item_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  if (!item_.isModifiable()) {
                    item_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(item_);
                  }
                  item_.add(
                      input.readMessage(com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Item_MeetWBPictureDetail.parser(), extensionRegistry));
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBPictureDetail.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pbui_Type_MeetWBPictureDetail)
    private static final com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBPictureDetail DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pbui_Type_MeetWBPictureDetail();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.mogujie.tt.protobuf.InterfaceWhiteboard.pbui_Type_MeetWBPictureDetail getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<pbui_Type_MeetWBPictureDetail> PARSER;

    public static com.google.protobuf.Parser<pbui_Type_MeetWBPictureDetail> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
