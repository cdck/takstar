// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Interface_commondata.proto

package com.mogujie.tt.protobuf;

public final class InterfaceCommondata {
  private InterfaceCommondata() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  /**
   * <pre>
   *错误码
   * </pre>
   *
   * Protobuf enum {@code pbui_ComContainer_Call}
   */
  public enum pbui_ComContainer_Call
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <pre>
     *发送查询操作
     * </pre>
     *
     * <code>Pb_ERROR_MEET_INTERFACE_CALL = 0;</code>
     */
    Pb_ERROR_MEET_INTERFACE_CALL(0),
    /**
     * <pre>
     *通知回调数据
     * </pre>
     *
     * <code>Pb_ERROR_MEET_INTERFACE_CALLBACK = 1;</code>
     */
    Pb_ERROR_MEET_INTERFACE_CALLBACK(1),
    /**
     * <pre>
     *查询返回的数据
     * </pre>
     *
     * <code>Pb_ERROR_MEET_INTERFACE_CALLRETURN = 2;</code>
     */
    Pb_ERROR_MEET_INTERFACE_CALLRETURN(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     *发送查询操作
     * </pre>
     *
     * <code>Pb_ERROR_MEET_INTERFACE_CALL = 0;</code>
     */
    public static final int Pb_ERROR_MEET_INTERFACE_CALL_VALUE = 0;
    /**
     * <pre>
     *通知回调数据
     * </pre>
     *
     * <code>Pb_ERROR_MEET_INTERFACE_CALLBACK = 1;</code>
     */
    public static final int Pb_ERROR_MEET_INTERFACE_CALLBACK_VALUE = 1;
    /**
     * <pre>
     *查询返回的数据
     * </pre>
     *
     * <code>Pb_ERROR_MEET_INTERFACE_CALLRETURN = 2;</code>
     */
    public static final int Pb_ERROR_MEET_INTERFACE_CALLRETURN_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static pbui_ComContainer_Call valueOf(int value) {
      return forNumber(value);
    }

    public static pbui_ComContainer_Call forNumber(int value) {
      switch (value) {
        case 0: return Pb_ERROR_MEET_INTERFACE_CALL;
        case 1: return Pb_ERROR_MEET_INTERFACE_CALLBACK;
        case 2: return Pb_ERROR_MEET_INTERFACE_CALLRETURN;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<pbui_ComContainer_Call>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        pbui_ComContainer_Call> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<pbui_ComContainer_Call>() {
            public pbui_ComContainer_Call findValueByNumber(int number) {
              return pbui_ComContainer_Call.forNumber(number);
            }
          };

    private final int value;

    private pbui_ComContainer_Call(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:pbui_ComContainer_Call)
  }

  public interface pbui_ReqComContainerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pbui_ReqComContainer)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *数据类型 参见 Pb_Type
     * </pre>
     *
     * <code>fixed32 type = 1;</code>
     */
    int getType();

    /**
     * <pre>
     *类型对应的操作方法 参见 Pb_Method
     * </pre>
     *
     * <code>fixed32 method = 2;</code>
     */
    int getMethod();

    /**
     * <pre>
     *参见 pbui_ComContainer_Call
     * </pre>
     *
     * <code>fixed32 call = 3;</code>
     */
    int getCall();

    /**
     * <pre>
     *标识PHP后台操作使用
     * </pre>
     *
     * <code>fixed32 meetingid = 4;</code>
     */
    int getMeetingid();

    /**
     * <pre>
     *会议ID关联的会场ID
     * </pre>
     *
     * <code>fixed32 roomid = 5;</code>
     */
    int getRoomid();

    /**
     * <pre>
     *&#47;/用户身份 参见Interface_Macro.proto Pb_MeetFaceStatus
     * </pre>
     *
     * <code>fixed32 role = 6;</code>
     */
    int getRole();

    /**
     * <pre>
     *如果是参会人员则会参会人员ID,如果是管理员则为管理员ID
     * </pre>
     *
     * <code>fixed32 userid = 7;</code>
     */
    int getUserid();

    /**
     * <pre>
     *如果是参会人员则会参会人员名称,如果是管理员则为管理员名称
     * </pre>
     *
     * <code>bytes username = 8;</code>
     */
    com.google.protobuf.ByteString getUsername();

    /**
     * <pre>
     *会话ID php后台使用
     * </pre>
     *
     * <code>bytes sessionid = 9;</code>
     */
    com.google.protobuf.ByteString getSessionid();

    /**
     * <pre>
     *返回的值，如果错误保存错误码 参见 Pb_Error
     * </pre>
     *
     * <code>fixed32 retcode = 10;</code>
     */
    int getRetcode();

    /**
     * <pre>
     *对应的数据，如果存在数据，则按照 type、method解析该数据
     * </pre>
     *
     * <code>bytes data = 11;</code>
     */
    com.google.protobuf.ByteString getData();
  }
  /**
   * <pre>
   *PHP----》C++
   * </pre>
   *
   * Protobuf type {@code pbui_ReqComContainer}
   */
  public  static final class pbui_ReqComContainer extends
      com.google.protobuf.GeneratedMessageLite<
          pbui_ReqComContainer, pbui_ReqComContainer.Builder> implements
      // @@protoc_insertion_point(message_implements:pbui_ReqComContainer)
      pbui_ReqComContainerOrBuilder {
    private pbui_ReqComContainer() {
      username_ = com.google.protobuf.ByteString.EMPTY;
      sessionid_ = com.google.protobuf.ByteString.EMPTY;
      data_ = com.google.protobuf.ByteString.EMPTY;
    }
    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_;
    /**
     * <pre>
     *数据类型 参见 Pb_Type
     * </pre>
     *
     * <code>fixed32 type = 1;</code>
     */
    public int getType() {
      return type_;
    }
    /**
     * <pre>
     *数据类型 参见 Pb_Type
     * </pre>
     *
     * <code>fixed32 type = 1;</code>
     */
    private void setType(int value) {
      
      type_ = value;
    }
    /**
     * <pre>
     *数据类型 参见 Pb_Type
     * </pre>
     *
     * <code>fixed32 type = 1;</code>
     */
    private void clearType() {
      
      type_ = 0;
    }

    public static final int METHOD_FIELD_NUMBER = 2;
    private int method_;
    /**
     * <pre>
     *类型对应的操作方法 参见 Pb_Method
     * </pre>
     *
     * <code>fixed32 method = 2;</code>
     */
    public int getMethod() {
      return method_;
    }
    /**
     * <pre>
     *类型对应的操作方法 参见 Pb_Method
     * </pre>
     *
     * <code>fixed32 method = 2;</code>
     */
    private void setMethod(int value) {
      
      method_ = value;
    }
    /**
     * <pre>
     *类型对应的操作方法 参见 Pb_Method
     * </pre>
     *
     * <code>fixed32 method = 2;</code>
     */
    private void clearMethod() {
      
      method_ = 0;
    }

    public static final int CALL_FIELD_NUMBER = 3;
    private int call_;
    /**
     * <pre>
     *参见 pbui_ComContainer_Call
     * </pre>
     *
     * <code>fixed32 call = 3;</code>
     */
    public int getCall() {
      return call_;
    }
    /**
     * <pre>
     *参见 pbui_ComContainer_Call
     * </pre>
     *
     * <code>fixed32 call = 3;</code>
     */
    private void setCall(int value) {
      
      call_ = value;
    }
    /**
     * <pre>
     *参见 pbui_ComContainer_Call
     * </pre>
     *
     * <code>fixed32 call = 3;</code>
     */
    private void clearCall() {
      
      call_ = 0;
    }

    public static final int MEETINGID_FIELD_NUMBER = 4;
    private int meetingid_;
    /**
     * <pre>
     *标识PHP后台操作使用
     * </pre>
     *
     * <code>fixed32 meetingid = 4;</code>
     */
    public int getMeetingid() {
      return meetingid_;
    }
    /**
     * <pre>
     *标识PHP后台操作使用
     * </pre>
     *
     * <code>fixed32 meetingid = 4;</code>
     */
    private void setMeetingid(int value) {
      
      meetingid_ = value;
    }
    /**
     * <pre>
     *标识PHP后台操作使用
     * </pre>
     *
     * <code>fixed32 meetingid = 4;</code>
     */
    private void clearMeetingid() {
      
      meetingid_ = 0;
    }

    public static final int ROOMID_FIELD_NUMBER = 5;
    private int roomid_;
    /**
     * <pre>
     *会议ID关联的会场ID
     * </pre>
     *
     * <code>fixed32 roomid = 5;</code>
     */
    public int getRoomid() {
      return roomid_;
    }
    /**
     * <pre>
     *会议ID关联的会场ID
     * </pre>
     *
     * <code>fixed32 roomid = 5;</code>
     */
    private void setRoomid(int value) {
      
      roomid_ = value;
    }
    /**
     * <pre>
     *会议ID关联的会场ID
     * </pre>
     *
     * <code>fixed32 roomid = 5;</code>
     */
    private void clearRoomid() {
      
      roomid_ = 0;
    }

    public static final int ROLE_FIELD_NUMBER = 6;
    private int role_;
    /**
     * <pre>
     *&#47;/用户身份 参见Interface_Macro.proto Pb_MeetFaceStatus
     * </pre>
     *
     * <code>fixed32 role = 6;</code>
     */
    public int getRole() {
      return role_;
    }
    /**
     * <pre>
     *&#47;/用户身份 参见Interface_Macro.proto Pb_MeetFaceStatus
     * </pre>
     *
     * <code>fixed32 role = 6;</code>
     */
    private void setRole(int value) {
      
      role_ = value;
    }
    /**
     * <pre>
     *&#47;/用户身份 参见Interface_Macro.proto Pb_MeetFaceStatus
     * </pre>
     *
     * <code>fixed32 role = 6;</code>
     */
    private void clearRole() {
      
      role_ = 0;
    }

    public static final int USERID_FIELD_NUMBER = 7;
    private int userid_;
    /**
     * <pre>
     *如果是参会人员则会参会人员ID,如果是管理员则为管理员ID
     * </pre>
     *
     * <code>fixed32 userid = 7;</code>
     */
    public int getUserid() {
      return userid_;
    }
    /**
     * <pre>
     *如果是参会人员则会参会人员ID,如果是管理员则为管理员ID
     * </pre>
     *
     * <code>fixed32 userid = 7;</code>
     */
    private void setUserid(int value) {
      
      userid_ = value;
    }
    /**
     * <pre>
     *如果是参会人员则会参会人员ID,如果是管理员则为管理员ID
     * </pre>
     *
     * <code>fixed32 userid = 7;</code>
     */
    private void clearUserid() {
      
      userid_ = 0;
    }

    public static final int USERNAME_FIELD_NUMBER = 8;
    private com.google.protobuf.ByteString username_;
    /**
     * <pre>
     *如果是参会人员则会参会人员名称,如果是管理员则为管理员名称
     * </pre>
     *
     * <code>bytes username = 8;</code>
     */
    public com.google.protobuf.ByteString getUsername() {
      return username_;
    }
    /**
     * <pre>
     *如果是参会人员则会参会人员名称,如果是管理员则为管理员名称
     * </pre>
     *
     * <code>bytes username = 8;</code>
     */
    private void setUsername(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      username_ = value;
    }
    /**
     * <pre>
     *如果是参会人员则会参会人员名称,如果是管理员则为管理员名称
     * </pre>
     *
     * <code>bytes username = 8;</code>
     */
    private void clearUsername() {
      
      username_ = getDefaultInstance().getUsername();
    }

    public static final int SESSIONID_FIELD_NUMBER = 9;
    private com.google.protobuf.ByteString sessionid_;
    /**
     * <pre>
     *会话ID php后台使用
     * </pre>
     *
     * <code>bytes sessionid = 9;</code>
     */
    public com.google.protobuf.ByteString getSessionid() {
      return sessionid_;
    }
    /**
     * <pre>
     *会话ID php后台使用
     * </pre>
     *
     * <code>bytes sessionid = 9;</code>
     */
    private void setSessionid(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      sessionid_ = value;
    }
    /**
     * <pre>
     *会话ID php后台使用
     * </pre>
     *
     * <code>bytes sessionid = 9;</code>
     */
    private void clearSessionid() {
      
      sessionid_ = getDefaultInstance().getSessionid();
    }

    public static final int RETCODE_FIELD_NUMBER = 10;
    private int retcode_;
    /**
     * <pre>
     *返回的值，如果错误保存错误码 参见 Pb_Error
     * </pre>
     *
     * <code>fixed32 retcode = 10;</code>
     */
    public int getRetcode() {
      return retcode_;
    }
    /**
     * <pre>
     *返回的值，如果错误保存错误码 参见 Pb_Error
     * </pre>
     *
     * <code>fixed32 retcode = 10;</code>
     */
    private void setRetcode(int value) {
      
      retcode_ = value;
    }
    /**
     * <pre>
     *返回的值，如果错误保存错误码 参见 Pb_Error
     * </pre>
     *
     * <code>fixed32 retcode = 10;</code>
     */
    private void clearRetcode() {
      
      retcode_ = 0;
    }

    public static final int DATA_FIELD_NUMBER = 11;
    private com.google.protobuf.ByteString data_;
    /**
     * <pre>
     *对应的数据，如果存在数据，则按照 type、method解析该数据
     * </pre>
     *
     * <code>bytes data = 11;</code>
     */
    public com.google.protobuf.ByteString getData() {
      return data_;
    }
    /**
     * <pre>
     *对应的数据，如果存在数据，则按照 type、method解析该数据
     * </pre>
     *
     * <code>bytes data = 11;</code>
     */
    private void setData(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      data_ = value;
    }
    /**
     * <pre>
     *对应的数据，如果存在数据，则按照 type、method解析该数据
     * </pre>
     *
     * <code>bytes data = 11;</code>
     */
    private void clearData() {
      
      data_ = getDefaultInstance().getData();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (type_ != 0) {
        output.writeFixed32(1, type_);
      }
      if (method_ != 0) {
        output.writeFixed32(2, method_);
      }
      if (call_ != 0) {
        output.writeFixed32(3, call_);
      }
      if (meetingid_ != 0) {
        output.writeFixed32(4, meetingid_);
      }
      if (roomid_ != 0) {
        output.writeFixed32(5, roomid_);
      }
      if (role_ != 0) {
        output.writeFixed32(6, role_);
      }
      if (userid_ != 0) {
        output.writeFixed32(7, userid_);
      }
      if (!username_.isEmpty()) {
        output.writeBytes(8, username_);
      }
      if (!sessionid_.isEmpty()) {
        output.writeBytes(9, sessionid_);
      }
      if (retcode_ != 0) {
        output.writeFixed32(10, retcode_);
      }
      if (!data_.isEmpty()) {
        output.writeBytes(11, data_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (type_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, type_);
      }
      if (method_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(2, method_);
      }
      if (call_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(3, call_);
      }
      if (meetingid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(4, meetingid_);
      }
      if (roomid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(5, roomid_);
      }
      if (role_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(6, role_);
      }
      if (userid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(7, userid_);
      }
      if (!username_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(8, username_);
      }
      if (!sessionid_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(9, sessionid_);
      }
      if (retcode_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(10, retcode_);
      }
      if (!data_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(11, data_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ReqComContainer parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ReqComContainer parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ReqComContainer parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ReqComContainer parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ReqComContainer parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ReqComContainer parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ReqComContainer parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ReqComContainer parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ReqComContainer parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ReqComContainer parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ReqComContainer parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ReqComContainer parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ReqComContainer prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     *PHP----》C++
     * </pre>
     *
     * Protobuf type {@code pbui_ReqComContainer}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ReqComContainer, Builder> implements
        // @@protoc_insertion_point(builder_implements:pbui_ReqComContainer)
        com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ReqComContainerOrBuilder {
      // Construct using com.mogujie.tt.com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ReqComContainer.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *数据类型 参见 Pb_Type
       * </pre>
       *
       * <code>fixed32 type = 1;</code>
       */
      public int getType() {
        return instance.getType();
      }
      /**
       * <pre>
       *数据类型 参见 Pb_Type
       * </pre>
       *
       * <code>fixed32 type = 1;</code>
       */
      public Builder setType(int value) {
        copyOnWrite();
        instance.setType(value);
        return this;
      }
      /**
       * <pre>
       *数据类型 参见 Pb_Type
       * </pre>
       *
       * <code>fixed32 type = 1;</code>
       */
      public Builder clearType() {
        copyOnWrite();
        instance.clearType();
        return this;
      }

      /**
       * <pre>
       *类型对应的操作方法 参见 Pb_Method
       * </pre>
       *
       * <code>fixed32 method = 2;</code>
       */
      public int getMethod() {
        return instance.getMethod();
      }
      /**
       * <pre>
       *类型对应的操作方法 参见 Pb_Method
       * </pre>
       *
       * <code>fixed32 method = 2;</code>
       */
      public Builder setMethod(int value) {
        copyOnWrite();
        instance.setMethod(value);
        return this;
      }
      /**
       * <pre>
       *类型对应的操作方法 参见 Pb_Method
       * </pre>
       *
       * <code>fixed32 method = 2;</code>
       */
      public Builder clearMethod() {
        copyOnWrite();
        instance.clearMethod();
        return this;
      }

      /**
       * <pre>
       *参见 pbui_ComContainer_Call
       * </pre>
       *
       * <code>fixed32 call = 3;</code>
       */
      public int getCall() {
        return instance.getCall();
      }
      /**
       * <pre>
       *参见 pbui_ComContainer_Call
       * </pre>
       *
       * <code>fixed32 call = 3;</code>
       */
      public Builder setCall(int value) {
        copyOnWrite();
        instance.setCall(value);
        return this;
      }
      /**
       * <pre>
       *参见 pbui_ComContainer_Call
       * </pre>
       *
       * <code>fixed32 call = 3;</code>
       */
      public Builder clearCall() {
        copyOnWrite();
        instance.clearCall();
        return this;
      }

      /**
       * <pre>
       *标识PHP后台操作使用
       * </pre>
       *
       * <code>fixed32 meetingid = 4;</code>
       */
      public int getMeetingid() {
        return instance.getMeetingid();
      }
      /**
       * <pre>
       *标识PHP后台操作使用
       * </pre>
       *
       * <code>fixed32 meetingid = 4;</code>
       */
      public Builder setMeetingid(int value) {
        copyOnWrite();
        instance.setMeetingid(value);
        return this;
      }
      /**
       * <pre>
       *标识PHP后台操作使用
       * </pre>
       *
       * <code>fixed32 meetingid = 4;</code>
       */
      public Builder clearMeetingid() {
        copyOnWrite();
        instance.clearMeetingid();
        return this;
      }

      /**
       * <pre>
       *会议ID关联的会场ID
       * </pre>
       *
       * <code>fixed32 roomid = 5;</code>
       */
      public int getRoomid() {
        return instance.getRoomid();
      }
      /**
       * <pre>
       *会议ID关联的会场ID
       * </pre>
       *
       * <code>fixed32 roomid = 5;</code>
       */
      public Builder setRoomid(int value) {
        copyOnWrite();
        instance.setRoomid(value);
        return this;
      }
      /**
       * <pre>
       *会议ID关联的会场ID
       * </pre>
       *
       * <code>fixed32 roomid = 5;</code>
       */
      public Builder clearRoomid() {
        copyOnWrite();
        instance.clearRoomid();
        return this;
      }

      /**
       * <pre>
       *&#47;/用户身份 参见Interface_Macro.proto Pb_MeetFaceStatus
       * </pre>
       *
       * <code>fixed32 role = 6;</code>
       */
      public int getRole() {
        return instance.getRole();
      }
      /**
       * <pre>
       *&#47;/用户身份 参见Interface_Macro.proto Pb_MeetFaceStatus
       * </pre>
       *
       * <code>fixed32 role = 6;</code>
       */
      public Builder setRole(int value) {
        copyOnWrite();
        instance.setRole(value);
        return this;
      }
      /**
       * <pre>
       *&#47;/用户身份 参见Interface_Macro.proto Pb_MeetFaceStatus
       * </pre>
       *
       * <code>fixed32 role = 6;</code>
       */
      public Builder clearRole() {
        copyOnWrite();
        instance.clearRole();
        return this;
      }

      /**
       * <pre>
       *如果是参会人员则会参会人员ID,如果是管理员则为管理员ID
       * </pre>
       *
       * <code>fixed32 userid = 7;</code>
       */
      public int getUserid() {
        return instance.getUserid();
      }
      /**
       * <pre>
       *如果是参会人员则会参会人员ID,如果是管理员则为管理员ID
       * </pre>
       *
       * <code>fixed32 userid = 7;</code>
       */
      public Builder setUserid(int value) {
        copyOnWrite();
        instance.setUserid(value);
        return this;
      }
      /**
       * <pre>
       *如果是参会人员则会参会人员ID,如果是管理员则为管理员ID
       * </pre>
       *
       * <code>fixed32 userid = 7;</code>
       */
      public Builder clearUserid() {
        copyOnWrite();
        instance.clearUserid();
        return this;
      }

      /**
       * <pre>
       *如果是参会人员则会参会人员名称,如果是管理员则为管理员名称
       * </pre>
       *
       * <code>bytes username = 8;</code>
       */
      public com.google.protobuf.ByteString getUsername() {
        return instance.getUsername();
      }
      /**
       * <pre>
       *如果是参会人员则会参会人员名称,如果是管理员则为管理员名称
       * </pre>
       *
       * <code>bytes username = 8;</code>
       */
      public Builder setUsername(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setUsername(value);
        return this;
      }
      /**
       * <pre>
       *如果是参会人员则会参会人员名称,如果是管理员则为管理员名称
       * </pre>
       *
       * <code>bytes username = 8;</code>
       */
      public Builder clearUsername() {
        copyOnWrite();
        instance.clearUsername();
        return this;
      }

      /**
       * <pre>
       *会话ID php后台使用
       * </pre>
       *
       * <code>bytes sessionid = 9;</code>
       */
      public com.google.protobuf.ByteString getSessionid() {
        return instance.getSessionid();
      }
      /**
       * <pre>
       *会话ID php后台使用
       * </pre>
       *
       * <code>bytes sessionid = 9;</code>
       */
      public Builder setSessionid(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setSessionid(value);
        return this;
      }
      /**
       * <pre>
       *会话ID php后台使用
       * </pre>
       *
       * <code>bytes sessionid = 9;</code>
       */
      public Builder clearSessionid() {
        copyOnWrite();
        instance.clearSessionid();
        return this;
      }

      /**
       * <pre>
       *返回的值，如果错误保存错误码 参见 Pb_Error
       * </pre>
       *
       * <code>fixed32 retcode = 10;</code>
       */
      public int getRetcode() {
        return instance.getRetcode();
      }
      /**
       * <pre>
       *返回的值，如果错误保存错误码 参见 Pb_Error
       * </pre>
       *
       * <code>fixed32 retcode = 10;</code>
       */
      public Builder setRetcode(int value) {
        copyOnWrite();
        instance.setRetcode(value);
        return this;
      }
      /**
       * <pre>
       *返回的值，如果错误保存错误码 参见 Pb_Error
       * </pre>
       *
       * <code>fixed32 retcode = 10;</code>
       */
      public Builder clearRetcode() {
        copyOnWrite();
        instance.clearRetcode();
        return this;
      }

      /**
       * <pre>
       *对应的数据，如果存在数据，则按照 type、method解析该数据
       * </pre>
       *
       * <code>bytes data = 11;</code>
       */
      public com.google.protobuf.ByteString getData() {
        return instance.getData();
      }
      /**
       * <pre>
       *对应的数据，如果存在数据，则按照 type、method解析该数据
       * </pre>
       *
       * <code>bytes data = 11;</code>
       */
      public Builder setData(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setData(value);
        return this;
      }
      /**
       * <pre>
       *对应的数据，如果存在数据，则按照 type、method解析该数据
       * </pre>
       *
       * <code>bytes data = 11;</code>
       */
      public Builder clearData() {
        copyOnWrite();
        instance.clearData();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pbui_ReqComContainer)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ReqComContainer();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ReqComContainer other = (com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ReqComContainer) arg1;
          type_ = visitor.visitInt(type_ != 0, type_,
              other.type_ != 0, other.type_);
          method_ = visitor.visitInt(method_ != 0, method_,
              other.method_ != 0, other.method_);
          call_ = visitor.visitInt(call_ != 0, call_,
              other.call_ != 0, other.call_);
          meetingid_ = visitor.visitInt(meetingid_ != 0, meetingid_,
              other.meetingid_ != 0, other.meetingid_);
          roomid_ = visitor.visitInt(roomid_ != 0, roomid_,
              other.roomid_ != 0, other.roomid_);
          role_ = visitor.visitInt(role_ != 0, role_,
              other.role_ != 0, other.role_);
          userid_ = visitor.visitInt(userid_ != 0, userid_,
              other.userid_ != 0, other.userid_);
          username_ = visitor.visitByteString(username_ != com.google.protobuf.ByteString.EMPTY, username_,
              other.username_ != com.google.protobuf.ByteString.EMPTY, other.username_);
          sessionid_ = visitor.visitByteString(sessionid_ != com.google.protobuf.ByteString.EMPTY, sessionid_,
              other.sessionid_ != com.google.protobuf.ByteString.EMPTY, other.sessionid_);
          retcode_ = visitor.visitInt(retcode_ != 0, retcode_,
              other.retcode_ != 0, other.retcode_);
          data_ = visitor.visitByteString(data_ != com.google.protobuf.ByteString.EMPTY, data_,
              other.data_ != com.google.protobuf.ByteString.EMPTY, other.data_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 13: {

                  type_ = input.readFixed32();
                  break;
                }
                case 21: {

                  method_ = input.readFixed32();
                  break;
                }
                case 29: {

                  call_ = input.readFixed32();
                  break;
                }
                case 37: {

                  meetingid_ = input.readFixed32();
                  break;
                }
                case 45: {

                  roomid_ = input.readFixed32();
                  break;
                }
                case 53: {

                  role_ = input.readFixed32();
                  break;
                }
                case 61: {

                  userid_ = input.readFixed32();
                  break;
                }
                case 66: {

                  username_ = input.readBytes();
                  break;
                }
                case 74: {

                  sessionid_ = input.readBytes();
                  break;
                }
                case 85: {

                  retcode_ = input.readFixed32();
                  break;
                }
                case 90: {

                  data_ = input.readBytes();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ReqComContainer.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pbui_ReqComContainer)
    private static final com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ReqComContainer DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pbui_ReqComContainer();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ReqComContainer getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<pbui_ReqComContainer> PARSER;

    public static com.google.protobuf.Parser<pbui_ReqComContainer> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface pbui_ComContainerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pbui_ComContainer)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *数据类型 参见 Pb_Type
     * </pre>
     *
     * <code>fixed32 type = 1;</code>
     */
    int getType();

    /**
     * <pre>
     *类型对应的操作方法 参见 Pb_Method
     * </pre>
     *
     * <code>fixed32 method = 2;</code>
     */
    int getMethod();

    /**
     * <pre>
     *参见 pbui_ComContainer_Call
     * </pre>
     *
     * <code>fixed32 call = 3;</code>
     */
    int getCall();

    /**
     * <pre>
     *会议ID，data数据对应的会议ID
     * </pre>
     *
     * <code>fixed32 meetingid = 4;</code>
     */
    int getMeetingid();

    /**
     * <pre>
     *会话ID php后台使用
     * </pre>
     *
     * <code>bytes sessionid = 5;</code>
     */
    com.google.protobuf.ByteString getSessionid();

    /**
     * <pre>
     *返回的值，如果错误保存错误码 参见 Pb_Error
     * </pre>
     *
     * <code>fixed32 retcode = 6;</code>
     */
    int getRetcode();

    /**
     * <pre>
     *对应的数据，如果存在数据，则按照 type、method解析该数据
     * </pre>
     *
     * <code>bytes data = 7;</code>
     */
    com.google.protobuf.ByteString getData();
  }
  /**
   * <pre>
   *C++ ---&gt;PHP
   * </pre>
   *
   * Protobuf type {@code pbui_ComContainer}
   */
  public  static final class pbui_ComContainer extends
      com.google.protobuf.GeneratedMessageLite<
          pbui_ComContainer, pbui_ComContainer.Builder> implements
      // @@protoc_insertion_point(message_implements:pbui_ComContainer)
      pbui_ComContainerOrBuilder {
    private pbui_ComContainer() {
      sessionid_ = com.google.protobuf.ByteString.EMPTY;
      data_ = com.google.protobuf.ByteString.EMPTY;
    }
    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_;
    /**
     * <pre>
     *数据类型 参见 Pb_Type
     * </pre>
     *
     * <code>fixed32 type = 1;</code>
     */
    public int getType() {
      return type_;
    }
    /**
     * <pre>
     *数据类型 参见 Pb_Type
     * </pre>
     *
     * <code>fixed32 type = 1;</code>
     */
    private void setType(int value) {
      
      type_ = value;
    }
    /**
     * <pre>
     *数据类型 参见 Pb_Type
     * </pre>
     *
     * <code>fixed32 type = 1;</code>
     */
    private void clearType() {
      
      type_ = 0;
    }

    public static final int METHOD_FIELD_NUMBER = 2;
    private int method_;
    /**
     * <pre>
     *类型对应的操作方法 参见 Pb_Method
     * </pre>
     *
     * <code>fixed32 method = 2;</code>
     */
    public int getMethod() {
      return method_;
    }
    /**
     * <pre>
     *类型对应的操作方法 参见 Pb_Method
     * </pre>
     *
     * <code>fixed32 method = 2;</code>
     */
    private void setMethod(int value) {
      
      method_ = value;
    }
    /**
     * <pre>
     *类型对应的操作方法 参见 Pb_Method
     * </pre>
     *
     * <code>fixed32 method = 2;</code>
     */
    private void clearMethod() {
      
      method_ = 0;
    }

    public static final int CALL_FIELD_NUMBER = 3;
    private int call_;
    /**
     * <pre>
     *参见 pbui_ComContainer_Call
     * </pre>
     *
     * <code>fixed32 call = 3;</code>
     */
    public int getCall() {
      return call_;
    }
    /**
     * <pre>
     *参见 pbui_ComContainer_Call
     * </pre>
     *
     * <code>fixed32 call = 3;</code>
     */
    private void setCall(int value) {
      
      call_ = value;
    }
    /**
     * <pre>
     *参见 pbui_ComContainer_Call
     * </pre>
     *
     * <code>fixed32 call = 3;</code>
     */
    private void clearCall() {
      
      call_ = 0;
    }

    public static final int MEETINGID_FIELD_NUMBER = 4;
    private int meetingid_;
    /**
     * <pre>
     *会议ID，data数据对应的会议ID
     * </pre>
     *
     * <code>fixed32 meetingid = 4;</code>
     */
    public int getMeetingid() {
      return meetingid_;
    }
    /**
     * <pre>
     *会议ID，data数据对应的会议ID
     * </pre>
     *
     * <code>fixed32 meetingid = 4;</code>
     */
    private void setMeetingid(int value) {
      
      meetingid_ = value;
    }
    /**
     * <pre>
     *会议ID，data数据对应的会议ID
     * </pre>
     *
     * <code>fixed32 meetingid = 4;</code>
     */
    private void clearMeetingid() {
      
      meetingid_ = 0;
    }

    public static final int SESSIONID_FIELD_NUMBER = 5;
    private com.google.protobuf.ByteString sessionid_;
    /**
     * <pre>
     *会话ID php后台使用
     * </pre>
     *
     * <code>bytes sessionid = 5;</code>
     */
    public com.google.protobuf.ByteString getSessionid() {
      return sessionid_;
    }
    /**
     * <pre>
     *会话ID php后台使用
     * </pre>
     *
     * <code>bytes sessionid = 5;</code>
     */
    private void setSessionid(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      sessionid_ = value;
    }
    /**
     * <pre>
     *会话ID php后台使用
     * </pre>
     *
     * <code>bytes sessionid = 5;</code>
     */
    private void clearSessionid() {
      
      sessionid_ = getDefaultInstance().getSessionid();
    }

    public static final int RETCODE_FIELD_NUMBER = 6;
    private int retcode_;
    /**
     * <pre>
     *返回的值，如果错误保存错误码 参见 Pb_Error
     * </pre>
     *
     * <code>fixed32 retcode = 6;</code>
     */
    public int getRetcode() {
      return retcode_;
    }
    /**
     * <pre>
     *返回的值，如果错误保存错误码 参见 Pb_Error
     * </pre>
     *
     * <code>fixed32 retcode = 6;</code>
     */
    private void setRetcode(int value) {
      
      retcode_ = value;
    }
    /**
     * <pre>
     *返回的值，如果错误保存错误码 参见 Pb_Error
     * </pre>
     *
     * <code>fixed32 retcode = 6;</code>
     */
    private void clearRetcode() {
      
      retcode_ = 0;
    }

    public static final int DATA_FIELD_NUMBER = 7;
    private com.google.protobuf.ByteString data_;
    /**
     * <pre>
     *对应的数据，如果存在数据，则按照 type、method解析该数据
     * </pre>
     *
     * <code>bytes data = 7;</code>
     */
    public com.google.protobuf.ByteString getData() {
      return data_;
    }
    /**
     * <pre>
     *对应的数据，如果存在数据，则按照 type、method解析该数据
     * </pre>
     *
     * <code>bytes data = 7;</code>
     */
    private void setData(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      data_ = value;
    }
    /**
     * <pre>
     *对应的数据，如果存在数据，则按照 type、method解析该数据
     * </pre>
     *
     * <code>bytes data = 7;</code>
     */
    private void clearData() {
      
      data_ = getDefaultInstance().getData();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (type_ != 0) {
        output.writeFixed32(1, type_);
      }
      if (method_ != 0) {
        output.writeFixed32(2, method_);
      }
      if (call_ != 0) {
        output.writeFixed32(3, call_);
      }
      if (meetingid_ != 0) {
        output.writeFixed32(4, meetingid_);
      }
      if (!sessionid_.isEmpty()) {
        output.writeBytes(5, sessionid_);
      }
      if (retcode_ != 0) {
        output.writeFixed32(6, retcode_);
      }
      if (!data_.isEmpty()) {
        output.writeBytes(7, data_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (type_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, type_);
      }
      if (method_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(2, method_);
      }
      if (call_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(3, call_);
      }
      if (meetingid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(4, meetingid_);
      }
      if (!sessionid_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, sessionid_);
      }
      if (retcode_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(6, retcode_);
      }
      if (!data_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(7, data_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ComContainer parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ComContainer parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ComContainer parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ComContainer parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ComContainer parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ComContainer parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ComContainer parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ComContainer parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ComContainer parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ComContainer parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ComContainer parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ComContainer parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ComContainer prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     *C++ ---&gt;PHP
     * </pre>
     *
     * Protobuf type {@code pbui_ComContainer}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ComContainer, Builder> implements
        // @@protoc_insertion_point(builder_implements:pbui_ComContainer)
        com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ComContainerOrBuilder {
      // Construct using com.mogujie.tt.com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ComContainer.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *数据类型 参见 Pb_Type
       * </pre>
       *
       * <code>fixed32 type = 1;</code>
       */
      public int getType() {
        return instance.getType();
      }
      /**
       * <pre>
       *数据类型 参见 Pb_Type
       * </pre>
       *
       * <code>fixed32 type = 1;</code>
       */
      public Builder setType(int value) {
        copyOnWrite();
        instance.setType(value);
        return this;
      }
      /**
       * <pre>
       *数据类型 参见 Pb_Type
       * </pre>
       *
       * <code>fixed32 type = 1;</code>
       */
      public Builder clearType() {
        copyOnWrite();
        instance.clearType();
        return this;
      }

      /**
       * <pre>
       *类型对应的操作方法 参见 Pb_Method
       * </pre>
       *
       * <code>fixed32 method = 2;</code>
       */
      public int getMethod() {
        return instance.getMethod();
      }
      /**
       * <pre>
       *类型对应的操作方法 参见 Pb_Method
       * </pre>
       *
       * <code>fixed32 method = 2;</code>
       */
      public Builder setMethod(int value) {
        copyOnWrite();
        instance.setMethod(value);
        return this;
      }
      /**
       * <pre>
       *类型对应的操作方法 参见 Pb_Method
       * </pre>
       *
       * <code>fixed32 method = 2;</code>
       */
      public Builder clearMethod() {
        copyOnWrite();
        instance.clearMethod();
        return this;
      }

      /**
       * <pre>
       *参见 pbui_ComContainer_Call
       * </pre>
       *
       * <code>fixed32 call = 3;</code>
       */
      public int getCall() {
        return instance.getCall();
      }
      /**
       * <pre>
       *参见 pbui_ComContainer_Call
       * </pre>
       *
       * <code>fixed32 call = 3;</code>
       */
      public Builder setCall(int value) {
        copyOnWrite();
        instance.setCall(value);
        return this;
      }
      /**
       * <pre>
       *参见 pbui_ComContainer_Call
       * </pre>
       *
       * <code>fixed32 call = 3;</code>
       */
      public Builder clearCall() {
        copyOnWrite();
        instance.clearCall();
        return this;
      }

      /**
       * <pre>
       *会议ID，data数据对应的会议ID
       * </pre>
       *
       * <code>fixed32 meetingid = 4;</code>
       */
      public int getMeetingid() {
        return instance.getMeetingid();
      }
      /**
       * <pre>
       *会议ID，data数据对应的会议ID
       * </pre>
       *
       * <code>fixed32 meetingid = 4;</code>
       */
      public Builder setMeetingid(int value) {
        copyOnWrite();
        instance.setMeetingid(value);
        return this;
      }
      /**
       * <pre>
       *会议ID，data数据对应的会议ID
       * </pre>
       *
       * <code>fixed32 meetingid = 4;</code>
       */
      public Builder clearMeetingid() {
        copyOnWrite();
        instance.clearMeetingid();
        return this;
      }

      /**
       * <pre>
       *会话ID php后台使用
       * </pre>
       *
       * <code>bytes sessionid = 5;</code>
       */
      public com.google.protobuf.ByteString getSessionid() {
        return instance.getSessionid();
      }
      /**
       * <pre>
       *会话ID php后台使用
       * </pre>
       *
       * <code>bytes sessionid = 5;</code>
       */
      public Builder setSessionid(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setSessionid(value);
        return this;
      }
      /**
       * <pre>
       *会话ID php后台使用
       * </pre>
       *
       * <code>bytes sessionid = 5;</code>
       */
      public Builder clearSessionid() {
        copyOnWrite();
        instance.clearSessionid();
        return this;
      }

      /**
       * <pre>
       *返回的值，如果错误保存错误码 参见 Pb_Error
       * </pre>
       *
       * <code>fixed32 retcode = 6;</code>
       */
      public int getRetcode() {
        return instance.getRetcode();
      }
      /**
       * <pre>
       *返回的值，如果错误保存错误码 参见 Pb_Error
       * </pre>
       *
       * <code>fixed32 retcode = 6;</code>
       */
      public Builder setRetcode(int value) {
        copyOnWrite();
        instance.setRetcode(value);
        return this;
      }
      /**
       * <pre>
       *返回的值，如果错误保存错误码 参见 Pb_Error
       * </pre>
       *
       * <code>fixed32 retcode = 6;</code>
       */
      public Builder clearRetcode() {
        copyOnWrite();
        instance.clearRetcode();
        return this;
      }

      /**
       * <pre>
       *对应的数据，如果存在数据，则按照 type、method解析该数据
       * </pre>
       *
       * <code>bytes data = 7;</code>
       */
      public com.google.protobuf.ByteString getData() {
        return instance.getData();
      }
      /**
       * <pre>
       *对应的数据，如果存在数据，则按照 type、method解析该数据
       * </pre>
       *
       * <code>bytes data = 7;</code>
       */
      public Builder setData(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setData(value);
        return this;
      }
      /**
       * <pre>
       *对应的数据，如果存在数据，则按照 type、method解析该数据
       * </pre>
       *
       * <code>bytes data = 7;</code>
       */
      public Builder clearData() {
        copyOnWrite();
        instance.clearData();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pbui_ComContainer)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ComContainer();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ComContainer other = (com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ComContainer) arg1;
          type_ = visitor.visitInt(type_ != 0, type_,
              other.type_ != 0, other.type_);
          method_ = visitor.visitInt(method_ != 0, method_,
              other.method_ != 0, other.method_);
          call_ = visitor.visitInt(call_ != 0, call_,
              other.call_ != 0, other.call_);
          meetingid_ = visitor.visitInt(meetingid_ != 0, meetingid_,
              other.meetingid_ != 0, other.meetingid_);
          sessionid_ = visitor.visitByteString(sessionid_ != com.google.protobuf.ByteString.EMPTY, sessionid_,
              other.sessionid_ != com.google.protobuf.ByteString.EMPTY, other.sessionid_);
          retcode_ = visitor.visitInt(retcode_ != 0, retcode_,
              other.retcode_ != 0, other.retcode_);
          data_ = visitor.visitByteString(data_ != com.google.protobuf.ByteString.EMPTY, data_,
              other.data_ != com.google.protobuf.ByteString.EMPTY, other.data_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 13: {

                  type_ = input.readFixed32();
                  break;
                }
                case 21: {

                  method_ = input.readFixed32();
                  break;
                }
                case 29: {

                  call_ = input.readFixed32();
                  break;
                }
                case 37: {

                  meetingid_ = input.readFixed32();
                  break;
                }
                case 42: {

                  sessionid_ = input.readBytes();
                  break;
                }
                case 53: {

                  retcode_ = input.readFixed32();
                  break;
                }
                case 58: {

                  data_ = input.readBytes();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ComContainer.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pbui_ComContainer)
    private static final com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ComContainer DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pbui_ComContainer();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.mogujie.tt.protobuf.InterfaceCommondata.pbui_ComContainer getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<pbui_ComContainer> PARSER;

    public static com.google.protobuf.Parser<pbui_ComContainer> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
