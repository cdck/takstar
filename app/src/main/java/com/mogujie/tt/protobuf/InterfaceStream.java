// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Interface_stream.proto

package com.mogujie.tt.protobuf;

public final class InterfaceStream {
  private InterfaceStream() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface pbui_Type_ReqStreamPushOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pbui_Type_ReqStreamPush)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
     * </pre>
     *
     * <code>fixed32 triggeruserval = 1;</code>
     */
    int getTriggeruserval();

    /**
     * <pre>
     *发起请求的设备ID 
     * </pre>
     *
     * <code>fixed32 deviceid = 2;</code>
     */
    int getDeviceid();

    /**
     * <pre>
     *发起请求的人员ID
     * </pre>
     *
     * <code>fixed32 memberid = 3;</code>
     */
    int getMemberid();

    /**
     * <pre>
     *本设备子通道号 这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
     * </pre>
     *
     * <code>fixed32 substreamindex = 4;</code>
     */
    int getSubstreamindex();
  }
  /**
   * <pre>
   *请求播放流通道通知
   *type:Pb_TYPE_MEET_INTERFACE_REQUESTSTREAMPUSH
   *method: notify
   *当为询问模式时，回调函数返回1表示同意播放
   * </pre>
   *
   * Protobuf type {@code pbui_Type_ReqStreamPush}
   */
  public  static final class pbui_Type_ReqStreamPush extends
      com.google.protobuf.GeneratedMessageLite<
          pbui_Type_ReqStreamPush, pbui_Type_ReqStreamPush.Builder> implements
      // @@protoc_insertion_point(message_implements:pbui_Type_ReqStreamPush)
      pbui_Type_ReqStreamPushOrBuilder {
    private pbui_Type_ReqStreamPush() {
    }
    public static final int TRIGGERUSERVAL_FIELD_NUMBER = 1;
    private int triggeruserval_;
    /**
     * <pre>
     *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
     * </pre>
     *
     * <code>fixed32 triggeruserval = 1;</code>
     */
    public int getTriggeruserval() {
      return triggeruserval_;
    }
    /**
     * <pre>
     *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
     * </pre>
     *
     * <code>fixed32 triggeruserval = 1;</code>
     */
    private void setTriggeruserval(int value) {
      
      triggeruserval_ = value;
    }
    /**
     * <pre>
     *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
     * </pre>
     *
     * <code>fixed32 triggeruserval = 1;</code>
     */
    private void clearTriggeruserval() {
      
      triggeruserval_ = 0;
    }

    public static final int DEVICEID_FIELD_NUMBER = 2;
    private int deviceid_;
    /**
     * <pre>
     *发起请求的设备ID 
     * </pre>
     *
     * <code>fixed32 deviceid = 2;</code>
     */
    public int getDeviceid() {
      return deviceid_;
    }
    /**
     * <pre>
     *发起请求的设备ID 
     * </pre>
     *
     * <code>fixed32 deviceid = 2;</code>
     */
    private void setDeviceid(int value) {
      
      deviceid_ = value;
    }
    /**
     * <pre>
     *发起请求的设备ID 
     * </pre>
     *
     * <code>fixed32 deviceid = 2;</code>
     */
    private void clearDeviceid() {
      
      deviceid_ = 0;
    }

    public static final int MEMBERID_FIELD_NUMBER = 3;
    private int memberid_;
    /**
     * <pre>
     *发起请求的人员ID
     * </pre>
     *
     * <code>fixed32 memberid = 3;</code>
     */
    public int getMemberid() {
      return memberid_;
    }
    /**
     * <pre>
     *发起请求的人员ID
     * </pre>
     *
     * <code>fixed32 memberid = 3;</code>
     */
    private void setMemberid(int value) {
      
      memberid_ = value;
    }
    /**
     * <pre>
     *发起请求的人员ID
     * </pre>
     *
     * <code>fixed32 memberid = 3;</code>
     */
    private void clearMemberid() {
      
      memberid_ = 0;
    }

    public static final int SUBSTREAMINDEX_FIELD_NUMBER = 4;
    private int substreamindex_;
    /**
     * <pre>
     *本设备子通道号 这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
     * </pre>
     *
     * <code>fixed32 substreamindex = 4;</code>
     */
    public int getSubstreamindex() {
      return substreamindex_;
    }
    /**
     * <pre>
     *本设备子通道号 这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
     * </pre>
     *
     * <code>fixed32 substreamindex = 4;</code>
     */
    private void setSubstreamindex(int value) {
      
      substreamindex_ = value;
    }
    /**
     * <pre>
     *本设备子通道号 这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
     * </pre>
     *
     * <code>fixed32 substreamindex = 4;</code>
     */
    private void clearSubstreamindex() {
      
      substreamindex_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (triggeruserval_ != 0) {
        output.writeFixed32(1, triggeruserval_);
      }
      if (deviceid_ != 0) {
        output.writeFixed32(2, deviceid_);
      }
      if (memberid_ != 0) {
        output.writeFixed32(3, memberid_);
      }
      if (substreamindex_ != 0) {
        output.writeFixed32(4, substreamindex_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (triggeruserval_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, triggeruserval_);
      }
      if (deviceid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(2, deviceid_);
      }
      if (memberid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(3, memberid_);
      }
      if (substreamindex_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(4, substreamindex_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_ReqStreamPush parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_ReqStreamPush parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_ReqStreamPush parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_ReqStreamPush parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_ReqStreamPush parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_ReqStreamPush parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_ReqStreamPush parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_ReqStreamPush parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_ReqStreamPush parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_ReqStreamPush parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_ReqStreamPush parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_ReqStreamPush parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_ReqStreamPush prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     *请求播放流通道通知
     *type:Pb_TYPE_MEET_INTERFACE_REQUESTSTREAMPUSH
     *method: notify
     *当为询问模式时，回调函数返回1表示同意播放
     * </pre>
     *
     * Protobuf type {@code pbui_Type_ReqStreamPush}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_ReqStreamPush, Builder> implements
        // @@protoc_insertion_point(builder_implements:pbui_Type_ReqStreamPush)
        com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_ReqStreamPushOrBuilder {
      // Construct using com.mogujie.tt.com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_ReqStreamPush.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
       * </pre>
       *
       * <code>fixed32 triggeruserval = 1;</code>
       */
      public int getTriggeruserval() {
        return instance.getTriggeruserval();
      }
      /**
       * <pre>
       *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
       * </pre>
       *
       * <code>fixed32 triggeruserval = 1;</code>
       */
      public Builder setTriggeruserval(int value) {
        copyOnWrite();
        instance.setTriggeruserval(value);
        return this;
      }
      /**
       * <pre>
       *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
       * </pre>
       *
       * <code>fixed32 triggeruserval = 1;</code>
       */
      public Builder clearTriggeruserval() {
        copyOnWrite();
        instance.clearTriggeruserval();
        return this;
      }

      /**
       * <pre>
       *发起请求的设备ID 
       * </pre>
       *
       * <code>fixed32 deviceid = 2;</code>
       */
      public int getDeviceid() {
        return instance.getDeviceid();
      }
      /**
       * <pre>
       *发起请求的设备ID 
       * </pre>
       *
       * <code>fixed32 deviceid = 2;</code>
       */
      public Builder setDeviceid(int value) {
        copyOnWrite();
        instance.setDeviceid(value);
        return this;
      }
      /**
       * <pre>
       *发起请求的设备ID 
       * </pre>
       *
       * <code>fixed32 deviceid = 2;</code>
       */
      public Builder clearDeviceid() {
        copyOnWrite();
        instance.clearDeviceid();
        return this;
      }

      /**
       * <pre>
       *发起请求的人员ID
       * </pre>
       *
       * <code>fixed32 memberid = 3;</code>
       */
      public int getMemberid() {
        return instance.getMemberid();
      }
      /**
       * <pre>
       *发起请求的人员ID
       * </pre>
       *
       * <code>fixed32 memberid = 3;</code>
       */
      public Builder setMemberid(int value) {
        copyOnWrite();
        instance.setMemberid(value);
        return this;
      }
      /**
       * <pre>
       *发起请求的人员ID
       * </pre>
       *
       * <code>fixed32 memberid = 3;</code>
       */
      public Builder clearMemberid() {
        copyOnWrite();
        instance.clearMemberid();
        return this;
      }

      /**
       * <pre>
       *本设备子通道号 这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
       * </pre>
       *
       * <code>fixed32 substreamindex = 4;</code>
       */
      public int getSubstreamindex() {
        return instance.getSubstreamindex();
      }
      /**
       * <pre>
       *本设备子通道号 这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
       * </pre>
       *
       * <code>fixed32 substreamindex = 4;</code>
       */
      public Builder setSubstreamindex(int value) {
        copyOnWrite();
        instance.setSubstreamindex(value);
        return this;
      }
      /**
       * <pre>
       *本设备子通道号 这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
       * </pre>
       *
       * <code>fixed32 substreamindex = 4;</code>
       */
      public Builder clearSubstreamindex() {
        copyOnWrite();
        instance.clearSubstreamindex();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pbui_Type_ReqStreamPush)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_ReqStreamPush();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_ReqStreamPush other = (com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_ReqStreamPush) arg1;
          triggeruserval_ = visitor.visitInt(triggeruserval_ != 0, triggeruserval_,
              other.triggeruserval_ != 0, other.triggeruserval_);
          deviceid_ = visitor.visitInt(deviceid_ != 0, deviceid_,
              other.deviceid_ != 0, other.deviceid_);
          memberid_ = visitor.visitInt(memberid_ != 0, memberid_,
              other.memberid_ != 0, other.memberid_);
          substreamindex_ = visitor.visitInt(substreamindex_ != 0, substreamindex_,
              other.substreamindex_ != 0, other.substreamindex_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 13: {

                  triggeruserval_ = input.readFixed32();
                  break;
                }
                case 21: {

                  deviceid_ = input.readFixed32();
                  break;
                }
                case 29: {

                  memberid_ = input.readFixed32();
                  break;
                }
                case 37: {

                  substreamindex_ = input.readFixed32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_ReqStreamPush.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pbui_Type_ReqStreamPush)
    private static final com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_ReqStreamPush DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pbui_Type_ReqStreamPush();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_ReqStreamPush getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<pbui_Type_ReqStreamPush> PARSER;

    public static com.google.protobuf.Parser<pbui_Type_ReqStreamPush> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface pbui_Type_DoReqStreamPushOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pbui_Type_DoReqStreamPush)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
     * </pre>
     *
     * <code>fixed32 triggeruserval = 1;</code>
     */
    int getTriggeruserval();

    /**
     * <pre>
     *处理该请求的设备ID 采集端的设备ID
     * </pre>
     *
     * <code>fixed32 handledeviceid = 2;</code>
     */
    int getHandledeviceid();

    /**
     * <pre>
     *本设备子通道号  这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
     * </pre>
     *
     * <code>fixed32 substreamindex = 3;</code>
     */
    int getSubstreamindex();

    /**
     * <pre>
     *通知的目标设备,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 deviceid = 4;</code>
     */
    java.util.List<java.lang.Integer> getDeviceidList();
    /**
     * <pre>
     *通知的目标设备,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 deviceid = 4;</code>
     */
    int getDeviceidCount();
    /**
     * <pre>
     *通知的目标设备,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 deviceid = 4;</code>
     */
    int getDeviceid(int index);
  }
  /**
   * <pre>
   *请求播放流通道
   *type:Pb_TYPE_MEET_INTERFACE_STREAMPLAY
   *method: requestpush
   * </pre>
   *
   * Protobuf type {@code pbui_Type_DoReqStreamPush}
   */
  public  static final class pbui_Type_DoReqStreamPush extends
      com.google.protobuf.GeneratedMessageLite<
          pbui_Type_DoReqStreamPush, pbui_Type_DoReqStreamPush.Builder> implements
      // @@protoc_insertion_point(message_implements:pbui_Type_DoReqStreamPush)
      pbui_Type_DoReqStreamPushOrBuilder {
    private pbui_Type_DoReqStreamPush() {
      deviceid_ = emptyIntList();
    }
    private int bitField0_;
    public static final int TRIGGERUSERVAL_FIELD_NUMBER = 1;
    private int triggeruserval_;
    /**
     * <pre>
     *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
     * </pre>
     *
     * <code>fixed32 triggeruserval = 1;</code>
     */
    public int getTriggeruserval() {
      return triggeruserval_;
    }
    /**
     * <pre>
     *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
     * </pre>
     *
     * <code>fixed32 triggeruserval = 1;</code>
     */
    private void setTriggeruserval(int value) {
      
      triggeruserval_ = value;
    }
    /**
     * <pre>
     *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
     * </pre>
     *
     * <code>fixed32 triggeruserval = 1;</code>
     */
    private void clearTriggeruserval() {
      
      triggeruserval_ = 0;
    }

    public static final int HANDLEDEVICEID_FIELD_NUMBER = 2;
    private int handledeviceid_;
    /**
     * <pre>
     *处理该请求的设备ID 采集端的设备ID
     * </pre>
     *
     * <code>fixed32 handledeviceid = 2;</code>
     */
    public int getHandledeviceid() {
      return handledeviceid_;
    }
    /**
     * <pre>
     *处理该请求的设备ID 采集端的设备ID
     * </pre>
     *
     * <code>fixed32 handledeviceid = 2;</code>
     */
    private void setHandledeviceid(int value) {
      
      handledeviceid_ = value;
    }
    /**
     * <pre>
     *处理该请求的设备ID 采集端的设备ID
     * </pre>
     *
     * <code>fixed32 handledeviceid = 2;</code>
     */
    private void clearHandledeviceid() {
      
      handledeviceid_ = 0;
    }

    public static final int SUBSTREAMINDEX_FIELD_NUMBER = 3;
    private int substreamindex_;
    /**
     * <pre>
     *本设备子通道号  这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
     * </pre>
     *
     * <code>fixed32 substreamindex = 3;</code>
     */
    public int getSubstreamindex() {
      return substreamindex_;
    }
    /**
     * <pre>
     *本设备子通道号  这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
     * </pre>
     *
     * <code>fixed32 substreamindex = 3;</code>
     */
    private void setSubstreamindex(int value) {
      
      substreamindex_ = value;
    }
    /**
     * <pre>
     *本设备子通道号  这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
     * </pre>
     *
     * <code>fixed32 substreamindex = 3;</code>
     */
    private void clearSubstreamindex() {
      
      substreamindex_ = 0;
    }

    public static final int DEVICEID_FIELD_NUMBER = 4;
    private com.google.protobuf.Internal.IntList deviceid_;
    /**
     * <pre>
     *通知的目标设备,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 deviceid = 4;</code>
     */
    public java.util.List<java.lang.Integer>
        getDeviceidList() {
      return deviceid_;
    }
    /**
     * <pre>
     *通知的目标设备,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 deviceid = 4;</code>
     */
    public int getDeviceidCount() {
      return deviceid_.size();
    }
    /**
     * <pre>
     *通知的目标设备,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 deviceid = 4;</code>
     */
    public int getDeviceid(int index) {
      return deviceid_.getInt(index);
    }
    private void ensureDeviceidIsMutable() {
      if (!deviceid_.isModifiable()) {
        deviceid_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(deviceid_);
       }
    }
    /**
     * <pre>
     *通知的目标设备,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 deviceid = 4;</code>
     */
    private void setDeviceid(
        int index, int value) {
      ensureDeviceidIsMutable();
      deviceid_.setInt(index, value);
    }
    /**
     * <pre>
     *通知的目标设备,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 deviceid = 4;</code>
     */
    private void addDeviceid(int value) {
      ensureDeviceidIsMutable();
      deviceid_.addInt(value);
    }
    /**
     * <pre>
     *通知的目标设备,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 deviceid = 4;</code>
     */
    private void addAllDeviceid(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureDeviceidIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, deviceid_);
    }
    /**
     * <pre>
     *通知的目标设备,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 deviceid = 4;</code>
     */
    private void clearDeviceid() {
      deviceid_ = emptyIntList();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (triggeruserval_ != 0) {
        output.writeFixed32(1, triggeruserval_);
      }
      if (handledeviceid_ != 0) {
        output.writeFixed32(2, handledeviceid_);
      }
      if (substreamindex_ != 0) {
        output.writeFixed32(3, substreamindex_);
      }
      for (int i = 0; i < deviceid_.size(); i++) {
        output.writeFixed32(4, deviceid_.getInt(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (triggeruserval_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, triggeruserval_);
      }
      if (handledeviceid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(2, handledeviceid_);
      }
      if (substreamindex_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(3, substreamindex_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getDeviceidList().size();
        size += dataSize;
        size += 1 * getDeviceidList().size();
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoReqStreamPush parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoReqStreamPush parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoReqStreamPush parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoReqStreamPush parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoReqStreamPush parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoReqStreamPush parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoReqStreamPush parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoReqStreamPush parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoReqStreamPush parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoReqStreamPush parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoReqStreamPush parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoReqStreamPush parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoReqStreamPush prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     *请求播放流通道
     *type:Pb_TYPE_MEET_INTERFACE_STREAMPLAY
     *method: requestpush
     * </pre>
     *
     * Protobuf type {@code pbui_Type_DoReqStreamPush}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoReqStreamPush, Builder> implements
        // @@protoc_insertion_point(builder_implements:pbui_Type_DoReqStreamPush)
        com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoReqStreamPushOrBuilder {
      // Construct using com.mogujie.tt.com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoReqStreamPush.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
       * </pre>
       *
       * <code>fixed32 triggeruserval = 1;</code>
       */
      public int getTriggeruserval() {
        return instance.getTriggeruserval();
      }
      /**
       * <pre>
       *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
       * </pre>
       *
       * <code>fixed32 triggeruserval = 1;</code>
       */
      public Builder setTriggeruserval(int value) {
        copyOnWrite();
        instance.setTriggeruserval(value);
        return this;
      }
      /**
       * <pre>
       *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
       * </pre>
       *
       * <code>fixed32 triggeruserval = 1;</code>
       */
      public Builder clearTriggeruserval() {
        copyOnWrite();
        instance.clearTriggeruserval();
        return this;
      }

      /**
       * <pre>
       *处理该请求的设备ID 采集端的设备ID
       * </pre>
       *
       * <code>fixed32 handledeviceid = 2;</code>
       */
      public int getHandledeviceid() {
        return instance.getHandledeviceid();
      }
      /**
       * <pre>
       *处理该请求的设备ID 采集端的设备ID
       * </pre>
       *
       * <code>fixed32 handledeviceid = 2;</code>
       */
      public Builder setHandledeviceid(int value) {
        copyOnWrite();
        instance.setHandledeviceid(value);
        return this;
      }
      /**
       * <pre>
       *处理该请求的设备ID 采集端的设备ID
       * </pre>
       *
       * <code>fixed32 handledeviceid = 2;</code>
       */
      public Builder clearHandledeviceid() {
        copyOnWrite();
        instance.clearHandledeviceid();
        return this;
      }

      /**
       * <pre>
       *本设备子通道号  这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
       * </pre>
       *
       * <code>fixed32 substreamindex = 3;</code>
       */
      public int getSubstreamindex() {
        return instance.getSubstreamindex();
      }
      /**
       * <pre>
       *本设备子通道号  这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
       * </pre>
       *
       * <code>fixed32 substreamindex = 3;</code>
       */
      public Builder setSubstreamindex(int value) {
        copyOnWrite();
        instance.setSubstreamindex(value);
        return this;
      }
      /**
       * <pre>
       *本设备子通道号  这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
       * </pre>
       *
       * <code>fixed32 substreamindex = 3;</code>
       */
      public Builder clearSubstreamindex() {
        copyOnWrite();
        instance.clearSubstreamindex();
        return this;
      }

      /**
       * <pre>
       *通知的目标设备,为空表示全部
       * </pre>
       *
       * <code>repeated fixed32 deviceid = 4;</code>
       */
      public java.util.List<java.lang.Integer>
          getDeviceidList() {
        return java.util.Collections.unmodifiableList(
            instance.getDeviceidList());
      }
      /**
       * <pre>
       *通知的目标设备,为空表示全部
       * </pre>
       *
       * <code>repeated fixed32 deviceid = 4;</code>
       */
      public int getDeviceidCount() {
        return instance.getDeviceidCount();
      }
      /**
       * <pre>
       *通知的目标设备,为空表示全部
       * </pre>
       *
       * <code>repeated fixed32 deviceid = 4;</code>
       */
      public int getDeviceid(int index) {
        return instance.getDeviceid(index);
      }
      /**
       * <pre>
       *通知的目标设备,为空表示全部
       * </pre>
       *
       * <code>repeated fixed32 deviceid = 4;</code>
       */
      public Builder setDeviceid(
          int index, int value) {
        copyOnWrite();
        instance.setDeviceid(index, value);
        return this;
      }
      /**
       * <pre>
       *通知的目标设备,为空表示全部
       * </pre>
       *
       * <code>repeated fixed32 deviceid = 4;</code>
       */
      public Builder addDeviceid(int value) {
        copyOnWrite();
        instance.addDeviceid(value);
        return this;
      }
      /**
       * <pre>
       *通知的目标设备,为空表示全部
       * </pre>
       *
       * <code>repeated fixed32 deviceid = 4;</code>
       */
      public Builder addAllDeviceid(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllDeviceid(values);
        return this;
      }
      /**
       * <pre>
       *通知的目标设备,为空表示全部
       * </pre>
       *
       * <code>repeated fixed32 deviceid = 4;</code>
       */
      public Builder clearDeviceid() {
        copyOnWrite();
        instance.clearDeviceid();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pbui_Type_DoReqStreamPush)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoReqStreamPush();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          deviceid_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoReqStreamPush other = (com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoReqStreamPush) arg1;
          triggeruserval_ = visitor.visitInt(triggeruserval_ != 0, triggeruserval_,
              other.triggeruserval_ != 0, other.triggeruserval_);
          handledeviceid_ = visitor.visitInt(handledeviceid_ != 0, handledeviceid_,
              other.handledeviceid_ != 0, other.handledeviceid_);
          substreamindex_ = visitor.visitInt(substreamindex_ != 0, substreamindex_,
              other.substreamindex_ != 0, other.substreamindex_);
          deviceid_= visitor.visitIntList(deviceid_, other.deviceid_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 13: {

                  triggeruserval_ = input.readFixed32();
                  break;
                }
                case 21: {

                  handledeviceid_ = input.readFixed32();
                  break;
                }
                case 29: {

                  substreamindex_ = input.readFixed32();
                  break;
                }
                case 37: {
                  if (!deviceid_.isModifiable()) {
                    deviceid_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(deviceid_);
                  }
                  deviceid_.addInt(input.readFixed32());
                  break;
                }
                case 34: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  if (!deviceid_.isModifiable() && input.getBytesUntilLimit() > 0) {
                    final int currentSize = deviceid_.size();
                    deviceid_ = deviceid_.mutableCopyWithCapacity(
                        currentSize + (length/4));
                  }
                  while (input.getBytesUntilLimit() > 0) {
                    deviceid_.addInt(input.readFixed32());
                  }
                  input.popLimit(limit);
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoReqStreamPush.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pbui_Type_DoReqStreamPush)
    private static final com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoReqStreamPush DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pbui_Type_DoReqStreamPush();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoReqStreamPush getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<pbui_Type_DoReqStreamPush> PARSER;

    public static com.google.protobuf.Parser<pbui_Type_DoReqStreamPush> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface pbui_Type_StreamPushOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pbui_Type_StreamPush)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
     * </pre>
     *
     * <code>fixed32 triggeruserval = 1;</code>
     */
    int getTriggeruserval();

    /**
     * <pre>
     *发起请求的设备ID 采集端的设备ID
     * </pre>
     *
     * <code>fixed32 deviceid = 2;</code>
     */
    int getDeviceid();

    /**
     * <pre>
     *本设备子通道号 这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
     * </pre>
     *
     * <code>fixed32 substreamindex = 3;</code>
     */
    int getSubstreamindex();
  }
  /**
   * <pre>
   *推送流通知
   *type:Pb_TYPE_MEET_INTERFACE_STREAMPUSH
   *method: notify
   *当为询问模式时，回调函数返回1表示同意播放
   * </pre>
   *
   * Protobuf type {@code pbui_Type_StreamPush}
   */
  public  static final class pbui_Type_StreamPush extends
      com.google.protobuf.GeneratedMessageLite<
          pbui_Type_StreamPush, pbui_Type_StreamPush.Builder> implements
      // @@protoc_insertion_point(message_implements:pbui_Type_StreamPush)
      pbui_Type_StreamPushOrBuilder {
    private pbui_Type_StreamPush() {
    }
    public static final int TRIGGERUSERVAL_FIELD_NUMBER = 1;
    private int triggeruserval_;
    /**
     * <pre>
     *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
     * </pre>
     *
     * <code>fixed32 triggeruserval = 1;</code>
     */
    public int getTriggeruserval() {
      return triggeruserval_;
    }
    /**
     * <pre>
     *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
     * </pre>
     *
     * <code>fixed32 triggeruserval = 1;</code>
     */
    private void setTriggeruserval(int value) {
      
      triggeruserval_ = value;
    }
    /**
     * <pre>
     *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
     * </pre>
     *
     * <code>fixed32 triggeruserval = 1;</code>
     */
    private void clearTriggeruserval() {
      
      triggeruserval_ = 0;
    }

    public static final int DEVICEID_FIELD_NUMBER = 2;
    private int deviceid_;
    /**
     * <pre>
     *发起请求的设备ID 采集端的设备ID
     * </pre>
     *
     * <code>fixed32 deviceid = 2;</code>
     */
    public int getDeviceid() {
      return deviceid_;
    }
    /**
     * <pre>
     *发起请求的设备ID 采集端的设备ID
     * </pre>
     *
     * <code>fixed32 deviceid = 2;</code>
     */
    private void setDeviceid(int value) {
      
      deviceid_ = value;
    }
    /**
     * <pre>
     *发起请求的设备ID 采集端的设备ID
     * </pre>
     *
     * <code>fixed32 deviceid = 2;</code>
     */
    private void clearDeviceid() {
      
      deviceid_ = 0;
    }

    public static final int SUBSTREAMINDEX_FIELD_NUMBER = 3;
    private int substreamindex_;
    /**
     * <pre>
     *本设备子通道号 这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
     * </pre>
     *
     * <code>fixed32 substreamindex = 3;</code>
     */
    public int getSubstreamindex() {
      return substreamindex_;
    }
    /**
     * <pre>
     *本设备子通道号 这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
     * </pre>
     *
     * <code>fixed32 substreamindex = 3;</code>
     */
    private void setSubstreamindex(int value) {
      
      substreamindex_ = value;
    }
    /**
     * <pre>
     *本设备子通道号 这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
     * </pre>
     *
     * <code>fixed32 substreamindex = 3;</code>
     */
    private void clearSubstreamindex() {
      
      substreamindex_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (triggeruserval_ != 0) {
        output.writeFixed32(1, triggeruserval_);
      }
      if (deviceid_ != 0) {
        output.writeFixed32(2, deviceid_);
      }
      if (substreamindex_ != 0) {
        output.writeFixed32(3, substreamindex_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (triggeruserval_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, triggeruserval_);
      }
      if (deviceid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(2, deviceid_);
      }
      if (substreamindex_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(3, substreamindex_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_StreamPush parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_StreamPush parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_StreamPush parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_StreamPush parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_StreamPush parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_StreamPush parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_StreamPush parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_StreamPush parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_StreamPush parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_StreamPush parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_StreamPush parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_StreamPush parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_StreamPush prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     *推送流通知
     *type:Pb_TYPE_MEET_INTERFACE_STREAMPUSH
     *method: notify
     *当为询问模式时，回调函数返回1表示同意播放
     * </pre>
     *
     * Protobuf type {@code pbui_Type_StreamPush}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_StreamPush, Builder> implements
        // @@protoc_insertion_point(builder_implements:pbui_Type_StreamPush)
        com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_StreamPushOrBuilder {
      // Construct using com.mogujie.tt.com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_StreamPush.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
       * </pre>
       *
       * <code>fixed32 triggeruserval = 1;</code>
       */
      public int getTriggeruserval() {
        return instance.getTriggeruserval();
      }
      /**
       * <pre>
       *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
       * </pre>
       *
       * <code>fixed32 triggeruserval = 1;</code>
       */
      public Builder setTriggeruserval(int value) {
        copyOnWrite();
        instance.setTriggeruserval(value);
        return this;
      }
      /**
       * <pre>
       *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
       * </pre>
       *
       * <code>fixed32 triggeruserval = 1;</code>
       */
      public Builder clearTriggeruserval() {
        copyOnWrite();
        instance.clearTriggeruserval();
        return this;
      }

      /**
       * <pre>
       *发起请求的设备ID 采集端的设备ID
       * </pre>
       *
       * <code>fixed32 deviceid = 2;</code>
       */
      public int getDeviceid() {
        return instance.getDeviceid();
      }
      /**
       * <pre>
       *发起请求的设备ID 采集端的设备ID
       * </pre>
       *
       * <code>fixed32 deviceid = 2;</code>
       */
      public Builder setDeviceid(int value) {
        copyOnWrite();
        instance.setDeviceid(value);
        return this;
      }
      /**
       * <pre>
       *发起请求的设备ID 采集端的设备ID
       * </pre>
       *
       * <code>fixed32 deviceid = 2;</code>
       */
      public Builder clearDeviceid() {
        copyOnWrite();
        instance.clearDeviceid();
        return this;
      }

      /**
       * <pre>
       *本设备子通道号 这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
       * </pre>
       *
       * <code>fixed32 substreamindex = 3;</code>
       */
      public int getSubstreamindex() {
        return instance.getSubstreamindex();
      }
      /**
       * <pre>
       *本设备子通道号 这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
       * </pre>
       *
       * <code>fixed32 substreamindex = 3;</code>
       */
      public Builder setSubstreamindex(int value) {
        copyOnWrite();
        instance.setSubstreamindex(value);
        return this;
      }
      /**
       * <pre>
       *本设备子通道号 这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
       * </pre>
       *
       * <code>fixed32 substreamindex = 3;</code>
       */
      public Builder clearSubstreamindex() {
        copyOnWrite();
        instance.clearSubstreamindex();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pbui_Type_StreamPush)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_StreamPush();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_StreamPush other = (com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_StreamPush) arg1;
          triggeruserval_ = visitor.visitInt(triggeruserval_ != 0, triggeruserval_,
              other.triggeruserval_ != 0, other.triggeruserval_);
          deviceid_ = visitor.visitInt(deviceid_ != 0, deviceid_,
              other.deviceid_ != 0, other.deviceid_);
          substreamindex_ = visitor.visitInt(substreamindex_ != 0, substreamindex_,
              other.substreamindex_ != 0, other.substreamindex_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 13: {

                  triggeruserval_ = input.readFixed32();
                  break;
                }
                case 21: {

                  deviceid_ = input.readFixed32();
                  break;
                }
                case 29: {

                  substreamindex_ = input.readFixed32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_StreamPush.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pbui_Type_StreamPush)
    private static final com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_StreamPush DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pbui_Type_StreamPush();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_StreamPush getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<pbui_Type_StreamPush> PARSER;

    public static com.google.protobuf.Parser<pbui_Type_StreamPush> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface pbui_Type_DoStreamPushOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pbui_Type_DoStreamPush)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
     * </pre>
     *
     * <code>fixed32 triggeruserval = 1;</code>
     */
    int getTriggeruserval();

    /**
     * <pre>
     *发起请求的设备ID 采集端的设备ID
     * </pre>
     *
     * <code>fixed32 srcdeviceid = 2;</code>
     */
    int getSrcdeviceid();

    /**
     * <pre>
     *本设备子通道号 这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
     * </pre>
     *
     * <code>fixed32 substreamindex = 3;</code>
     */
    int getSubstreamindex();

    /**
     * <pre>
     *通知的目标设备,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 deviceid = 4;</code>
     */
    java.util.List<java.lang.Integer> getDeviceidList();
    /**
     * <pre>
     *通知的目标设备,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 deviceid = 4;</code>
     */
    int getDeviceidCount();
    /**
     * <pre>
     *通知的目标设备,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 deviceid = 4;</code>
     */
    int getDeviceid(int index);
  }
  /**
   * <pre>
   *推送流
   *type:Pb_TYPE_MEET_INTERFACE_STREAMPLAY
   *method: push
   * </pre>
   *
   * Protobuf type {@code pbui_Type_DoStreamPush}
   */
  public  static final class pbui_Type_DoStreamPush extends
      com.google.protobuf.GeneratedMessageLite<
          pbui_Type_DoStreamPush, pbui_Type_DoStreamPush.Builder> implements
      // @@protoc_insertion_point(message_implements:pbui_Type_DoStreamPush)
      pbui_Type_DoStreamPushOrBuilder {
    private pbui_Type_DoStreamPush() {
      deviceid_ = emptyIntList();
    }
    private int bitField0_;
    public static final int TRIGGERUSERVAL_FIELD_NUMBER = 1;
    private int triggeruserval_;
    /**
     * <pre>
     *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
     * </pre>
     *
     * <code>fixed32 triggeruserval = 1;</code>
     */
    public int getTriggeruserval() {
      return triggeruserval_;
    }
    /**
     * <pre>
     *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
     * </pre>
     *
     * <code>fixed32 triggeruserval = 1;</code>
     */
    private void setTriggeruserval(int value) {
      
      triggeruserval_ = value;
    }
    /**
     * <pre>
     *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
     * </pre>
     *
     * <code>fixed32 triggeruserval = 1;</code>
     */
    private void clearTriggeruserval() {
      
      triggeruserval_ = 0;
    }

    public static final int SRCDEVICEID_FIELD_NUMBER = 2;
    private int srcdeviceid_;
    /**
     * <pre>
     *发起请求的设备ID 采集端的设备ID
     * </pre>
     *
     * <code>fixed32 srcdeviceid = 2;</code>
     */
    public int getSrcdeviceid() {
      return srcdeviceid_;
    }
    /**
     * <pre>
     *发起请求的设备ID 采集端的设备ID
     * </pre>
     *
     * <code>fixed32 srcdeviceid = 2;</code>
     */
    private void setSrcdeviceid(int value) {
      
      srcdeviceid_ = value;
    }
    /**
     * <pre>
     *发起请求的设备ID 采集端的设备ID
     * </pre>
     *
     * <code>fixed32 srcdeviceid = 2;</code>
     */
    private void clearSrcdeviceid() {
      
      srcdeviceid_ = 0;
    }

    public static final int SUBSTREAMINDEX_FIELD_NUMBER = 3;
    private int substreamindex_;
    /**
     * <pre>
     *本设备子通道号 这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
     * </pre>
     *
     * <code>fixed32 substreamindex = 3;</code>
     */
    public int getSubstreamindex() {
      return substreamindex_;
    }
    /**
     * <pre>
     *本设备子通道号 这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
     * </pre>
     *
     * <code>fixed32 substreamindex = 3;</code>
     */
    private void setSubstreamindex(int value) {
      
      substreamindex_ = value;
    }
    /**
     * <pre>
     *本设备子通道号 这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
     * </pre>
     *
     * <code>fixed32 substreamindex = 3;</code>
     */
    private void clearSubstreamindex() {
      
      substreamindex_ = 0;
    }

    public static final int DEVICEID_FIELD_NUMBER = 4;
    private com.google.protobuf.Internal.IntList deviceid_;
    /**
     * <pre>
     *通知的目标设备,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 deviceid = 4;</code>
     */
    public java.util.List<java.lang.Integer>
        getDeviceidList() {
      return deviceid_;
    }
    /**
     * <pre>
     *通知的目标设备,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 deviceid = 4;</code>
     */
    public int getDeviceidCount() {
      return deviceid_.size();
    }
    /**
     * <pre>
     *通知的目标设备,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 deviceid = 4;</code>
     */
    public int getDeviceid(int index) {
      return deviceid_.getInt(index);
    }
    private void ensureDeviceidIsMutable() {
      if (!deviceid_.isModifiable()) {
        deviceid_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(deviceid_);
       }
    }
    /**
     * <pre>
     *通知的目标设备,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 deviceid = 4;</code>
     */
    private void setDeviceid(
        int index, int value) {
      ensureDeviceidIsMutable();
      deviceid_.setInt(index, value);
    }
    /**
     * <pre>
     *通知的目标设备,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 deviceid = 4;</code>
     */
    private void addDeviceid(int value) {
      ensureDeviceidIsMutable();
      deviceid_.addInt(value);
    }
    /**
     * <pre>
     *通知的目标设备,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 deviceid = 4;</code>
     */
    private void addAllDeviceid(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureDeviceidIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, deviceid_);
    }
    /**
     * <pre>
     *通知的目标设备,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 deviceid = 4;</code>
     */
    private void clearDeviceid() {
      deviceid_ = emptyIntList();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (triggeruserval_ != 0) {
        output.writeFixed32(1, triggeruserval_);
      }
      if (srcdeviceid_ != 0) {
        output.writeFixed32(2, srcdeviceid_);
      }
      if (substreamindex_ != 0) {
        output.writeFixed32(3, substreamindex_);
      }
      for (int i = 0; i < deviceid_.size(); i++) {
        output.writeFixed32(4, deviceid_.getInt(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (triggeruserval_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, triggeruserval_);
      }
      if (srcdeviceid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(2, srcdeviceid_);
      }
      if (substreamindex_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(3, substreamindex_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getDeviceidList().size();
        size += dataSize;
        size += 1 * getDeviceidList().size();
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoStreamPush parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoStreamPush parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoStreamPush parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoStreamPush parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoStreamPush parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoStreamPush parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoStreamPush parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoStreamPush parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoStreamPush parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoStreamPush parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoStreamPush parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoStreamPush parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoStreamPush prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     *推送流
     *type:Pb_TYPE_MEET_INTERFACE_STREAMPLAY
     *method: push
     * </pre>
     *
     * Protobuf type {@code pbui_Type_DoStreamPush}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoStreamPush, Builder> implements
        // @@protoc_insertion_point(builder_implements:pbui_Type_DoStreamPush)
        com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoStreamPushOrBuilder {
      // Construct using com.mogujie.tt.com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoStreamPush.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
       * </pre>
       *
       * <code>fixed32 triggeruserval = 1;</code>
       */
      public int getTriggeruserval() {
        return instance.getTriggeruserval();
      }
      /**
       * <pre>
       *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
       * </pre>
       *
       * <code>fixed32 triggeruserval = 1;</code>
       */
      public Builder setTriggeruserval(int value) {
        copyOnWrite();
        instance.setTriggeruserval(value);
        return this;
      }
      /**
       * <pre>
       *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
       * </pre>
       *
       * <code>fixed32 triggeruserval = 1;</code>
       */
      public Builder clearTriggeruserval() {
        copyOnWrite();
        instance.clearTriggeruserval();
        return this;
      }

      /**
       * <pre>
       *发起请求的设备ID 采集端的设备ID
       * </pre>
       *
       * <code>fixed32 srcdeviceid = 2;</code>
       */
      public int getSrcdeviceid() {
        return instance.getSrcdeviceid();
      }
      /**
       * <pre>
       *发起请求的设备ID 采集端的设备ID
       * </pre>
       *
       * <code>fixed32 srcdeviceid = 2;</code>
       */
      public Builder setSrcdeviceid(int value) {
        copyOnWrite();
        instance.setSrcdeviceid(value);
        return this;
      }
      /**
       * <pre>
       *发起请求的设备ID 采集端的设备ID
       * </pre>
       *
       * <code>fixed32 srcdeviceid = 2;</code>
       */
      public Builder clearSrcdeviceid() {
        copyOnWrite();
        instance.clearSrcdeviceid();
        return this;
      }

      /**
       * <pre>
       *本设备子通道号 这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
       * </pre>
       *
       * <code>fixed32 substreamindex = 3;</code>
       */
      public int getSubstreamindex() {
        return instance.getSubstreamindex();
      }
      /**
       * <pre>
       *本设备子通道号 这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
       * </pre>
       *
       * <code>fixed32 substreamindex = 3;</code>
       */
      public Builder setSubstreamindex(int value) {
        copyOnWrite();
        instance.setSubstreamindex(value);
        return this;
      }
      /**
       * <pre>
       *本设备子通道号 这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
       * </pre>
       *
       * <code>fixed32 substreamindex = 3;</code>
       */
      public Builder clearSubstreamindex() {
        copyOnWrite();
        instance.clearSubstreamindex();
        return this;
      }

      /**
       * <pre>
       *通知的目标设备,为空表示全部
       * </pre>
       *
       * <code>repeated fixed32 deviceid = 4;</code>
       */
      public java.util.List<java.lang.Integer>
          getDeviceidList() {
        return java.util.Collections.unmodifiableList(
            instance.getDeviceidList());
      }
      /**
       * <pre>
       *通知的目标设备,为空表示全部
       * </pre>
       *
       * <code>repeated fixed32 deviceid = 4;</code>
       */
      public int getDeviceidCount() {
        return instance.getDeviceidCount();
      }
      /**
       * <pre>
       *通知的目标设备,为空表示全部
       * </pre>
       *
       * <code>repeated fixed32 deviceid = 4;</code>
       */
      public int getDeviceid(int index) {
        return instance.getDeviceid(index);
      }
      /**
       * <pre>
       *通知的目标设备,为空表示全部
       * </pre>
       *
       * <code>repeated fixed32 deviceid = 4;</code>
       */
      public Builder setDeviceid(
          int index, int value) {
        copyOnWrite();
        instance.setDeviceid(index, value);
        return this;
      }
      /**
       * <pre>
       *通知的目标设备,为空表示全部
       * </pre>
       *
       * <code>repeated fixed32 deviceid = 4;</code>
       */
      public Builder addDeviceid(int value) {
        copyOnWrite();
        instance.addDeviceid(value);
        return this;
      }
      /**
       * <pre>
       *通知的目标设备,为空表示全部
       * </pre>
       *
       * <code>repeated fixed32 deviceid = 4;</code>
       */
      public Builder addAllDeviceid(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllDeviceid(values);
        return this;
      }
      /**
       * <pre>
       *通知的目标设备,为空表示全部
       * </pre>
       *
       * <code>repeated fixed32 deviceid = 4;</code>
       */
      public Builder clearDeviceid() {
        copyOnWrite();
        instance.clearDeviceid();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pbui_Type_DoStreamPush)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoStreamPush();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          deviceid_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoStreamPush other = (com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoStreamPush) arg1;
          triggeruserval_ = visitor.visitInt(triggeruserval_ != 0, triggeruserval_,
              other.triggeruserval_ != 0, other.triggeruserval_);
          srcdeviceid_ = visitor.visitInt(srcdeviceid_ != 0, srcdeviceid_,
              other.srcdeviceid_ != 0, other.srcdeviceid_);
          substreamindex_ = visitor.visitInt(substreamindex_ != 0, substreamindex_,
              other.substreamindex_ != 0, other.substreamindex_);
          deviceid_= visitor.visitIntList(deviceid_, other.deviceid_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 13: {

                  triggeruserval_ = input.readFixed32();
                  break;
                }
                case 21: {

                  srcdeviceid_ = input.readFixed32();
                  break;
                }
                case 29: {

                  substreamindex_ = input.readFixed32();
                  break;
                }
                case 37: {
                  if (!deviceid_.isModifiable()) {
                    deviceid_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(deviceid_);
                  }
                  deviceid_.addInt(input.readFixed32());
                  break;
                }
                case 34: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  if (!deviceid_.isModifiable() && input.getBytesUntilLimit() > 0) {
                    final int currentSize = deviceid_.size();
                    deviceid_ = deviceid_.mutableCopyWithCapacity(
                        currentSize + (length/4));
                  }
                  while (input.getBytesUntilLimit() > 0) {
                    deviceid_.addInt(input.readFixed32());
                  }
                  input.popLimit(limit);
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoStreamPush.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pbui_Type_DoStreamPush)
    private static final com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoStreamPush DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pbui_Type_DoStreamPush();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_DoStreamPush getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<pbui_Type_DoStreamPush> PARSER;

    public static com.google.protobuf.Parser<pbui_Type_DoStreamPush> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface pbui_Type_MeetStreamPlayOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pbui_Type_MeetStreamPlay)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *触发器ID
     * </pre>
     *
     * <code>fixed32 triggerid = 1;</code>
     */
    int getTriggerid();

    /**
     * <pre>
     *创建执行该触发器的设备ID
     * </pre>
     *
     * <code>fixed32 createdeviceid = 2;</code>
     */
    int getCreatedeviceid();

    /**
     * <pre>
     *流源设备ID 采集端的设备ID
     * </pre>
     *
     * <code>fixed32 deviceid = 3;</code>
     */
    int getDeviceid();

    /**
     * <pre>
     *流源设备子通道ID 这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
     * </pre>
     *
     * <code>fixed32 subid = 4;</code>
     */
    int getSubid();

    /**
     * <pre>
     *播放所用的资源ID 初始化播放资源时传入的资源ID eg:0,1,2,3 etc
     * </pre>
     *
     * <code>fixed32 res = 5;</code>
     */
    int getRes();

    /**
     * <pre>
     *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
     * </pre>
     *
     * <code>fixed32 triggeruserval = 6;</code>
     */
    int getTriggeruserval();
  }
  /**
   * <pre>
   *流播放通知
   *type:Pb_TYPE_MEET_INTERFACE_STREAMPLAY
   *callback
   *method: notify
   * </pre>
   *
   * Protobuf type {@code pbui_Type_MeetStreamPlay}
   */
  public  static final class pbui_Type_MeetStreamPlay extends
      com.google.protobuf.GeneratedMessageLite<
          pbui_Type_MeetStreamPlay, pbui_Type_MeetStreamPlay.Builder> implements
      // @@protoc_insertion_point(message_implements:pbui_Type_MeetStreamPlay)
      pbui_Type_MeetStreamPlayOrBuilder {
    private pbui_Type_MeetStreamPlay() {
    }
    public static final int TRIGGERID_FIELD_NUMBER = 1;
    private int triggerid_;
    /**
     * <pre>
     *触发器ID
     * </pre>
     *
     * <code>fixed32 triggerid = 1;</code>
     */
    public int getTriggerid() {
      return triggerid_;
    }
    /**
     * <pre>
     *触发器ID
     * </pre>
     *
     * <code>fixed32 triggerid = 1;</code>
     */
    private void setTriggerid(int value) {
      
      triggerid_ = value;
    }
    /**
     * <pre>
     *触发器ID
     * </pre>
     *
     * <code>fixed32 triggerid = 1;</code>
     */
    private void clearTriggerid() {
      
      triggerid_ = 0;
    }

    public static final int CREATEDEVICEID_FIELD_NUMBER = 2;
    private int createdeviceid_;
    /**
     * <pre>
     *创建执行该触发器的设备ID
     * </pre>
     *
     * <code>fixed32 createdeviceid = 2;</code>
     */
    public int getCreatedeviceid() {
      return createdeviceid_;
    }
    /**
     * <pre>
     *创建执行该触发器的设备ID
     * </pre>
     *
     * <code>fixed32 createdeviceid = 2;</code>
     */
    private void setCreatedeviceid(int value) {
      
      createdeviceid_ = value;
    }
    /**
     * <pre>
     *创建执行该触发器的设备ID
     * </pre>
     *
     * <code>fixed32 createdeviceid = 2;</code>
     */
    private void clearCreatedeviceid() {
      
      createdeviceid_ = 0;
    }

    public static final int DEVICEID_FIELD_NUMBER = 3;
    private int deviceid_;
    /**
     * <pre>
     *流源设备ID 采集端的设备ID
     * </pre>
     *
     * <code>fixed32 deviceid = 3;</code>
     */
    public int getDeviceid() {
      return deviceid_;
    }
    /**
     * <pre>
     *流源设备ID 采集端的设备ID
     * </pre>
     *
     * <code>fixed32 deviceid = 3;</code>
     */
    private void setDeviceid(int value) {
      
      deviceid_ = value;
    }
    /**
     * <pre>
     *流源设备ID 采集端的设备ID
     * </pre>
     *
     * <code>fixed32 deviceid = 3;</code>
     */
    private void clearDeviceid() {
      
      deviceid_ = 0;
    }

    public static final int SUBID_FIELD_NUMBER = 4;
    private int subid_;
    /**
     * <pre>
     *流源设备子通道ID 这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
     * </pre>
     *
     * <code>fixed32 subid = 4;</code>
     */
    public int getSubid() {
      return subid_;
    }
    /**
     * <pre>
     *流源设备子通道ID 这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
     * </pre>
     *
     * <code>fixed32 subid = 4;</code>
     */
    private void setSubid(int value) {
      
      subid_ = value;
    }
    /**
     * <pre>
     *流源设备子通道ID 这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
     * </pre>
     *
     * <code>fixed32 subid = 4;</code>
     */
    private void clearSubid() {
      
      subid_ = 0;
    }

    public static final int RES_FIELD_NUMBER = 5;
    private int res_;
    /**
     * <pre>
     *播放所用的资源ID 初始化播放资源时传入的资源ID eg:0,1,2,3 etc
     * </pre>
     *
     * <code>fixed32 res = 5;</code>
     */
    public int getRes() {
      return res_;
    }
    /**
     * <pre>
     *播放所用的资源ID 初始化播放资源时传入的资源ID eg:0,1,2,3 etc
     * </pre>
     *
     * <code>fixed32 res = 5;</code>
     */
    private void setRes(int value) {
      
      res_ = value;
    }
    /**
     * <pre>
     *播放所用的资源ID 初始化播放资源时传入的资源ID eg:0,1,2,3 etc
     * </pre>
     *
     * <code>fixed32 res = 5;</code>
     */
    private void clearRes() {
      
      res_ = 0;
    }

    public static final int TRIGGERUSERVAL_FIELD_NUMBER = 6;
    private int triggeruserval_;
    /**
     * <pre>
     *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
     * </pre>
     *
     * <code>fixed32 triggeruserval = 6;</code>
     */
    public int getTriggeruserval() {
      return triggeruserval_;
    }
    /**
     * <pre>
     *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
     * </pre>
     *
     * <code>fixed32 triggeruserval = 6;</code>
     */
    private void setTriggeruserval(int value) {
      
      triggeruserval_ = value;
    }
    /**
     * <pre>
     *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
     * </pre>
     *
     * <code>fixed32 triggeruserval = 6;</code>
     */
    private void clearTriggeruserval() {
      
      triggeruserval_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (triggerid_ != 0) {
        output.writeFixed32(1, triggerid_);
      }
      if (createdeviceid_ != 0) {
        output.writeFixed32(2, createdeviceid_);
      }
      if (deviceid_ != 0) {
        output.writeFixed32(3, deviceid_);
      }
      if (subid_ != 0) {
        output.writeFixed32(4, subid_);
      }
      if (res_ != 0) {
        output.writeFixed32(5, res_);
      }
      if (triggeruserval_ != 0) {
        output.writeFixed32(6, triggeruserval_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (triggerid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, triggerid_);
      }
      if (createdeviceid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(2, createdeviceid_);
      }
      if (deviceid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(3, deviceid_);
      }
      if (subid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(4, subid_);
      }
      if (res_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(5, res_);
      }
      if (triggeruserval_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(6, triggeruserval_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlay parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlay parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlay parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlay parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlay parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlay parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlay parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlay parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlay parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlay parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlay parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlay parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlay prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     *流播放通知
     *type:Pb_TYPE_MEET_INTERFACE_STREAMPLAY
     *callback
     *method: notify
     * </pre>
     *
     * Protobuf type {@code pbui_Type_MeetStreamPlay}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlay, Builder> implements
        // @@protoc_insertion_point(builder_implements:pbui_Type_MeetStreamPlay)
        com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlayOrBuilder {
      // Construct using com.mogujie.tt.com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlay.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *触发器ID
       * </pre>
       *
       * <code>fixed32 triggerid = 1;</code>
       */
      public int getTriggerid() {
        return instance.getTriggerid();
      }
      /**
       * <pre>
       *触发器ID
       * </pre>
       *
       * <code>fixed32 triggerid = 1;</code>
       */
      public Builder setTriggerid(int value) {
        copyOnWrite();
        instance.setTriggerid(value);
        return this;
      }
      /**
       * <pre>
       *触发器ID
       * </pre>
       *
       * <code>fixed32 triggerid = 1;</code>
       */
      public Builder clearTriggerid() {
        copyOnWrite();
        instance.clearTriggerid();
        return this;
      }

      /**
       * <pre>
       *创建执行该触发器的设备ID
       * </pre>
       *
       * <code>fixed32 createdeviceid = 2;</code>
       */
      public int getCreatedeviceid() {
        return instance.getCreatedeviceid();
      }
      /**
       * <pre>
       *创建执行该触发器的设备ID
       * </pre>
       *
       * <code>fixed32 createdeviceid = 2;</code>
       */
      public Builder setCreatedeviceid(int value) {
        copyOnWrite();
        instance.setCreatedeviceid(value);
        return this;
      }
      /**
       * <pre>
       *创建执行该触发器的设备ID
       * </pre>
       *
       * <code>fixed32 createdeviceid = 2;</code>
       */
      public Builder clearCreatedeviceid() {
        copyOnWrite();
        instance.clearCreatedeviceid();
        return this;
      }

      /**
       * <pre>
       *流源设备ID 采集端的设备ID
       * </pre>
       *
       * <code>fixed32 deviceid = 3;</code>
       */
      public int getDeviceid() {
        return instance.getDeviceid();
      }
      /**
       * <pre>
       *流源设备ID 采集端的设备ID
       * </pre>
       *
       * <code>fixed32 deviceid = 3;</code>
       */
      public Builder setDeviceid(int value) {
        copyOnWrite();
        instance.setDeviceid(value);
        return this;
      }
      /**
       * <pre>
       *流源设备ID 采集端的设备ID
       * </pre>
       *
       * <code>fixed32 deviceid = 3;</code>
       */
      public Builder clearDeviceid() {
        copyOnWrite();
        instance.clearDeviceid();
        return this;
      }

      /**
       * <pre>
       *流源设备子通道ID 这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
       * </pre>
       *
       * <code>fixed32 subid = 4;</code>
       */
      public int getSubid() {
        return instance.getSubid();
      }
      /**
       * <pre>
       *流源设备子通道ID 这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
       * </pre>
       *
       * <code>fixed32 subid = 4;</code>
       */
      public Builder setSubid(int value) {
        copyOnWrite();
        instance.setSubid(value);
        return this;
      }
      /**
       * <pre>
       *流源设备子通道ID 这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
       * </pre>
       *
       * <code>fixed32 subid = 4;</code>
       */
      public Builder clearSubid() {
        copyOnWrite();
        instance.clearSubid();
        return this;
      }

      /**
       * <pre>
       *播放所用的资源ID 初始化播放资源时传入的资源ID eg:0,1,2,3 etc
       * </pre>
       *
       * <code>fixed32 res = 5;</code>
       */
      public int getRes() {
        return instance.getRes();
      }
      /**
       * <pre>
       *播放所用的资源ID 初始化播放资源时传入的资源ID eg:0,1,2,3 etc
       * </pre>
       *
       * <code>fixed32 res = 5;</code>
       */
      public Builder setRes(int value) {
        copyOnWrite();
        instance.setRes(value);
        return this;
      }
      /**
       * <pre>
       *播放所用的资源ID 初始化播放资源时传入的资源ID eg:0,1,2,3 etc
       * </pre>
       *
       * <code>fixed32 res = 5;</code>
       */
      public Builder clearRes() {
        copyOnWrite();
        instance.clearRes();
        return this;
      }

      /**
       * <pre>
       *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
       * </pre>
       *
       * <code>fixed32 triggeruserval = 6;</code>
       */
      public int getTriggeruserval() {
        return instance.getTriggeruserval();
      }
      /**
       * <pre>
       *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
       * </pre>
       *
       * <code>fixed32 triggeruserval = 6;</code>
       */
      public Builder setTriggeruserval(int value) {
        copyOnWrite();
        instance.setTriggeruserval(value);
        return this;
      }
      /**
       * <pre>
       *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
       * </pre>
       *
       * <code>fixed32 triggeruserval = 6;</code>
       */
      public Builder clearTriggeruserval() {
        copyOnWrite();
        instance.clearTriggeruserval();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pbui_Type_MeetStreamPlay)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlay();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlay other = (com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlay) arg1;
          triggerid_ = visitor.visitInt(triggerid_ != 0, triggerid_,
              other.triggerid_ != 0, other.triggerid_);
          createdeviceid_ = visitor.visitInt(createdeviceid_ != 0, createdeviceid_,
              other.createdeviceid_ != 0, other.createdeviceid_);
          deviceid_ = visitor.visitInt(deviceid_ != 0, deviceid_,
              other.deviceid_ != 0, other.deviceid_);
          subid_ = visitor.visitInt(subid_ != 0, subid_,
              other.subid_ != 0, other.subid_);
          res_ = visitor.visitInt(res_ != 0, res_,
              other.res_ != 0, other.res_);
          triggeruserval_ = visitor.visitInt(triggeruserval_ != 0, triggeruserval_,
              other.triggeruserval_ != 0, other.triggeruserval_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 13: {

                  triggerid_ = input.readFixed32();
                  break;
                }
                case 21: {

                  createdeviceid_ = input.readFixed32();
                  break;
                }
                case 29: {

                  deviceid_ = input.readFixed32();
                  break;
                }
                case 37: {

                  subid_ = input.readFixed32();
                  break;
                }
                case 45: {

                  res_ = input.readFixed32();
                  break;
                }
                case 53: {

                  triggeruserval_ = input.readFixed32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlay.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pbui_Type_MeetStreamPlay)
    private static final com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlay DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pbui_Type_MeetStreamPlay();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlay getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<pbui_Type_MeetStreamPlay> PARSER;

    public static com.google.protobuf.Parser<pbui_Type_MeetStreamPlay> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface pbui_Type_MeetDoStreamPlayOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pbui_Type_MeetDoStreamPlay)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *设备ID 采集端的设备ID
     * </pre>
     *
     * <code>fixed32 srcdeviceid = 1;</code>
     */
    int getSrcdeviceid();

    /**
     * <pre>
     *设备子通道 这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
     * </pre>
     *
     * <code>fixed32 subid = 2;</code>
     */
    int getSubid();

    /**
     * <pre>
     *播放标志 参见Interface_Macro.proto Pb_MeetPlayFlag
     * </pre>
     *
     * <code>fixed32 playflag = 3;</code>
     */
    int getPlayflag();

    /**
     * <pre>
     *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
     * </pre>
     *
     * <code>fixed32 triggeruserval = 4;</code>
     */
    int getTriggeruserval();

    /**
     * <pre>
     *播放所用的资源,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 res = 5;</code>
     */
    java.util.List<java.lang.Integer> getResList();
    /**
     * <pre>
     *播放所用的资源,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 res = 5;</code>
     */
    int getResCount();
    /**
     * <pre>
     *播放所用的资源,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 res = 5;</code>
     */
    int getRes(int index);

    /**
     * <pre>
     *通知的目标设备,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 deviceid = 6;</code>
     */
    java.util.List<java.lang.Integer> getDeviceidList();
    /**
     * <pre>
     *通知的目标设备,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 deviceid = 6;</code>
     */
    int getDeviceidCount();
    /**
     * <pre>
     *通知的目标设备,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 deviceid = 6;</code>
     */
    int getDeviceid(int index);
  }
  /**
   * <pre>
   *流播放
   *type:Pb_TYPE_MEET_INTERFACE_STREAMPLAY
   *call
   *method: start
   * </pre>
   *
   * Protobuf type {@code pbui_Type_MeetDoStreamPlay}
   */
  public  static final class pbui_Type_MeetDoStreamPlay extends
      com.google.protobuf.GeneratedMessageLite<
          pbui_Type_MeetDoStreamPlay, pbui_Type_MeetDoStreamPlay.Builder> implements
      // @@protoc_insertion_point(message_implements:pbui_Type_MeetDoStreamPlay)
      pbui_Type_MeetDoStreamPlayOrBuilder {
    private pbui_Type_MeetDoStreamPlay() {
      res_ = emptyIntList();
      deviceid_ = emptyIntList();
    }
    private int bitField0_;
    public static final int SRCDEVICEID_FIELD_NUMBER = 1;
    private int srcdeviceid_;
    /**
     * <pre>
     *设备ID 采集端的设备ID
     * </pre>
     *
     * <code>fixed32 srcdeviceid = 1;</code>
     */
    public int getSrcdeviceid() {
      return srcdeviceid_;
    }
    /**
     * <pre>
     *设备ID 采集端的设备ID
     * </pre>
     *
     * <code>fixed32 srcdeviceid = 1;</code>
     */
    private void setSrcdeviceid(int value) {
      
      srcdeviceid_ = value;
    }
    /**
     * <pre>
     *设备ID 采集端的设备ID
     * </pre>
     *
     * <code>fixed32 srcdeviceid = 1;</code>
     */
    private void clearSrcdeviceid() {
      
      srcdeviceid_ = 0;
    }

    public static final int SUBID_FIELD_NUMBER = 2;
    private int subid_;
    /**
     * <pre>
     *设备子通道 这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
     * </pre>
     *
     * <code>fixed32 subid = 2;</code>
     */
    public int getSubid() {
      return subid_;
    }
    /**
     * <pre>
     *设备子通道 这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
     * </pre>
     *
     * <code>fixed32 subid = 2;</code>
     */
    private void setSubid(int value) {
      
      subid_ = value;
    }
    /**
     * <pre>
     *设备子通道 这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
     * </pre>
     *
     * <code>fixed32 subid = 2;</code>
     */
    private void clearSubid() {
      
      subid_ = 0;
    }

    public static final int PLAYFLAG_FIELD_NUMBER = 3;
    private int playflag_;
    /**
     * <pre>
     *播放标志 参见Interface_Macro.proto Pb_MeetPlayFlag
     * </pre>
     *
     * <code>fixed32 playflag = 3;</code>
     */
    public int getPlayflag() {
      return playflag_;
    }
    /**
     * <pre>
     *播放标志 参见Interface_Macro.proto Pb_MeetPlayFlag
     * </pre>
     *
     * <code>fixed32 playflag = 3;</code>
     */
    private void setPlayflag(int value) {
      
      playflag_ = value;
    }
    /**
     * <pre>
     *播放标志 参见Interface_Macro.proto Pb_MeetPlayFlag
     * </pre>
     *
     * <code>fixed32 playflag = 3;</code>
     */
    private void clearPlayflag() {
      
      playflag_ = 0;
    }

    public static final int TRIGGERUSERVAL_FIELD_NUMBER = 4;
    private int triggeruserval_;
    /**
     * <pre>
     *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
     * </pre>
     *
     * <code>fixed32 triggeruserval = 4;</code>
     */
    public int getTriggeruserval() {
      return triggeruserval_;
    }
    /**
     * <pre>
     *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
     * </pre>
     *
     * <code>fixed32 triggeruserval = 4;</code>
     */
    private void setTriggeruserval(int value) {
      
      triggeruserval_ = value;
    }
    /**
     * <pre>
     *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
     * </pre>
     *
     * <code>fixed32 triggeruserval = 4;</code>
     */
    private void clearTriggeruserval() {
      
      triggeruserval_ = 0;
    }

    public static final int RES_FIELD_NUMBER = 5;
    private com.google.protobuf.Internal.IntList res_;
    /**
     * <pre>
     *播放所用的资源,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 res = 5;</code>
     */
    public java.util.List<java.lang.Integer>
        getResList() {
      return res_;
    }
    /**
     * <pre>
     *播放所用的资源,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 res = 5;</code>
     */
    public int getResCount() {
      return res_.size();
    }
    /**
     * <pre>
     *播放所用的资源,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 res = 5;</code>
     */
    public int getRes(int index) {
      return res_.getInt(index);
    }
    private void ensureResIsMutable() {
      if (!res_.isModifiable()) {
        res_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(res_);
       }
    }
    /**
     * <pre>
     *播放所用的资源,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 res = 5;</code>
     */
    private void setRes(
        int index, int value) {
      ensureResIsMutable();
      res_.setInt(index, value);
    }
    /**
     * <pre>
     *播放所用的资源,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 res = 5;</code>
     */
    private void addRes(int value) {
      ensureResIsMutable();
      res_.addInt(value);
    }
    /**
     * <pre>
     *播放所用的资源,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 res = 5;</code>
     */
    private void addAllRes(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureResIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, res_);
    }
    /**
     * <pre>
     *播放所用的资源,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 res = 5;</code>
     */
    private void clearRes() {
      res_ = emptyIntList();
    }

    public static final int DEVICEID_FIELD_NUMBER = 6;
    private com.google.protobuf.Internal.IntList deviceid_;
    /**
     * <pre>
     *通知的目标设备,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 deviceid = 6;</code>
     */
    public java.util.List<java.lang.Integer>
        getDeviceidList() {
      return deviceid_;
    }
    /**
     * <pre>
     *通知的目标设备,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 deviceid = 6;</code>
     */
    public int getDeviceidCount() {
      return deviceid_.size();
    }
    /**
     * <pre>
     *通知的目标设备,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 deviceid = 6;</code>
     */
    public int getDeviceid(int index) {
      return deviceid_.getInt(index);
    }
    private void ensureDeviceidIsMutable() {
      if (!deviceid_.isModifiable()) {
        deviceid_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(deviceid_);
       }
    }
    /**
     * <pre>
     *通知的目标设备,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 deviceid = 6;</code>
     */
    private void setDeviceid(
        int index, int value) {
      ensureDeviceidIsMutable();
      deviceid_.setInt(index, value);
    }
    /**
     * <pre>
     *通知的目标设备,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 deviceid = 6;</code>
     */
    private void addDeviceid(int value) {
      ensureDeviceidIsMutable();
      deviceid_.addInt(value);
    }
    /**
     * <pre>
     *通知的目标设备,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 deviceid = 6;</code>
     */
    private void addAllDeviceid(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureDeviceidIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, deviceid_);
    }
    /**
     * <pre>
     *通知的目标设备,为空表示全部
     * </pre>
     *
     * <code>repeated fixed32 deviceid = 6;</code>
     */
    private void clearDeviceid() {
      deviceid_ = emptyIntList();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (srcdeviceid_ != 0) {
        output.writeFixed32(1, srcdeviceid_);
      }
      if (subid_ != 0) {
        output.writeFixed32(2, subid_);
      }
      if (playflag_ != 0) {
        output.writeFixed32(3, playflag_);
      }
      if (triggeruserval_ != 0) {
        output.writeFixed32(4, triggeruserval_);
      }
      for (int i = 0; i < res_.size(); i++) {
        output.writeFixed32(5, res_.getInt(i));
      }
      for (int i = 0; i < deviceid_.size(); i++) {
        output.writeFixed32(6, deviceid_.getInt(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (srcdeviceid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, srcdeviceid_);
      }
      if (subid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(2, subid_);
      }
      if (playflag_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(3, playflag_);
      }
      if (triggeruserval_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(4, triggeruserval_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getResList().size();
        size += dataSize;
        size += 1 * getResList().size();
      }
      {
        int dataSize = 0;
        dataSize = 4 * getDeviceidList().size();
        size += dataSize;
        size += 1 * getDeviceidList().size();
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoStreamPlay parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoStreamPlay parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoStreamPlay parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoStreamPlay parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoStreamPlay parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoStreamPlay parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoStreamPlay parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoStreamPlay parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoStreamPlay parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoStreamPlay parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoStreamPlay parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoStreamPlay parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoStreamPlay prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     *流播放
     *type:Pb_TYPE_MEET_INTERFACE_STREAMPLAY
     *call
     *method: start
     * </pre>
     *
     * Protobuf type {@code pbui_Type_MeetDoStreamPlay}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoStreamPlay, Builder> implements
        // @@protoc_insertion_point(builder_implements:pbui_Type_MeetDoStreamPlay)
        com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoStreamPlayOrBuilder {
      // Construct using com.mogujie.tt.com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoStreamPlay.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *设备ID 采集端的设备ID
       * </pre>
       *
       * <code>fixed32 srcdeviceid = 1;</code>
       */
      public int getSrcdeviceid() {
        return instance.getSrcdeviceid();
      }
      /**
       * <pre>
       *设备ID 采集端的设备ID
       * </pre>
       *
       * <code>fixed32 srcdeviceid = 1;</code>
       */
      public Builder setSrcdeviceid(int value) {
        copyOnWrite();
        instance.setSrcdeviceid(value);
        return this;
      }
      /**
       * <pre>
       *设备ID 采集端的设备ID
       * </pre>
       *
       * <code>fixed32 srcdeviceid = 1;</code>
       */
      public Builder clearSrcdeviceid() {
        copyOnWrite();
        instance.clearSrcdeviceid();
        return this;
      }

      /**
       * <pre>
       *设备子通道 这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
       * </pre>
       *
       * <code>fixed32 subid = 2;</code>
       */
      public int getSubid() {
        return instance.getSubid();
      }
      /**
       * <pre>
       *设备子通道 这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
       * </pre>
       *
       * <code>fixed32 subid = 2;</code>
       */
      public Builder setSubid(int value) {
        copyOnWrite();
        instance.setSubid(value);
        return this;
      }
      /**
       * <pre>
       *设备子通道 这个是设备注册的流通索引 eg:如设置的桌面流通索引是2 摄像流通道是3
       * </pre>
       *
       * <code>fixed32 subid = 2;</code>
       */
      public Builder clearSubid() {
        copyOnWrite();
        instance.clearSubid();
        return this;
      }

      /**
       * <pre>
       *播放标志 参见Interface_Macro.proto Pb_MeetPlayFlag
       * </pre>
       *
       * <code>fixed32 playflag = 3;</code>
       */
      public int getPlayflag() {
        return instance.getPlayflag();
      }
      /**
       * <pre>
       *播放标志 参见Interface_Macro.proto Pb_MeetPlayFlag
       * </pre>
       *
       * <code>fixed32 playflag = 3;</code>
       */
      public Builder setPlayflag(int value) {
        copyOnWrite();
        instance.setPlayflag(value);
        return this;
      }
      /**
       * <pre>
       *播放标志 参见Interface_Macro.proto Pb_MeetPlayFlag
       * </pre>
       *
       * <code>fixed32 playflag = 3;</code>
       */
      public Builder clearPlayflag() {
        copyOnWrite();
        instance.clearPlayflag();
        return this;
      }

      /**
       * <pre>
       *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
       * </pre>
       *
       * <code>fixed32 triggeruserval = 4;</code>
       */
      public int getTriggeruserval() {
        return instance.getTriggeruserval();
      }
      /**
       * <pre>
       *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
       * </pre>
       *
       * <code>fixed32 triggeruserval = 4;</code>
       */
      public Builder setTriggeruserval(int value) {
        copyOnWrite();
        instance.setTriggeruserval(value);
        return this;
      }
      /**
       * <pre>
       *参见Interface_Macro.proto文件中的Pb_TriggerUsedef定义
       * </pre>
       *
       * <code>fixed32 triggeruserval = 4;</code>
       */
      public Builder clearTriggeruserval() {
        copyOnWrite();
        instance.clearTriggeruserval();
        return this;
      }

      /**
       * <pre>
       *播放所用的资源,为空表示全部
       * </pre>
       *
       * <code>repeated fixed32 res = 5;</code>
       */
      public java.util.List<java.lang.Integer>
          getResList() {
        return java.util.Collections.unmodifiableList(
            instance.getResList());
      }
      /**
       * <pre>
       *播放所用的资源,为空表示全部
       * </pre>
       *
       * <code>repeated fixed32 res = 5;</code>
       */
      public int getResCount() {
        return instance.getResCount();
      }
      /**
       * <pre>
       *播放所用的资源,为空表示全部
       * </pre>
       *
       * <code>repeated fixed32 res = 5;</code>
       */
      public int getRes(int index) {
        return instance.getRes(index);
      }
      /**
       * <pre>
       *播放所用的资源,为空表示全部
       * </pre>
       *
       * <code>repeated fixed32 res = 5;</code>
       */
      public Builder setRes(
          int index, int value) {
        copyOnWrite();
        instance.setRes(index, value);
        return this;
      }
      /**
       * <pre>
       *播放所用的资源,为空表示全部
       * </pre>
       *
       * <code>repeated fixed32 res = 5;</code>
       */
      public Builder addRes(int value) {
        copyOnWrite();
        instance.addRes(value);
        return this;
      }
      /**
       * <pre>
       *播放所用的资源,为空表示全部
       * </pre>
       *
       * <code>repeated fixed32 res = 5;</code>
       */
      public Builder addAllRes(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllRes(values);
        return this;
      }
      /**
       * <pre>
       *播放所用的资源,为空表示全部
       * </pre>
       *
       * <code>repeated fixed32 res = 5;</code>
       */
      public Builder clearRes() {
        copyOnWrite();
        instance.clearRes();
        return this;
      }

      /**
       * <pre>
       *通知的目标设备,为空表示全部
       * </pre>
       *
       * <code>repeated fixed32 deviceid = 6;</code>
       */
      public java.util.List<java.lang.Integer>
          getDeviceidList() {
        return java.util.Collections.unmodifiableList(
            instance.getDeviceidList());
      }
      /**
       * <pre>
       *通知的目标设备,为空表示全部
       * </pre>
       *
       * <code>repeated fixed32 deviceid = 6;</code>
       */
      public int getDeviceidCount() {
        return instance.getDeviceidCount();
      }
      /**
       * <pre>
       *通知的目标设备,为空表示全部
       * </pre>
       *
       * <code>repeated fixed32 deviceid = 6;</code>
       */
      public int getDeviceid(int index) {
        return instance.getDeviceid(index);
      }
      /**
       * <pre>
       *通知的目标设备,为空表示全部
       * </pre>
       *
       * <code>repeated fixed32 deviceid = 6;</code>
       */
      public Builder setDeviceid(
          int index, int value) {
        copyOnWrite();
        instance.setDeviceid(index, value);
        return this;
      }
      /**
       * <pre>
       *通知的目标设备,为空表示全部
       * </pre>
       *
       * <code>repeated fixed32 deviceid = 6;</code>
       */
      public Builder addDeviceid(int value) {
        copyOnWrite();
        instance.addDeviceid(value);
        return this;
      }
      /**
       * <pre>
       *通知的目标设备,为空表示全部
       * </pre>
       *
       * <code>repeated fixed32 deviceid = 6;</code>
       */
      public Builder addAllDeviceid(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllDeviceid(values);
        return this;
      }
      /**
       * <pre>
       *通知的目标设备,为空表示全部
       * </pre>
       *
       * <code>repeated fixed32 deviceid = 6;</code>
       */
      public Builder clearDeviceid() {
        copyOnWrite();
        instance.clearDeviceid();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pbui_Type_MeetDoStreamPlay)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoStreamPlay();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          res_.makeImmutable();
          deviceid_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoStreamPlay other = (com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoStreamPlay) arg1;
          srcdeviceid_ = visitor.visitInt(srcdeviceid_ != 0, srcdeviceid_,
              other.srcdeviceid_ != 0, other.srcdeviceid_);
          subid_ = visitor.visitInt(subid_ != 0, subid_,
              other.subid_ != 0, other.subid_);
          playflag_ = visitor.visitInt(playflag_ != 0, playflag_,
              other.playflag_ != 0, other.playflag_);
          triggeruserval_ = visitor.visitInt(triggeruserval_ != 0, triggeruserval_,
              other.triggeruserval_ != 0, other.triggeruserval_);
          res_= visitor.visitIntList(res_, other.res_);
          deviceid_= visitor.visitIntList(deviceid_, other.deviceid_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 13: {

                  srcdeviceid_ = input.readFixed32();
                  break;
                }
                case 21: {

                  subid_ = input.readFixed32();
                  break;
                }
                case 29: {

                  playflag_ = input.readFixed32();
                  break;
                }
                case 37: {

                  triggeruserval_ = input.readFixed32();
                  break;
                }
                case 45: {
                  if (!res_.isModifiable()) {
                    res_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(res_);
                  }
                  res_.addInt(input.readFixed32());
                  break;
                }
                case 42: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  if (!res_.isModifiable() && input.getBytesUntilLimit() > 0) {
                    final int currentSize = res_.size();
                    res_ = res_.mutableCopyWithCapacity(
                        currentSize + (length/4));
                  }
                  while (input.getBytesUntilLimit() > 0) {
                    res_.addInt(input.readFixed32());
                  }
                  input.popLimit(limit);
                  break;
                }
                case 53: {
                  if (!deviceid_.isModifiable()) {
                    deviceid_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(deviceid_);
                  }
                  deviceid_.addInt(input.readFixed32());
                  break;
                }
                case 50: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  if (!deviceid_.isModifiable() && input.getBytesUntilLimit() > 0) {
                    final int currentSize = deviceid_.size();
                    deviceid_ = deviceid_.mutableCopyWithCapacity(
                        currentSize + (length/4));
                  }
                  while (input.getBytesUntilLimit() > 0) {
                    deviceid_.addInt(input.readFixed32());
                  }
                  input.popLimit(limit);
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoStreamPlay.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pbui_Type_MeetDoStreamPlay)
    private static final com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoStreamPlay DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pbui_Type_MeetDoStreamPlay();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoStreamPlay getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<pbui_Type_MeetDoStreamPlay> PARSER;

    public static com.google.protobuf.Parser<pbui_Type_MeetDoStreamPlay> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface pbui_Item_MeetStreamPlayDetailInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pbui_Item_MeetStreamPlayDetailInfo)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *触发器ID
     * </pre>
     *
     * <code>fixed32 trrigerid = 1;</code>
     */
    int getTrrigerid();

    /**
     * <pre>
     *设备ID
     * </pre>
     *
     * <code>fixed32 deviceid = 2;</code>
     */
    int getDeviceid();

    /**
     * <pre>
     *设备子通道
     * </pre>
     *
     * <code>fixed32 subid = 3;</code>
     */
    int getSubid();
  }
  /**
   * <pre>
   *查询流播放
   * </pre>
   *
   * Protobuf type {@code pbui_Item_MeetStreamPlayDetailInfo}
   */
  public  static final class pbui_Item_MeetStreamPlayDetailInfo extends
      com.google.protobuf.GeneratedMessageLite<
          pbui_Item_MeetStreamPlayDetailInfo, pbui_Item_MeetStreamPlayDetailInfo.Builder> implements
      // @@protoc_insertion_point(message_implements:pbui_Item_MeetStreamPlayDetailInfo)
      pbui_Item_MeetStreamPlayDetailInfoOrBuilder {
    private pbui_Item_MeetStreamPlayDetailInfo() {
    }
    public static final int TRRIGERID_FIELD_NUMBER = 1;
    private int trrigerid_;
    /**
     * <pre>
     *触发器ID
     * </pre>
     *
     * <code>fixed32 trrigerid = 1;</code>
     */
    public int getTrrigerid() {
      return trrigerid_;
    }
    /**
     * <pre>
     *触发器ID
     * </pre>
     *
     * <code>fixed32 trrigerid = 1;</code>
     */
    private void setTrrigerid(int value) {
      
      trrigerid_ = value;
    }
    /**
     * <pre>
     *触发器ID
     * </pre>
     *
     * <code>fixed32 trrigerid = 1;</code>
     */
    private void clearTrrigerid() {
      
      trrigerid_ = 0;
    }

    public static final int DEVICEID_FIELD_NUMBER = 2;
    private int deviceid_;
    /**
     * <pre>
     *设备ID
     * </pre>
     *
     * <code>fixed32 deviceid = 2;</code>
     */
    public int getDeviceid() {
      return deviceid_;
    }
    /**
     * <pre>
     *设备ID
     * </pre>
     *
     * <code>fixed32 deviceid = 2;</code>
     */
    private void setDeviceid(int value) {
      
      deviceid_ = value;
    }
    /**
     * <pre>
     *设备ID
     * </pre>
     *
     * <code>fixed32 deviceid = 2;</code>
     */
    private void clearDeviceid() {
      
      deviceid_ = 0;
    }

    public static final int SUBID_FIELD_NUMBER = 3;
    private int subid_;
    /**
     * <pre>
     *设备子通道
     * </pre>
     *
     * <code>fixed32 subid = 3;</code>
     */
    public int getSubid() {
      return subid_;
    }
    /**
     * <pre>
     *设备子通道
     * </pre>
     *
     * <code>fixed32 subid = 3;</code>
     */
    private void setSubid(int value) {
      
      subid_ = value;
    }
    /**
     * <pre>
     *设备子通道
     * </pre>
     *
     * <code>fixed32 subid = 3;</code>
     */
    private void clearSubid() {
      
      subid_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (trrigerid_ != 0) {
        output.writeFixed32(1, trrigerid_);
      }
      if (deviceid_ != 0) {
        output.writeFixed32(2, deviceid_);
      }
      if (subid_ != 0) {
        output.writeFixed32(3, subid_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (trrigerid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, trrigerid_);
      }
      if (deviceid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(2, deviceid_);
      }
      if (subid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(3, subid_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     *查询流播放
     * </pre>
     *
     * Protobuf type {@code pbui_Item_MeetStreamPlayDetailInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo, Builder> implements
        // @@protoc_insertion_point(builder_implements:pbui_Item_MeetStreamPlayDetailInfo)
        com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfoOrBuilder {
      // Construct using com.mogujie.tt.com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *触发器ID
       * </pre>
       *
       * <code>fixed32 trrigerid = 1;</code>
       */
      public int getTrrigerid() {
        return instance.getTrrigerid();
      }
      /**
       * <pre>
       *触发器ID
       * </pre>
       *
       * <code>fixed32 trrigerid = 1;</code>
       */
      public Builder setTrrigerid(int value) {
        copyOnWrite();
        instance.setTrrigerid(value);
        return this;
      }
      /**
       * <pre>
       *触发器ID
       * </pre>
       *
       * <code>fixed32 trrigerid = 1;</code>
       */
      public Builder clearTrrigerid() {
        copyOnWrite();
        instance.clearTrrigerid();
        return this;
      }

      /**
       * <pre>
       *设备ID
       * </pre>
       *
       * <code>fixed32 deviceid = 2;</code>
       */
      public int getDeviceid() {
        return instance.getDeviceid();
      }
      /**
       * <pre>
       *设备ID
       * </pre>
       *
       * <code>fixed32 deviceid = 2;</code>
       */
      public Builder setDeviceid(int value) {
        copyOnWrite();
        instance.setDeviceid(value);
        return this;
      }
      /**
       * <pre>
       *设备ID
       * </pre>
       *
       * <code>fixed32 deviceid = 2;</code>
       */
      public Builder clearDeviceid() {
        copyOnWrite();
        instance.clearDeviceid();
        return this;
      }

      /**
       * <pre>
       *设备子通道
       * </pre>
       *
       * <code>fixed32 subid = 3;</code>
       */
      public int getSubid() {
        return instance.getSubid();
      }
      /**
       * <pre>
       *设备子通道
       * </pre>
       *
       * <code>fixed32 subid = 3;</code>
       */
      public Builder setSubid(int value) {
        copyOnWrite();
        instance.setSubid(value);
        return this;
      }
      /**
       * <pre>
       *设备子通道
       * </pre>
       *
       * <code>fixed32 subid = 3;</code>
       */
      public Builder clearSubid() {
        copyOnWrite();
        instance.clearSubid();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pbui_Item_MeetStreamPlayDetailInfo)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo other = (com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo) arg1;
          trrigerid_ = visitor.visitInt(trrigerid_ != 0, trrigerid_,
              other.trrigerid_ != 0, other.trrigerid_);
          deviceid_ = visitor.visitInt(deviceid_ != 0, deviceid_,
              other.deviceid_ != 0, other.deviceid_);
          subid_ = visitor.visitInt(subid_ != 0, subid_,
              other.subid_ != 0, other.subid_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 13: {

                  trrigerid_ = input.readFixed32();
                  break;
                }
                case 21: {

                  deviceid_ = input.readFixed32();
                  break;
                }
                case 29: {

                  subid_ = input.readFixed32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pbui_Item_MeetStreamPlayDetailInfo)
    private static final com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pbui_Item_MeetStreamPlayDetailInfo();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<pbui_Item_MeetStreamPlayDetailInfo> PARSER;

    public static com.google.protobuf.Parser<pbui_Item_MeetStreamPlayDetailInfo> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface pbui_Type_MeetStreamPlayDetailInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pbui_Type_MeetStreamPlayDetailInfo)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .pbui_Item_MeetStreamPlayDetailInfo item = 1;</code>
     */
    java.util.List<com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo> 
        getItemList();
    /**
     * <code>repeated .pbui_Item_MeetStreamPlayDetailInfo item = 1;</code>
     */
    com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo getItem(int index);
    /**
     * <code>repeated .pbui_Item_MeetStreamPlayDetailInfo item = 1;</code>
     */
    int getItemCount();
  }
  /**
   * <pre>
   *type:Pb_TYPE_MEET_INTERFACE_STREAMPLAY
   *method: query/
   * </pre>
   *
   * Protobuf type {@code pbui_Type_MeetStreamPlayDetailInfo}
   */
  public  static final class pbui_Type_MeetStreamPlayDetailInfo extends
      com.google.protobuf.GeneratedMessageLite<
          pbui_Type_MeetStreamPlayDetailInfo, pbui_Type_MeetStreamPlayDetailInfo.Builder> implements
      // @@protoc_insertion_point(message_implements:pbui_Type_MeetStreamPlayDetailInfo)
      pbui_Type_MeetStreamPlayDetailInfoOrBuilder {
    private pbui_Type_MeetStreamPlayDetailInfo() {
      item_ = emptyProtobufList();
    }
    public static final int ITEM_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo> item_;
    /**
     * <code>repeated .pbui_Item_MeetStreamPlayDetailInfo item = 1;</code>
     */
    public java.util.List<com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo> getItemList() {
      return item_;
    }
    /**
     * <code>repeated .pbui_Item_MeetStreamPlayDetailInfo item = 1;</code>
     */
    public java.util.List<? extends com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfoOrBuilder> 
        getItemOrBuilderList() {
      return item_;
    }
    /**
     * <code>repeated .pbui_Item_MeetStreamPlayDetailInfo item = 1;</code>
     */
    public int getItemCount() {
      return item_.size();
    }
    /**
     * <code>repeated .pbui_Item_MeetStreamPlayDetailInfo item = 1;</code>
     */
    public com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo getItem(int index) {
      return item_.get(index);
    }
    /**
     * <code>repeated .pbui_Item_MeetStreamPlayDetailInfo item = 1;</code>
     */
    public com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfoOrBuilder getItemOrBuilder(
        int index) {
      return item_.get(index);
    }
    private void ensureItemIsMutable() {
      if (!item_.isModifiable()) {
        item_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(item_);
       }
    }

    /**
     * <code>repeated .pbui_Item_MeetStreamPlayDetailInfo item = 1;</code>
     */
    private void setItem(
        int index, com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureItemIsMutable();
      item_.set(index, value);
    }
    /**
     * <code>repeated .pbui_Item_MeetStreamPlayDetailInfo item = 1;</code>
     */
    private void setItem(
        int index, com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo.Builder builderForValue) {
      ensureItemIsMutable();
      item_.set(index, builderForValue.build());
    }
    /**
     * <code>repeated .pbui_Item_MeetStreamPlayDetailInfo item = 1;</code>
     */
    private void addItem(com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureItemIsMutable();
      item_.add(value);
    }
    /**
     * <code>repeated .pbui_Item_MeetStreamPlayDetailInfo item = 1;</code>
     */
    private void addItem(
        int index, com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureItemIsMutable();
      item_.add(index, value);
    }
    /**
     * <code>repeated .pbui_Item_MeetStreamPlayDetailInfo item = 1;</code>
     */
    private void addItem(
        com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo.Builder builderForValue) {
      ensureItemIsMutable();
      item_.add(builderForValue.build());
    }
    /**
     * <code>repeated .pbui_Item_MeetStreamPlayDetailInfo item = 1;</code>
     */
    private void addItem(
        int index, com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo.Builder builderForValue) {
      ensureItemIsMutable();
      item_.add(index, builderForValue.build());
    }
    /**
     * <code>repeated .pbui_Item_MeetStreamPlayDetailInfo item = 1;</code>
     */
    private void addAllItem(
        java.lang.Iterable<? extends com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo> values) {
      ensureItemIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, item_);
    }
    /**
     * <code>repeated .pbui_Item_MeetStreamPlayDetailInfo item = 1;</code>
     */
    private void clearItem() {
      item_ = emptyProtobufList();
    }
    /**
     * <code>repeated .pbui_Item_MeetStreamPlayDetailInfo item = 1;</code>
     */
    private void removeItem(int index) {
      ensureItemIsMutable();
      item_.remove(index);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < item_.size(); i++) {
        output.writeMessage(1, item_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < item_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, item_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlayDetailInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlayDetailInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlayDetailInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlayDetailInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlayDetailInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlayDetailInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlayDetailInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlayDetailInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlayDetailInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlayDetailInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlayDetailInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlayDetailInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlayDetailInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     *type:Pb_TYPE_MEET_INTERFACE_STREAMPLAY
     *method: query/
     * </pre>
     *
     * Protobuf type {@code pbui_Type_MeetStreamPlayDetailInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlayDetailInfo, Builder> implements
        // @@protoc_insertion_point(builder_implements:pbui_Type_MeetStreamPlayDetailInfo)
        com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlayDetailInfoOrBuilder {
      // Construct using com.mogujie.tt.com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlayDetailInfo.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated .pbui_Item_MeetStreamPlayDetailInfo item = 1;</code>
       */
      public java.util.List<com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo> getItemList() {
        return java.util.Collections.unmodifiableList(
            instance.getItemList());
      }
      /**
       * <code>repeated .pbui_Item_MeetStreamPlayDetailInfo item = 1;</code>
       */
      public int getItemCount() {
        return instance.getItemCount();
      }/**
       * <code>repeated .pbui_Item_MeetStreamPlayDetailInfo item = 1;</code>
       */
      public com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo getItem(int index) {
        return instance.getItem(index);
      }
      /**
       * <code>repeated .pbui_Item_MeetStreamPlayDetailInfo item = 1;</code>
       */
      public Builder setItem(
          int index, com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo value) {
        copyOnWrite();
        instance.setItem(index, value);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetStreamPlayDetailInfo item = 1;</code>
       */
      public Builder setItem(
          int index, com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo.Builder builderForValue) {
        copyOnWrite();
        instance.setItem(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetStreamPlayDetailInfo item = 1;</code>
       */
      public Builder addItem(com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo value) {
        copyOnWrite();
        instance.addItem(value);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetStreamPlayDetailInfo item = 1;</code>
       */
      public Builder addItem(
          int index, com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo value) {
        copyOnWrite();
        instance.addItem(index, value);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetStreamPlayDetailInfo item = 1;</code>
       */
      public Builder addItem(
          com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo.Builder builderForValue) {
        copyOnWrite();
        instance.addItem(builderForValue);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetStreamPlayDetailInfo item = 1;</code>
       */
      public Builder addItem(
          int index, com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo.Builder builderForValue) {
        copyOnWrite();
        instance.addItem(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetStreamPlayDetailInfo item = 1;</code>
       */
      public Builder addAllItem(
          java.lang.Iterable<? extends com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo> values) {
        copyOnWrite();
        instance.addAllItem(values);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetStreamPlayDetailInfo item = 1;</code>
       */
      public Builder clearItem() {
        copyOnWrite();
        instance.clearItem();
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetStreamPlayDetailInfo item = 1;</code>
       */
      public Builder removeItem(int index) {
        copyOnWrite();
        instance.removeItem(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pbui_Type_MeetStreamPlayDetailInfo)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlayDetailInfo();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          item_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlayDetailInfo other = (com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlayDetailInfo) arg1;
          item_= visitor.visitList(item_, other.item_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  if (!item_.isModifiable()) {
                    item_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(item_);
                  }
                  item_.add(
                      input.readMessage(com.mogujie.tt.protobuf.InterfaceStream.pbui_Item_MeetStreamPlayDetailInfo.parser(), extensionRegistry));
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlayDetailInfo.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pbui_Type_MeetStreamPlayDetailInfo)
    private static final com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlayDetailInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pbui_Type_MeetStreamPlayDetailInfo();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetStreamPlayDetailInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<pbui_Type_MeetStreamPlayDetailInfo> PARSER;

    public static com.google.protobuf.Parser<pbui_Type_MeetStreamPlayDetailInfo> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface pbui_Type_MeetScreenMouseControlOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pbui_Type_MeetScreenMouseControl)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *控制的标志  参考streamcontrol.h 定义
     * </pre>
     *
     * <code>fixed32 flag = 1;</code>
     */
    int getFlag();

    /**
     * <pre>
     *发起请求的设备ID
     * </pre>
     *
     * <code>fixed32 deviceid = 2;</code>
     */
    int getDeviceid();

    /**
     * <pre>
     *发起请求的人员ID
     * </pre>
     *
     * <code>fixed32 memberid = 3;</code>
     */
    int getMemberid();

    /**
     * <pre>
     *x% width的百分
     * </pre>
     *
     * <code>float x = 4;</code>
     */
    float getX();

    /**
     * <pre>
     *y% height的百分
     * </pre>
     *
     * <code>float y = 5;</code>
     */
    float getY();
  }
  /**
   * <pre>
   *&#47;////////////////////////////////////////////////////////////////////////////
   *屏幕鼠标控制
   *callback
   *method: notify
   * </pre>
   *
   * Protobuf type {@code pbui_Type_MeetScreenMouseControl}
   */
  public  static final class pbui_Type_MeetScreenMouseControl extends
      com.google.protobuf.GeneratedMessageLite<
          pbui_Type_MeetScreenMouseControl, pbui_Type_MeetScreenMouseControl.Builder> implements
      // @@protoc_insertion_point(message_implements:pbui_Type_MeetScreenMouseControl)
      pbui_Type_MeetScreenMouseControlOrBuilder {
    private pbui_Type_MeetScreenMouseControl() {
    }
    public static final int FLAG_FIELD_NUMBER = 1;
    private int flag_;
    /**
     * <pre>
     *控制的标志  参考streamcontrol.h 定义
     * </pre>
     *
     * <code>fixed32 flag = 1;</code>
     */
    public int getFlag() {
      return flag_;
    }
    /**
     * <pre>
     *控制的标志  参考streamcontrol.h 定义
     * </pre>
     *
     * <code>fixed32 flag = 1;</code>
     */
    private void setFlag(int value) {
      
      flag_ = value;
    }
    /**
     * <pre>
     *控制的标志  参考streamcontrol.h 定义
     * </pre>
     *
     * <code>fixed32 flag = 1;</code>
     */
    private void clearFlag() {
      
      flag_ = 0;
    }

    public static final int DEVICEID_FIELD_NUMBER = 2;
    private int deviceid_;
    /**
     * <pre>
     *发起请求的设备ID
     * </pre>
     *
     * <code>fixed32 deviceid = 2;</code>
     */
    public int getDeviceid() {
      return deviceid_;
    }
    /**
     * <pre>
     *发起请求的设备ID
     * </pre>
     *
     * <code>fixed32 deviceid = 2;</code>
     */
    private void setDeviceid(int value) {
      
      deviceid_ = value;
    }
    /**
     * <pre>
     *发起请求的设备ID
     * </pre>
     *
     * <code>fixed32 deviceid = 2;</code>
     */
    private void clearDeviceid() {
      
      deviceid_ = 0;
    }

    public static final int MEMBERID_FIELD_NUMBER = 3;
    private int memberid_;
    /**
     * <pre>
     *发起请求的人员ID
     * </pre>
     *
     * <code>fixed32 memberid = 3;</code>
     */
    public int getMemberid() {
      return memberid_;
    }
    /**
     * <pre>
     *发起请求的人员ID
     * </pre>
     *
     * <code>fixed32 memberid = 3;</code>
     */
    private void setMemberid(int value) {
      
      memberid_ = value;
    }
    /**
     * <pre>
     *发起请求的人员ID
     * </pre>
     *
     * <code>fixed32 memberid = 3;</code>
     */
    private void clearMemberid() {
      
      memberid_ = 0;
    }

    public static final int X_FIELD_NUMBER = 4;
    private float x_;
    /**
     * <pre>
     *x% width的百分
     * </pre>
     *
     * <code>float x = 4;</code>
     */
    public float getX() {
      return x_;
    }
    /**
     * <pre>
     *x% width的百分
     * </pre>
     *
     * <code>float x = 4;</code>
     */
    private void setX(float value) {
      
      x_ = value;
    }
    /**
     * <pre>
     *x% width的百分
     * </pre>
     *
     * <code>float x = 4;</code>
     */
    private void clearX() {
      
      x_ = 0F;
    }

    public static final int Y_FIELD_NUMBER = 5;
    private float y_;
    /**
     * <pre>
     *y% height的百分
     * </pre>
     *
     * <code>float y = 5;</code>
     */
    public float getY() {
      return y_;
    }
    /**
     * <pre>
     *y% height的百分
     * </pre>
     *
     * <code>float y = 5;</code>
     */
    private void setY(float value) {
      
      y_ = value;
    }
    /**
     * <pre>
     *y% height的百分
     * </pre>
     *
     * <code>float y = 5;</code>
     */
    private void clearY() {
      
      y_ = 0F;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (flag_ != 0) {
        output.writeFixed32(1, flag_);
      }
      if (deviceid_ != 0) {
        output.writeFixed32(2, deviceid_);
      }
      if (memberid_ != 0) {
        output.writeFixed32(3, memberid_);
      }
      if (x_ != 0F) {
        output.writeFloat(4, x_);
      }
      if (y_ != 0F) {
        output.writeFloat(5, y_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (flag_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, flag_);
      }
      if (deviceid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(2, deviceid_);
      }
      if (memberid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(3, memberid_);
      }
      if (x_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, x_);
      }
      if (y_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, y_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenMouseControl parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenMouseControl parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenMouseControl parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenMouseControl parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenMouseControl parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenMouseControl parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenMouseControl parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenMouseControl parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenMouseControl parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenMouseControl parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenMouseControl parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenMouseControl parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenMouseControl prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     *&#47;////////////////////////////////////////////////////////////////////////////
     *屏幕鼠标控制
     *callback
     *method: notify
     * </pre>
     *
     * Protobuf type {@code pbui_Type_MeetScreenMouseControl}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenMouseControl, Builder> implements
        // @@protoc_insertion_point(builder_implements:pbui_Type_MeetScreenMouseControl)
        com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenMouseControlOrBuilder {
      // Construct using com.mogujie.tt.com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenMouseControl.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *控制的标志  参考streamcontrol.h 定义
       * </pre>
       *
       * <code>fixed32 flag = 1;</code>
       */
      public int getFlag() {
        return instance.getFlag();
      }
      /**
       * <pre>
       *控制的标志  参考streamcontrol.h 定义
       * </pre>
       *
       * <code>fixed32 flag = 1;</code>
       */
      public Builder setFlag(int value) {
        copyOnWrite();
        instance.setFlag(value);
        return this;
      }
      /**
       * <pre>
       *控制的标志  参考streamcontrol.h 定义
       * </pre>
       *
       * <code>fixed32 flag = 1;</code>
       */
      public Builder clearFlag() {
        copyOnWrite();
        instance.clearFlag();
        return this;
      }

      /**
       * <pre>
       *发起请求的设备ID
       * </pre>
       *
       * <code>fixed32 deviceid = 2;</code>
       */
      public int getDeviceid() {
        return instance.getDeviceid();
      }
      /**
       * <pre>
       *发起请求的设备ID
       * </pre>
       *
       * <code>fixed32 deviceid = 2;</code>
       */
      public Builder setDeviceid(int value) {
        copyOnWrite();
        instance.setDeviceid(value);
        return this;
      }
      /**
       * <pre>
       *发起请求的设备ID
       * </pre>
       *
       * <code>fixed32 deviceid = 2;</code>
       */
      public Builder clearDeviceid() {
        copyOnWrite();
        instance.clearDeviceid();
        return this;
      }

      /**
       * <pre>
       *发起请求的人员ID
       * </pre>
       *
       * <code>fixed32 memberid = 3;</code>
       */
      public int getMemberid() {
        return instance.getMemberid();
      }
      /**
       * <pre>
       *发起请求的人员ID
       * </pre>
       *
       * <code>fixed32 memberid = 3;</code>
       */
      public Builder setMemberid(int value) {
        copyOnWrite();
        instance.setMemberid(value);
        return this;
      }
      /**
       * <pre>
       *发起请求的人员ID
       * </pre>
       *
       * <code>fixed32 memberid = 3;</code>
       */
      public Builder clearMemberid() {
        copyOnWrite();
        instance.clearMemberid();
        return this;
      }

      /**
       * <pre>
       *x% width的百分
       * </pre>
       *
       * <code>float x = 4;</code>
       */
      public float getX() {
        return instance.getX();
      }
      /**
       * <pre>
       *x% width的百分
       * </pre>
       *
       * <code>float x = 4;</code>
       */
      public Builder setX(float value) {
        copyOnWrite();
        instance.setX(value);
        return this;
      }
      /**
       * <pre>
       *x% width的百分
       * </pre>
       *
       * <code>float x = 4;</code>
       */
      public Builder clearX() {
        copyOnWrite();
        instance.clearX();
        return this;
      }

      /**
       * <pre>
       *y% height的百分
       * </pre>
       *
       * <code>float y = 5;</code>
       */
      public float getY() {
        return instance.getY();
      }
      /**
       * <pre>
       *y% height的百分
       * </pre>
       *
       * <code>float y = 5;</code>
       */
      public Builder setY(float value) {
        copyOnWrite();
        instance.setY(value);
        return this;
      }
      /**
       * <pre>
       *y% height的百分
       * </pre>
       *
       * <code>float y = 5;</code>
       */
      public Builder clearY() {
        copyOnWrite();
        instance.clearY();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pbui_Type_MeetScreenMouseControl)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenMouseControl();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenMouseControl other = (com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenMouseControl) arg1;
          flag_ = visitor.visitInt(flag_ != 0, flag_,
              other.flag_ != 0, other.flag_);
          deviceid_ = visitor.visitInt(deviceid_ != 0, deviceid_,
              other.deviceid_ != 0, other.deviceid_);
          memberid_ = visitor.visitInt(memberid_ != 0, memberid_,
              other.memberid_ != 0, other.memberid_);
          x_ = visitor.visitFloat(x_ != 0F, x_,
              other.x_ != 0F, other.x_);
          y_ = visitor.visitFloat(y_ != 0F, y_,
              other.y_ != 0F, other.y_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 13: {

                  flag_ = input.readFixed32();
                  break;
                }
                case 21: {

                  deviceid_ = input.readFixed32();
                  break;
                }
                case 29: {

                  memberid_ = input.readFixed32();
                  break;
                }
                case 37: {

                  x_ = input.readFloat();
                  break;
                }
                case 45: {

                  y_ = input.readFloat();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenMouseControl.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pbui_Type_MeetScreenMouseControl)
    private static final com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenMouseControl DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pbui_Type_MeetScreenMouseControl();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenMouseControl getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<pbui_Type_MeetScreenMouseControl> PARSER;

    public static com.google.protobuf.Parser<pbui_Type_MeetScreenMouseControl> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface pbui_Type_MeetDoScreenMouseControlOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pbui_Type_MeetDoScreenMouseControl)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *控制的标志  参考streamcontrol.h 定义
     * </pre>
     *
     * <code>fixed32 flag = 1;</code>
     */
    int getFlag();

    /**
     * <pre>
     *设备ID
     * </pre>
     *
     * <code>fixed32 deviceid = 2;</code>
     */
    int getDeviceid();

    /**
     * <pre>
     *x / width的百分比
     * </pre>
     *
     * <code>float x = 3;</code>
     */
    float getX();

    /**
     * <pre>
     *y / height的百分比
     * </pre>
     *
     * <code>float y = 4;</code>
     */
    float getY();
  }
  /**
   * <pre>
   *屏幕鼠标控制
   *call
   *method: control
   * </pre>
   *
   * Protobuf type {@code pbui_Type_MeetDoScreenMouseControl}
   */
  public  static final class pbui_Type_MeetDoScreenMouseControl extends
      com.google.protobuf.GeneratedMessageLite<
          pbui_Type_MeetDoScreenMouseControl, pbui_Type_MeetDoScreenMouseControl.Builder> implements
      // @@protoc_insertion_point(message_implements:pbui_Type_MeetDoScreenMouseControl)
      pbui_Type_MeetDoScreenMouseControlOrBuilder {
    private pbui_Type_MeetDoScreenMouseControl() {
    }
    public static final int FLAG_FIELD_NUMBER = 1;
    private int flag_;
    /**
     * <pre>
     *控制的标志  参考streamcontrol.h 定义
     * </pre>
     *
     * <code>fixed32 flag = 1;</code>
     */
    public int getFlag() {
      return flag_;
    }
    /**
     * <pre>
     *控制的标志  参考streamcontrol.h 定义
     * </pre>
     *
     * <code>fixed32 flag = 1;</code>
     */
    private void setFlag(int value) {
      
      flag_ = value;
    }
    /**
     * <pre>
     *控制的标志  参考streamcontrol.h 定义
     * </pre>
     *
     * <code>fixed32 flag = 1;</code>
     */
    private void clearFlag() {
      
      flag_ = 0;
    }

    public static final int DEVICEID_FIELD_NUMBER = 2;
    private int deviceid_;
    /**
     * <pre>
     *设备ID
     * </pre>
     *
     * <code>fixed32 deviceid = 2;</code>
     */
    public int getDeviceid() {
      return deviceid_;
    }
    /**
     * <pre>
     *设备ID
     * </pre>
     *
     * <code>fixed32 deviceid = 2;</code>
     */
    private void setDeviceid(int value) {
      
      deviceid_ = value;
    }
    /**
     * <pre>
     *设备ID
     * </pre>
     *
     * <code>fixed32 deviceid = 2;</code>
     */
    private void clearDeviceid() {
      
      deviceid_ = 0;
    }

    public static final int X_FIELD_NUMBER = 3;
    private float x_;
    /**
     * <pre>
     *x / width的百分比
     * </pre>
     *
     * <code>float x = 3;</code>
     */
    public float getX() {
      return x_;
    }
    /**
     * <pre>
     *x / width的百分比
     * </pre>
     *
     * <code>float x = 3;</code>
     */
    private void setX(float value) {
      
      x_ = value;
    }
    /**
     * <pre>
     *x / width的百分比
     * </pre>
     *
     * <code>float x = 3;</code>
     */
    private void clearX() {
      
      x_ = 0F;
    }

    public static final int Y_FIELD_NUMBER = 4;
    private float y_;
    /**
     * <pre>
     *y / height的百分比
     * </pre>
     *
     * <code>float y = 4;</code>
     */
    public float getY() {
      return y_;
    }
    /**
     * <pre>
     *y / height的百分比
     * </pre>
     *
     * <code>float y = 4;</code>
     */
    private void setY(float value) {
      
      y_ = value;
    }
    /**
     * <pre>
     *y / height的百分比
     * </pre>
     *
     * <code>float y = 4;</code>
     */
    private void clearY() {
      
      y_ = 0F;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (flag_ != 0) {
        output.writeFixed32(1, flag_);
      }
      if (deviceid_ != 0) {
        output.writeFixed32(2, deviceid_);
      }
      if (x_ != 0F) {
        output.writeFloat(3, x_);
      }
      if (y_ != 0F) {
        output.writeFloat(4, y_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (flag_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, flag_);
      }
      if (deviceid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(2, deviceid_);
      }
      if (x_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, x_);
      }
      if (y_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, y_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenMouseControl parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenMouseControl parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenMouseControl parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenMouseControl parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenMouseControl parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenMouseControl parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenMouseControl parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenMouseControl parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenMouseControl parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenMouseControl parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenMouseControl parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenMouseControl parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenMouseControl prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     *屏幕鼠标控制
     *call
     *method: control
     * </pre>
     *
     * Protobuf type {@code pbui_Type_MeetDoScreenMouseControl}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenMouseControl, Builder> implements
        // @@protoc_insertion_point(builder_implements:pbui_Type_MeetDoScreenMouseControl)
        com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenMouseControlOrBuilder {
      // Construct using com.mogujie.tt.com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenMouseControl.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *控制的标志  参考streamcontrol.h 定义
       * </pre>
       *
       * <code>fixed32 flag = 1;</code>
       */
      public int getFlag() {
        return instance.getFlag();
      }
      /**
       * <pre>
       *控制的标志  参考streamcontrol.h 定义
       * </pre>
       *
       * <code>fixed32 flag = 1;</code>
       */
      public Builder setFlag(int value) {
        copyOnWrite();
        instance.setFlag(value);
        return this;
      }
      /**
       * <pre>
       *控制的标志  参考streamcontrol.h 定义
       * </pre>
       *
       * <code>fixed32 flag = 1;</code>
       */
      public Builder clearFlag() {
        copyOnWrite();
        instance.clearFlag();
        return this;
      }

      /**
       * <pre>
       *设备ID
       * </pre>
       *
       * <code>fixed32 deviceid = 2;</code>
       */
      public int getDeviceid() {
        return instance.getDeviceid();
      }
      /**
       * <pre>
       *设备ID
       * </pre>
       *
       * <code>fixed32 deviceid = 2;</code>
       */
      public Builder setDeviceid(int value) {
        copyOnWrite();
        instance.setDeviceid(value);
        return this;
      }
      /**
       * <pre>
       *设备ID
       * </pre>
       *
       * <code>fixed32 deviceid = 2;</code>
       */
      public Builder clearDeviceid() {
        copyOnWrite();
        instance.clearDeviceid();
        return this;
      }

      /**
       * <pre>
       *x / width的百分比
       * </pre>
       *
       * <code>float x = 3;</code>
       */
      public float getX() {
        return instance.getX();
      }
      /**
       * <pre>
       *x / width的百分比
       * </pre>
       *
       * <code>float x = 3;</code>
       */
      public Builder setX(float value) {
        copyOnWrite();
        instance.setX(value);
        return this;
      }
      /**
       * <pre>
       *x / width的百分比
       * </pre>
       *
       * <code>float x = 3;</code>
       */
      public Builder clearX() {
        copyOnWrite();
        instance.clearX();
        return this;
      }

      /**
       * <pre>
       *y / height的百分比
       * </pre>
       *
       * <code>float y = 4;</code>
       */
      public float getY() {
        return instance.getY();
      }
      /**
       * <pre>
       *y / height的百分比
       * </pre>
       *
       * <code>float y = 4;</code>
       */
      public Builder setY(float value) {
        copyOnWrite();
        instance.setY(value);
        return this;
      }
      /**
       * <pre>
       *y / height的百分比
       * </pre>
       *
       * <code>float y = 4;</code>
       */
      public Builder clearY() {
        copyOnWrite();
        instance.clearY();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pbui_Type_MeetDoScreenMouseControl)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenMouseControl();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenMouseControl other = (com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenMouseControl) arg1;
          flag_ = visitor.visitInt(flag_ != 0, flag_,
              other.flag_ != 0, other.flag_);
          deviceid_ = visitor.visitInt(deviceid_ != 0, deviceid_,
              other.deviceid_ != 0, other.deviceid_);
          x_ = visitor.visitFloat(x_ != 0F, x_,
              other.x_ != 0F, other.x_);
          y_ = visitor.visitFloat(y_ != 0F, y_,
              other.y_ != 0F, other.y_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 13: {

                  flag_ = input.readFixed32();
                  break;
                }
                case 21: {

                  deviceid_ = input.readFixed32();
                  break;
                }
                case 29: {

                  x_ = input.readFloat();
                  break;
                }
                case 37: {

                  y_ = input.readFloat();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenMouseControl.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pbui_Type_MeetDoScreenMouseControl)
    private static final com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenMouseControl DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pbui_Type_MeetDoScreenMouseControl();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenMouseControl getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<pbui_Type_MeetDoScreenMouseControl> PARSER;

    public static com.google.protobuf.Parser<pbui_Type_MeetDoScreenMouseControl> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface pbui_Type_MeetScreenKeyBoardControlOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pbui_Type_MeetScreenKeyBoardControl)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *控制的标志 参考streamcontrol.h 定义
     * </pre>
     *
     * <code>fixed32 flag = 1;</code>
     */
    int getFlag();

    /**
     * <pre>
     *发起请求的设备ID
     * </pre>
     *
     * <code>fixed32 deviceid = 2;</code>
     */
    int getDeviceid();

    /**
     * <pre>
     *发起请求的人员ID
     * </pre>
     *
     * <code>fixed32 memberid = 3;</code>
     */
    int getMemberid();

    /**
     * <pre>
     *参考streamcontrol.h 定义
     * </pre>
     *
     * <code>fixed32 otherflag = 4;</code>
     */
    int getOtherflag();

    /**
     * <pre>
     *对应的key值 参考streamcontrol.h 定义
     * </pre>
     *
     * <code>fixed32 key = 5;</code>
     */
    int getKey();
  }
  /**
   * <pre>
   *屏幕键盘控制
   *callback
   *method: notify
   * </pre>
   *
   * Protobuf type {@code pbui_Type_MeetScreenKeyBoardControl}
   */
  public  static final class pbui_Type_MeetScreenKeyBoardControl extends
      com.google.protobuf.GeneratedMessageLite<
          pbui_Type_MeetScreenKeyBoardControl, pbui_Type_MeetScreenKeyBoardControl.Builder> implements
      // @@protoc_insertion_point(message_implements:pbui_Type_MeetScreenKeyBoardControl)
      pbui_Type_MeetScreenKeyBoardControlOrBuilder {
    private pbui_Type_MeetScreenKeyBoardControl() {
    }
    public static final int FLAG_FIELD_NUMBER = 1;
    private int flag_;
    /**
     * <pre>
     *控制的标志 参考streamcontrol.h 定义
     * </pre>
     *
     * <code>fixed32 flag = 1;</code>
     */
    public int getFlag() {
      return flag_;
    }
    /**
     * <pre>
     *控制的标志 参考streamcontrol.h 定义
     * </pre>
     *
     * <code>fixed32 flag = 1;</code>
     */
    private void setFlag(int value) {
      
      flag_ = value;
    }
    /**
     * <pre>
     *控制的标志 参考streamcontrol.h 定义
     * </pre>
     *
     * <code>fixed32 flag = 1;</code>
     */
    private void clearFlag() {
      
      flag_ = 0;
    }

    public static final int DEVICEID_FIELD_NUMBER = 2;
    private int deviceid_;
    /**
     * <pre>
     *发起请求的设备ID
     * </pre>
     *
     * <code>fixed32 deviceid = 2;</code>
     */
    public int getDeviceid() {
      return deviceid_;
    }
    /**
     * <pre>
     *发起请求的设备ID
     * </pre>
     *
     * <code>fixed32 deviceid = 2;</code>
     */
    private void setDeviceid(int value) {
      
      deviceid_ = value;
    }
    /**
     * <pre>
     *发起请求的设备ID
     * </pre>
     *
     * <code>fixed32 deviceid = 2;</code>
     */
    private void clearDeviceid() {
      
      deviceid_ = 0;
    }

    public static final int MEMBERID_FIELD_NUMBER = 3;
    private int memberid_;
    /**
     * <pre>
     *发起请求的人员ID
     * </pre>
     *
     * <code>fixed32 memberid = 3;</code>
     */
    public int getMemberid() {
      return memberid_;
    }
    /**
     * <pre>
     *发起请求的人员ID
     * </pre>
     *
     * <code>fixed32 memberid = 3;</code>
     */
    private void setMemberid(int value) {
      
      memberid_ = value;
    }
    /**
     * <pre>
     *发起请求的人员ID
     * </pre>
     *
     * <code>fixed32 memberid = 3;</code>
     */
    private void clearMemberid() {
      
      memberid_ = 0;
    }

    public static final int OTHERFLAG_FIELD_NUMBER = 4;
    private int otherflag_;
    /**
     * <pre>
     *参考streamcontrol.h 定义
     * </pre>
     *
     * <code>fixed32 otherflag = 4;</code>
     */
    public int getOtherflag() {
      return otherflag_;
    }
    /**
     * <pre>
     *参考streamcontrol.h 定义
     * </pre>
     *
     * <code>fixed32 otherflag = 4;</code>
     */
    private void setOtherflag(int value) {
      
      otherflag_ = value;
    }
    /**
     * <pre>
     *参考streamcontrol.h 定义
     * </pre>
     *
     * <code>fixed32 otherflag = 4;</code>
     */
    private void clearOtherflag() {
      
      otherflag_ = 0;
    }

    public static final int KEY_FIELD_NUMBER = 5;
    private int key_;
    /**
     * <pre>
     *对应的key值 参考streamcontrol.h 定义
     * </pre>
     *
     * <code>fixed32 key = 5;</code>
     */
    public int getKey() {
      return key_;
    }
    /**
     * <pre>
     *对应的key值 参考streamcontrol.h 定义
     * </pre>
     *
     * <code>fixed32 key = 5;</code>
     */
    private void setKey(int value) {
      
      key_ = value;
    }
    /**
     * <pre>
     *对应的key值 参考streamcontrol.h 定义
     * </pre>
     *
     * <code>fixed32 key = 5;</code>
     */
    private void clearKey() {
      
      key_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (flag_ != 0) {
        output.writeFixed32(1, flag_);
      }
      if (deviceid_ != 0) {
        output.writeFixed32(2, deviceid_);
      }
      if (memberid_ != 0) {
        output.writeFixed32(3, memberid_);
      }
      if (otherflag_ != 0) {
        output.writeFixed32(4, otherflag_);
      }
      if (key_ != 0) {
        output.writeFixed32(5, key_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (flag_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, flag_);
      }
      if (deviceid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(2, deviceid_);
      }
      if (memberid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(3, memberid_);
      }
      if (otherflag_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(4, otherflag_);
      }
      if (key_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(5, key_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenKeyBoardControl parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenKeyBoardControl parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenKeyBoardControl parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenKeyBoardControl parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenKeyBoardControl parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenKeyBoardControl parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenKeyBoardControl parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenKeyBoardControl parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenKeyBoardControl parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenKeyBoardControl parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenKeyBoardControl parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenKeyBoardControl parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenKeyBoardControl prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     *屏幕键盘控制
     *callback
     *method: notify
     * </pre>
     *
     * Protobuf type {@code pbui_Type_MeetScreenKeyBoardControl}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenKeyBoardControl, Builder> implements
        // @@protoc_insertion_point(builder_implements:pbui_Type_MeetScreenKeyBoardControl)
        com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenKeyBoardControlOrBuilder {
      // Construct using com.mogujie.tt.com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenKeyBoardControl.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *控制的标志 参考streamcontrol.h 定义
       * </pre>
       *
       * <code>fixed32 flag = 1;</code>
       */
      public int getFlag() {
        return instance.getFlag();
      }
      /**
       * <pre>
       *控制的标志 参考streamcontrol.h 定义
       * </pre>
       *
       * <code>fixed32 flag = 1;</code>
       */
      public Builder setFlag(int value) {
        copyOnWrite();
        instance.setFlag(value);
        return this;
      }
      /**
       * <pre>
       *控制的标志 参考streamcontrol.h 定义
       * </pre>
       *
       * <code>fixed32 flag = 1;</code>
       */
      public Builder clearFlag() {
        copyOnWrite();
        instance.clearFlag();
        return this;
      }

      /**
       * <pre>
       *发起请求的设备ID
       * </pre>
       *
       * <code>fixed32 deviceid = 2;</code>
       */
      public int getDeviceid() {
        return instance.getDeviceid();
      }
      /**
       * <pre>
       *发起请求的设备ID
       * </pre>
       *
       * <code>fixed32 deviceid = 2;</code>
       */
      public Builder setDeviceid(int value) {
        copyOnWrite();
        instance.setDeviceid(value);
        return this;
      }
      /**
       * <pre>
       *发起请求的设备ID
       * </pre>
       *
       * <code>fixed32 deviceid = 2;</code>
       */
      public Builder clearDeviceid() {
        copyOnWrite();
        instance.clearDeviceid();
        return this;
      }

      /**
       * <pre>
       *发起请求的人员ID
       * </pre>
       *
       * <code>fixed32 memberid = 3;</code>
       */
      public int getMemberid() {
        return instance.getMemberid();
      }
      /**
       * <pre>
       *发起请求的人员ID
       * </pre>
       *
       * <code>fixed32 memberid = 3;</code>
       */
      public Builder setMemberid(int value) {
        copyOnWrite();
        instance.setMemberid(value);
        return this;
      }
      /**
       * <pre>
       *发起请求的人员ID
       * </pre>
       *
       * <code>fixed32 memberid = 3;</code>
       */
      public Builder clearMemberid() {
        copyOnWrite();
        instance.clearMemberid();
        return this;
      }

      /**
       * <pre>
       *参考streamcontrol.h 定义
       * </pre>
       *
       * <code>fixed32 otherflag = 4;</code>
       */
      public int getOtherflag() {
        return instance.getOtherflag();
      }
      /**
       * <pre>
       *参考streamcontrol.h 定义
       * </pre>
       *
       * <code>fixed32 otherflag = 4;</code>
       */
      public Builder setOtherflag(int value) {
        copyOnWrite();
        instance.setOtherflag(value);
        return this;
      }
      /**
       * <pre>
       *参考streamcontrol.h 定义
       * </pre>
       *
       * <code>fixed32 otherflag = 4;</code>
       */
      public Builder clearOtherflag() {
        copyOnWrite();
        instance.clearOtherflag();
        return this;
      }

      /**
       * <pre>
       *对应的key值 参考streamcontrol.h 定义
       * </pre>
       *
       * <code>fixed32 key = 5;</code>
       */
      public int getKey() {
        return instance.getKey();
      }
      /**
       * <pre>
       *对应的key值 参考streamcontrol.h 定义
       * </pre>
       *
       * <code>fixed32 key = 5;</code>
       */
      public Builder setKey(int value) {
        copyOnWrite();
        instance.setKey(value);
        return this;
      }
      /**
       * <pre>
       *对应的key值 参考streamcontrol.h 定义
       * </pre>
       *
       * <code>fixed32 key = 5;</code>
       */
      public Builder clearKey() {
        copyOnWrite();
        instance.clearKey();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pbui_Type_MeetScreenKeyBoardControl)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenKeyBoardControl();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenKeyBoardControl other = (com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenKeyBoardControl) arg1;
          flag_ = visitor.visitInt(flag_ != 0, flag_,
              other.flag_ != 0, other.flag_);
          deviceid_ = visitor.visitInt(deviceid_ != 0, deviceid_,
              other.deviceid_ != 0, other.deviceid_);
          memberid_ = visitor.visitInt(memberid_ != 0, memberid_,
              other.memberid_ != 0, other.memberid_);
          otherflag_ = visitor.visitInt(otherflag_ != 0, otherflag_,
              other.otherflag_ != 0, other.otherflag_);
          key_ = visitor.visitInt(key_ != 0, key_,
              other.key_ != 0, other.key_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 13: {

                  flag_ = input.readFixed32();
                  break;
                }
                case 21: {

                  deviceid_ = input.readFixed32();
                  break;
                }
                case 29: {

                  memberid_ = input.readFixed32();
                  break;
                }
                case 37: {

                  otherflag_ = input.readFixed32();
                  break;
                }
                case 45: {

                  key_ = input.readFixed32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenKeyBoardControl.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pbui_Type_MeetScreenKeyBoardControl)
    private static final com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenKeyBoardControl DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pbui_Type_MeetScreenKeyBoardControl();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetScreenKeyBoardControl getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<pbui_Type_MeetScreenKeyBoardControl> PARSER;

    public static com.google.protobuf.Parser<pbui_Type_MeetScreenKeyBoardControl> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface pbui_Type_MeetDoScreenKeyBoardControlOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pbui_Type_MeetDoScreenKeyBoardControl)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *控制的标志 参考streamcontrol.h 定义
     * </pre>
     *
     * <code>fixed32 flag = 1;</code>
     */
    int getFlag();

    /**
     * <pre>
     *设备ID
     * </pre>
     *
     * <code>fixed32 deviceid = 2;</code>
     */
    int getDeviceid();

    /**
     * <pre>
     *参考streamcontrol.h 定义
     * </pre>
     *
     * <code>fixed32 otherflag = 3;</code>
     */
    int getOtherflag();

    /**
     * <pre>
     *对应的key值 参考streamcontrol.h 定义
     * </pre>
     *
     * <code>fixed32 key = 4;</code>
     */
    int getKey();
  }
  /**
   * <pre>
   *屏幕键盘控制
   *call
   *method: control
   * </pre>
   *
   * Protobuf type {@code pbui_Type_MeetDoScreenKeyBoardControl}
   */
  public  static final class pbui_Type_MeetDoScreenKeyBoardControl extends
      com.google.protobuf.GeneratedMessageLite<
          pbui_Type_MeetDoScreenKeyBoardControl, pbui_Type_MeetDoScreenKeyBoardControl.Builder> implements
      // @@protoc_insertion_point(message_implements:pbui_Type_MeetDoScreenKeyBoardControl)
      pbui_Type_MeetDoScreenKeyBoardControlOrBuilder {
    private pbui_Type_MeetDoScreenKeyBoardControl() {
    }
    public static final int FLAG_FIELD_NUMBER = 1;
    private int flag_;
    /**
     * <pre>
     *控制的标志 参考streamcontrol.h 定义
     * </pre>
     *
     * <code>fixed32 flag = 1;</code>
     */
    public int getFlag() {
      return flag_;
    }
    /**
     * <pre>
     *控制的标志 参考streamcontrol.h 定义
     * </pre>
     *
     * <code>fixed32 flag = 1;</code>
     */
    private void setFlag(int value) {
      
      flag_ = value;
    }
    /**
     * <pre>
     *控制的标志 参考streamcontrol.h 定义
     * </pre>
     *
     * <code>fixed32 flag = 1;</code>
     */
    private void clearFlag() {
      
      flag_ = 0;
    }

    public static final int DEVICEID_FIELD_NUMBER = 2;
    private int deviceid_;
    /**
     * <pre>
     *设备ID
     * </pre>
     *
     * <code>fixed32 deviceid = 2;</code>
     */
    public int getDeviceid() {
      return deviceid_;
    }
    /**
     * <pre>
     *设备ID
     * </pre>
     *
     * <code>fixed32 deviceid = 2;</code>
     */
    private void setDeviceid(int value) {
      
      deviceid_ = value;
    }
    /**
     * <pre>
     *设备ID
     * </pre>
     *
     * <code>fixed32 deviceid = 2;</code>
     */
    private void clearDeviceid() {
      
      deviceid_ = 0;
    }

    public static final int OTHERFLAG_FIELD_NUMBER = 3;
    private int otherflag_;
    /**
     * <pre>
     *参考streamcontrol.h 定义
     * </pre>
     *
     * <code>fixed32 otherflag = 3;</code>
     */
    public int getOtherflag() {
      return otherflag_;
    }
    /**
     * <pre>
     *参考streamcontrol.h 定义
     * </pre>
     *
     * <code>fixed32 otherflag = 3;</code>
     */
    private void setOtherflag(int value) {
      
      otherflag_ = value;
    }
    /**
     * <pre>
     *参考streamcontrol.h 定义
     * </pre>
     *
     * <code>fixed32 otherflag = 3;</code>
     */
    private void clearOtherflag() {
      
      otherflag_ = 0;
    }

    public static final int KEY_FIELD_NUMBER = 4;
    private int key_;
    /**
     * <pre>
     *对应的key值 参考streamcontrol.h 定义
     * </pre>
     *
     * <code>fixed32 key = 4;</code>
     */
    public int getKey() {
      return key_;
    }
    /**
     * <pre>
     *对应的key值 参考streamcontrol.h 定义
     * </pre>
     *
     * <code>fixed32 key = 4;</code>
     */
    private void setKey(int value) {
      
      key_ = value;
    }
    /**
     * <pre>
     *对应的key值 参考streamcontrol.h 定义
     * </pre>
     *
     * <code>fixed32 key = 4;</code>
     */
    private void clearKey() {
      
      key_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (flag_ != 0) {
        output.writeFixed32(1, flag_);
      }
      if (deviceid_ != 0) {
        output.writeFixed32(2, deviceid_);
      }
      if (otherflag_ != 0) {
        output.writeFixed32(3, otherflag_);
      }
      if (key_ != 0) {
        output.writeFixed32(4, key_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (flag_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, flag_);
      }
      if (deviceid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(2, deviceid_);
      }
      if (otherflag_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(3, otherflag_);
      }
      if (key_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(4, key_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenKeyBoardControl parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenKeyBoardControl parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenKeyBoardControl parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenKeyBoardControl parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenKeyBoardControl parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenKeyBoardControl parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenKeyBoardControl parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenKeyBoardControl parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenKeyBoardControl parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenKeyBoardControl parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenKeyBoardControl parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenKeyBoardControl parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenKeyBoardControl prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     *屏幕键盘控制
     *call
     *method: control
     * </pre>
     *
     * Protobuf type {@code pbui_Type_MeetDoScreenKeyBoardControl}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenKeyBoardControl, Builder> implements
        // @@protoc_insertion_point(builder_implements:pbui_Type_MeetDoScreenKeyBoardControl)
        com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenKeyBoardControlOrBuilder {
      // Construct using com.mogujie.tt.com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenKeyBoardControl.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *控制的标志 参考streamcontrol.h 定义
       * </pre>
       *
       * <code>fixed32 flag = 1;</code>
       */
      public int getFlag() {
        return instance.getFlag();
      }
      /**
       * <pre>
       *控制的标志 参考streamcontrol.h 定义
       * </pre>
       *
       * <code>fixed32 flag = 1;</code>
       */
      public Builder setFlag(int value) {
        copyOnWrite();
        instance.setFlag(value);
        return this;
      }
      /**
       * <pre>
       *控制的标志 参考streamcontrol.h 定义
       * </pre>
       *
       * <code>fixed32 flag = 1;</code>
       */
      public Builder clearFlag() {
        copyOnWrite();
        instance.clearFlag();
        return this;
      }

      /**
       * <pre>
       *设备ID
       * </pre>
       *
       * <code>fixed32 deviceid = 2;</code>
       */
      public int getDeviceid() {
        return instance.getDeviceid();
      }
      /**
       * <pre>
       *设备ID
       * </pre>
       *
       * <code>fixed32 deviceid = 2;</code>
       */
      public Builder setDeviceid(int value) {
        copyOnWrite();
        instance.setDeviceid(value);
        return this;
      }
      /**
       * <pre>
       *设备ID
       * </pre>
       *
       * <code>fixed32 deviceid = 2;</code>
       */
      public Builder clearDeviceid() {
        copyOnWrite();
        instance.clearDeviceid();
        return this;
      }

      /**
       * <pre>
       *参考streamcontrol.h 定义
       * </pre>
       *
       * <code>fixed32 otherflag = 3;</code>
       */
      public int getOtherflag() {
        return instance.getOtherflag();
      }
      /**
       * <pre>
       *参考streamcontrol.h 定义
       * </pre>
       *
       * <code>fixed32 otherflag = 3;</code>
       */
      public Builder setOtherflag(int value) {
        copyOnWrite();
        instance.setOtherflag(value);
        return this;
      }
      /**
       * <pre>
       *参考streamcontrol.h 定义
       * </pre>
       *
       * <code>fixed32 otherflag = 3;</code>
       */
      public Builder clearOtherflag() {
        copyOnWrite();
        instance.clearOtherflag();
        return this;
      }

      /**
       * <pre>
       *对应的key值 参考streamcontrol.h 定义
       * </pre>
       *
       * <code>fixed32 key = 4;</code>
       */
      public int getKey() {
        return instance.getKey();
      }
      /**
       * <pre>
       *对应的key值 参考streamcontrol.h 定义
       * </pre>
       *
       * <code>fixed32 key = 4;</code>
       */
      public Builder setKey(int value) {
        copyOnWrite();
        instance.setKey(value);
        return this;
      }
      /**
       * <pre>
       *对应的key值 参考streamcontrol.h 定义
       * </pre>
       *
       * <code>fixed32 key = 4;</code>
       */
      public Builder clearKey() {
        copyOnWrite();
        instance.clearKey();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pbui_Type_MeetDoScreenKeyBoardControl)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenKeyBoardControl();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenKeyBoardControl other = (com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenKeyBoardControl) arg1;
          flag_ = visitor.visitInt(flag_ != 0, flag_,
              other.flag_ != 0, other.flag_);
          deviceid_ = visitor.visitInt(deviceid_ != 0, deviceid_,
              other.deviceid_ != 0, other.deviceid_);
          otherflag_ = visitor.visitInt(otherflag_ != 0, otherflag_,
              other.otherflag_ != 0, other.otherflag_);
          key_ = visitor.visitInt(key_ != 0, key_,
              other.key_ != 0, other.key_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 13: {

                  flag_ = input.readFixed32();
                  break;
                }
                case 21: {

                  deviceid_ = input.readFixed32();
                  break;
                }
                case 29: {

                  otherflag_ = input.readFixed32();
                  break;
                }
                case 37: {

                  key_ = input.readFixed32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenKeyBoardControl.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pbui_Type_MeetDoScreenKeyBoardControl)
    private static final com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenKeyBoardControl DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pbui_Type_MeetDoScreenKeyBoardControl();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.mogujie.tt.protobuf.InterfaceStream.pbui_Type_MeetDoScreenKeyBoardControl getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<pbui_Type_MeetDoScreenKeyBoardControl> PARSER;

    public static com.google.protobuf.Parser<pbui_Type_MeetDoScreenKeyBoardControl> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
