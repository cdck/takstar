// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Interface_systemlog.proto

package com.mogujie.tt.protobuf;

public final class InterfaceSystemlog {
  private InterfaceSystemlog() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  /**
   * <pre>
   *界面ID
   * </pre>
   *
   * Protobuf enum {@code PB_SYSTEMLOG_PAGEID}
   */
  public enum PB_SYSTEMLOG_PAGEID
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>PB_SYSTEMLOG_PAGE_ZERO = 0;</code>
     */
    PB_SYSTEMLOG_PAGE_ZERO(0),
    /**
     * <pre>
     *主界面
     * </pre>
     *
     * <code>PB_SYSTEMLOG_PAGE_MAIN = 1;</code>
     */
    PB_SYSTEMLOG_PAGE_MAIN(1),
    /**
     * <pre>
     *播放界面
     * </pre>
     *
     * <code>PB_SYSTEMLOG_PAGE_VIDEO = 2;</code>
     */
    PB_SYSTEMLOG_PAGE_VIDEO(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>PB_SYSTEMLOG_PAGE_ZERO = 0;</code>
     */
    public static final int PB_SYSTEMLOG_PAGE_ZERO_VALUE = 0;
    /**
     * <pre>
     *主界面
     * </pre>
     *
     * <code>PB_SYSTEMLOG_PAGE_MAIN = 1;</code>
     */
    public static final int PB_SYSTEMLOG_PAGE_MAIN_VALUE = 1;
    /**
     * <pre>
     *播放界面
     * </pre>
     *
     * <code>PB_SYSTEMLOG_PAGE_VIDEO = 2;</code>
     */
    public static final int PB_SYSTEMLOG_PAGE_VIDEO_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PB_SYSTEMLOG_PAGEID valueOf(int value) {
      return forNumber(value);
    }

    public static PB_SYSTEMLOG_PAGEID forNumber(int value) {
      switch (value) {
        case 0: return PB_SYSTEMLOG_PAGE_ZERO;
        case 1: return PB_SYSTEMLOG_PAGE_MAIN;
        case 2: return PB_SYSTEMLOG_PAGE_VIDEO;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PB_SYSTEMLOG_PAGEID>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PB_SYSTEMLOG_PAGEID> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PB_SYSTEMLOG_PAGEID>() {
            public PB_SYSTEMLOG_PAGEID findValueByNumber(int number) {
              return PB_SYSTEMLOG_PAGEID.forNumber(number);
            }
          };

    private final int value;

    private PB_SYSTEMLOG_PAGEID(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:PB_SYSTEMLOG_PAGEID)
  }

  /**
   * <pre>
   *日志统计操作ID
   *用于标识会议中的业务操作,已经定义的值，请不要变更，不要数据库中的数据会解析错
   *数据日志记录会自动删除30天之前的
   *可以自行添加日志操作的定义
   * </pre>
   *
   * Protobuf enum {@code PB_SYSTEMLOG_OPERID}
   */
  public enum PB_SYSTEMLOG_OPERID
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>PB_SYSTEMLOG_OPER_ZERO = 0;</code>
     */
    PB_SYSTEMLOG_OPER_ZERO(0),
    /**
     * <pre>
     *桌面同屏
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_SCREENSHARE = 1;</code>
     */
    PB_SYSTEMLOG_OPER_SCREENSHARE(1),
    /**
     * <pre>
     *文件同屏（param[0]=fileid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_FILESCREENSHARE = 2;</code>
     */
    PB_SYSTEMLOG_OPER_FILESCREENSHARE(2),
    /**
     * <pre>
     *查看文件（param[0]=fileid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_OPENFILE = 3;</code>
     */
    PB_SYSTEMLOG_OPER_OPENFILE(3),
    /**
     * <pre>
     *查看流  （param[0]=device,param[1]=subid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_OPENVIDEOSTREAM = 4;</code>
     */
    PB_SYSTEMLOG_OPER_OPENVIDEOSTREAM(4),
    /**
     * <pre>
     *同屏视频流  （param[0]=device,param[1]=subid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_SCREENVIDEOSTREAM = 5;</code>
     */
    PB_SYSTEMLOG_OPER_SCREENVIDEOSTREAM(5),
    /**
     * <pre>
     *上传文件（param[0]=fileid,param[1]=dirid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_UPLOADFILE = 6;</code>
     */
    PB_SYSTEMLOG_OPER_UPLOADFILE(6),
    /**
     * <pre>
     *下载文件（param[0]=fileid,param[1]=dirid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_DOWNLOADFILE = 7;</code>
     */
    PB_SYSTEMLOG_OPER_DOWNLOADFILE(7),
    /**
     * <pre>
     *删除文件（param[0]=fileid,param[1]=dirid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_DELETEFILE = 8;</code>
     */
    PB_SYSTEMLOG_OPER_DELETEFILE(8),
    /**
     * <pre>
     *修改文件（param[0]=fileid,param[1]=dirid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_MODIFYFILE = 9;</code>
     */
    PB_SYSTEMLOG_OPER_MODIFYFILE(9),
    /**
     * <pre>
     *进入会议
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_ENTERMEET = 10;</code>
     */
    PB_SYSTEMLOG_OPER_ENTERMEET(10),
    /**
     * <pre>
     *退出会议
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_EXITMEET = 11;</code>
     */
    PB_SYSTEMLOG_OPER_EXITMEET(11),
    /**
     * <pre>
     *开始投票（param[0]=voteid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_STARTVOTE = 12;</code>
     */
    PB_SYSTEMLOG_OPER_STARTVOTE(12),
    /**
     * <pre>
     *提交投票（param[0]=voteid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_SUBMITVOTE = 13;</code>
     */
    PB_SYSTEMLOG_OPER_SUBMITVOTE(13),
    /**
     * <pre>
     *停止投票（param[0]=voteid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_STOPVOTE = 14;</code>
     */
    PB_SYSTEMLOG_OPER_STOPVOTE(14),
    /**
     * <pre>
     *停止播放媒体（param[0]=fileid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_STOPPLAY = 15;</code>
     */
    PB_SYSTEMLOG_OPER_STOPPLAY(15),
    /**
     * <pre>
     *停止同屏（param[0]=device,param[1]=subid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_STOPSCREENSHARE = 16;</code>
     */
    PB_SYSTEMLOG_OPER_STOPSCREENSHARE(16),
    /**
     * <pre>
     *停止投影文件（param[0]=fileid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_STOPPROJECTFILE = 17;</code>
     */
    PB_SYSTEMLOG_OPER_STOPPROJECTFILE(17),
    /**
     * <pre>
     *停止投影流（param[0]=device,param[1]=subid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_STOPPROJECTSTREAM = 18;</code>
     */
    PB_SYSTEMLOG_OPER_STOPPROJECTSTREAM(18),
    /**
     * <pre>
     *投影文件（param[0]=fileid,param[1]=dirid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_STARTPROJECTFILE = 19;</code>
     */
    PB_SYSTEMLOG_OPER_STARTPROJECTFILE(19),
    /**
     * <pre>
     *投影流（param[0]=fileid,param[1]=dirid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_STARTPROJECTSTREAM = 20;</code>
     */
    PB_SYSTEMLOG_OPER_STARTPROJECTSTREAM(20),
    /**
     * <pre>
     *管理员登陆（param[0]=fileid,param[1]=dirid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_ADMINLOGON = 21;</code>
     */
    PB_SYSTEMLOG_OPER_ADMINLOGON(21),
    /**
     * <pre>
     *管理员退出（param[0]=fileid,param[1]=dirid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_ADMINLOGOUT = 22;</code>
     */
    PB_SYSTEMLOG_OPER_ADMINLOGOUT(22),
    /**
     * <pre>
     *开始白板
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_STARTWHITEBOARD = 23;</code>
     */
    PB_SYSTEMLOG_OPER_STARTWHITEBOARD(23),
    /**
     * <pre>
     *进入白板
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_ENTERWHITEBOARD = 24;</code>
     */
    PB_SYSTEMLOG_OPER_ENTERWHITEBOARD(24),
    /**
     * <pre>
     *拒绝加入白板
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_REJECTWHITEBOARD = 25;</code>
     */
    PB_SYSTEMLOG_OPER_REJECTWHITEBOARD(25),
    /**
     * <pre>
     *退出白板
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_EXITWHITEBOARD = 26;</code>
     */
    PB_SYSTEMLOG_OPER_EXITWHITEBOARD(26),
    /**
     * <pre>
     *加入同屏
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_JOINSCREEN = 27;</code>
     */
    PB_SYSTEMLOG_OPER_JOINSCREEN(27),
    /**
     * <pre>
     *开始多人书写
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_STARTMUTILPOSTIL = 28;</code>
     */
    PB_SYSTEMLOG_OPER_STARTMUTILPOSTIL(28),
    /**
     * <pre>
     *进入多人书写
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_ENTERMUTILPOSTIL = 29;</code>
     */
    PB_SYSTEMLOG_OPER_ENTERMUTILPOSTIL(29),
    /**
     * <pre>
     *拒绝加入多人书写
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_REJECTMUTILPOSTIL = 30;</code>
     */
    PB_SYSTEMLOG_OPER_REJECTMUTILPOSTIL(30),
    /**
     * <pre>
     *退出多人书写
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_EXITMUTILPOSTIL = 31;</code>
     */
    PB_SYSTEMLOG_OPER_EXITMUTILPOSTIL(31),
    /**
     * <pre>
     *桌面截图
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_SCREENSHOT = 32;</code>
     */
    PB_SYSTEMLOG_OPER_SCREENSHOT(32),
    /**
     * <pre>
     *扫描下载
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_SCANDOWNLOAD = 33;</code>
     */
    PB_SYSTEMLOG_OPER_SCANDOWNLOAD(33),
    /**
     * <pre>
     *保存文件到本地
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_SAVELOCAL = 34;</code>
     */
    PB_SYSTEMLOG_OPER_SAVELOCAL(34),
    /**
     * <pre>
     *保存文件到服务器
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_SAVESERVER = 35;</code>
     */
    PB_SYSTEMLOG_OPER_SAVESERVER(35),
    /**
     * <pre>
     *截图批注
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_SHOTPOSTIL = 36;</code>
     */
    PB_SYSTEMLOG_OPER_SHOTPOSTIL(36),
    /**
     * <pre>
     *查询会议
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_QUERYMEET = 37;</code>
     */
    PB_SYSTEMLOG_OPER_QUERYMEET(37),
    /**
     * <pre>
     *添加会议
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_ADDMEET = 38;</code>
     */
    PB_SYSTEMLOG_OPER_ADDMEET(38),
    /**
     * <pre>
     *修改会议
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_MODIFYMEET = 39;</code>
     */
    PB_SYSTEMLOG_OPER_MODIFYMEET(39),
    /**
     * <pre>
     *删除会议
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_DELETEMEET = 40;</code>
     */
    PB_SYSTEMLOG_OPER_DELETEMEET(40),
    /**
     * <pre>
     *开始会议
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_STARTMEET = 41;</code>
     */
    PB_SYSTEMLOG_OPER_STARTMEET(41),
    /**
     * <pre>
     *暂停会议
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_PAUSEMEET = 42;</code>
     */
    PB_SYSTEMLOG_OPER_PAUSEMEET(42),
    /**
     * <pre>
     *结束会议
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_STOPEMEET = 43;</code>
     */
    PB_SYSTEMLOG_OPER_STOPEMEET(43),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>PB_SYSTEMLOG_OPER_ZERO = 0;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_ZERO_VALUE = 0;
    /**
     * <pre>
     *桌面同屏
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_SCREENSHARE = 1;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_SCREENSHARE_VALUE = 1;
    /**
     * <pre>
     *文件同屏（param[0]=fileid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_FILESCREENSHARE = 2;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_FILESCREENSHARE_VALUE = 2;
    /**
     * <pre>
     *查看文件（param[0]=fileid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_OPENFILE = 3;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_OPENFILE_VALUE = 3;
    /**
     * <pre>
     *查看流  （param[0]=device,param[1]=subid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_OPENVIDEOSTREAM = 4;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_OPENVIDEOSTREAM_VALUE = 4;
    /**
     * <pre>
     *同屏视频流  （param[0]=device,param[1]=subid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_SCREENVIDEOSTREAM = 5;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_SCREENVIDEOSTREAM_VALUE = 5;
    /**
     * <pre>
     *上传文件（param[0]=fileid,param[1]=dirid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_UPLOADFILE = 6;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_UPLOADFILE_VALUE = 6;
    /**
     * <pre>
     *下载文件（param[0]=fileid,param[1]=dirid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_DOWNLOADFILE = 7;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_DOWNLOADFILE_VALUE = 7;
    /**
     * <pre>
     *删除文件（param[0]=fileid,param[1]=dirid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_DELETEFILE = 8;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_DELETEFILE_VALUE = 8;
    /**
     * <pre>
     *修改文件（param[0]=fileid,param[1]=dirid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_MODIFYFILE = 9;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_MODIFYFILE_VALUE = 9;
    /**
     * <pre>
     *进入会议
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_ENTERMEET = 10;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_ENTERMEET_VALUE = 10;
    /**
     * <pre>
     *退出会议
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_EXITMEET = 11;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_EXITMEET_VALUE = 11;
    /**
     * <pre>
     *开始投票（param[0]=voteid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_STARTVOTE = 12;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_STARTVOTE_VALUE = 12;
    /**
     * <pre>
     *提交投票（param[0]=voteid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_SUBMITVOTE = 13;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_SUBMITVOTE_VALUE = 13;
    /**
     * <pre>
     *停止投票（param[0]=voteid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_STOPVOTE = 14;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_STOPVOTE_VALUE = 14;
    /**
     * <pre>
     *停止播放媒体（param[0]=fileid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_STOPPLAY = 15;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_STOPPLAY_VALUE = 15;
    /**
     * <pre>
     *停止同屏（param[0]=device,param[1]=subid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_STOPSCREENSHARE = 16;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_STOPSCREENSHARE_VALUE = 16;
    /**
     * <pre>
     *停止投影文件（param[0]=fileid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_STOPPROJECTFILE = 17;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_STOPPROJECTFILE_VALUE = 17;
    /**
     * <pre>
     *停止投影流（param[0]=device,param[1]=subid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_STOPPROJECTSTREAM = 18;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_STOPPROJECTSTREAM_VALUE = 18;
    /**
     * <pre>
     *投影文件（param[0]=fileid,param[1]=dirid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_STARTPROJECTFILE = 19;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_STARTPROJECTFILE_VALUE = 19;
    /**
     * <pre>
     *投影流（param[0]=fileid,param[1]=dirid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_STARTPROJECTSTREAM = 20;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_STARTPROJECTSTREAM_VALUE = 20;
    /**
     * <pre>
     *管理员登陆（param[0]=fileid,param[1]=dirid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_ADMINLOGON = 21;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_ADMINLOGON_VALUE = 21;
    /**
     * <pre>
     *管理员退出（param[0]=fileid,param[1]=dirid）
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_ADMINLOGOUT = 22;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_ADMINLOGOUT_VALUE = 22;
    /**
     * <pre>
     *开始白板
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_STARTWHITEBOARD = 23;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_STARTWHITEBOARD_VALUE = 23;
    /**
     * <pre>
     *进入白板
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_ENTERWHITEBOARD = 24;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_ENTERWHITEBOARD_VALUE = 24;
    /**
     * <pre>
     *拒绝加入白板
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_REJECTWHITEBOARD = 25;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_REJECTWHITEBOARD_VALUE = 25;
    /**
     * <pre>
     *退出白板
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_EXITWHITEBOARD = 26;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_EXITWHITEBOARD_VALUE = 26;
    /**
     * <pre>
     *加入同屏
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_JOINSCREEN = 27;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_JOINSCREEN_VALUE = 27;
    /**
     * <pre>
     *开始多人书写
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_STARTMUTILPOSTIL = 28;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_STARTMUTILPOSTIL_VALUE = 28;
    /**
     * <pre>
     *进入多人书写
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_ENTERMUTILPOSTIL = 29;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_ENTERMUTILPOSTIL_VALUE = 29;
    /**
     * <pre>
     *拒绝加入多人书写
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_REJECTMUTILPOSTIL = 30;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_REJECTMUTILPOSTIL_VALUE = 30;
    /**
     * <pre>
     *退出多人书写
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_EXITMUTILPOSTIL = 31;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_EXITMUTILPOSTIL_VALUE = 31;
    /**
     * <pre>
     *桌面截图
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_SCREENSHOT = 32;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_SCREENSHOT_VALUE = 32;
    /**
     * <pre>
     *扫描下载
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_SCANDOWNLOAD = 33;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_SCANDOWNLOAD_VALUE = 33;
    /**
     * <pre>
     *保存文件到本地
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_SAVELOCAL = 34;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_SAVELOCAL_VALUE = 34;
    /**
     * <pre>
     *保存文件到服务器
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_SAVESERVER = 35;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_SAVESERVER_VALUE = 35;
    /**
     * <pre>
     *截图批注
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_SHOTPOSTIL = 36;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_SHOTPOSTIL_VALUE = 36;
    /**
     * <pre>
     *查询会议
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_QUERYMEET = 37;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_QUERYMEET_VALUE = 37;
    /**
     * <pre>
     *添加会议
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_ADDMEET = 38;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_ADDMEET_VALUE = 38;
    /**
     * <pre>
     *修改会议
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_MODIFYMEET = 39;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_MODIFYMEET_VALUE = 39;
    /**
     * <pre>
     *删除会议
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_DELETEMEET = 40;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_DELETEMEET_VALUE = 40;
    /**
     * <pre>
     *开始会议
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_STARTMEET = 41;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_STARTMEET_VALUE = 41;
    /**
     * <pre>
     *暂停会议
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_PAUSEMEET = 42;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_PAUSEMEET_VALUE = 42;
    /**
     * <pre>
     *结束会议
     * </pre>
     *
     * <code>PB_SYSTEMLOG_OPER_STOPEMEET = 43;</code>
     */
    public static final int PB_SYSTEMLOG_OPER_STOPEMEET_VALUE = 43;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PB_SYSTEMLOG_OPERID valueOf(int value) {
      return forNumber(value);
    }

    public static PB_SYSTEMLOG_OPERID forNumber(int value) {
      switch (value) {
        case 0: return PB_SYSTEMLOG_OPER_ZERO;
        case 1: return PB_SYSTEMLOG_OPER_SCREENSHARE;
        case 2: return PB_SYSTEMLOG_OPER_FILESCREENSHARE;
        case 3: return PB_SYSTEMLOG_OPER_OPENFILE;
        case 4: return PB_SYSTEMLOG_OPER_OPENVIDEOSTREAM;
        case 5: return PB_SYSTEMLOG_OPER_SCREENVIDEOSTREAM;
        case 6: return PB_SYSTEMLOG_OPER_UPLOADFILE;
        case 7: return PB_SYSTEMLOG_OPER_DOWNLOADFILE;
        case 8: return PB_SYSTEMLOG_OPER_DELETEFILE;
        case 9: return PB_SYSTEMLOG_OPER_MODIFYFILE;
        case 10: return PB_SYSTEMLOG_OPER_ENTERMEET;
        case 11: return PB_SYSTEMLOG_OPER_EXITMEET;
        case 12: return PB_SYSTEMLOG_OPER_STARTVOTE;
        case 13: return PB_SYSTEMLOG_OPER_SUBMITVOTE;
        case 14: return PB_SYSTEMLOG_OPER_STOPVOTE;
        case 15: return PB_SYSTEMLOG_OPER_STOPPLAY;
        case 16: return PB_SYSTEMLOG_OPER_STOPSCREENSHARE;
        case 17: return PB_SYSTEMLOG_OPER_STOPPROJECTFILE;
        case 18: return PB_SYSTEMLOG_OPER_STOPPROJECTSTREAM;
        case 19: return PB_SYSTEMLOG_OPER_STARTPROJECTFILE;
        case 20: return PB_SYSTEMLOG_OPER_STARTPROJECTSTREAM;
        case 21: return PB_SYSTEMLOG_OPER_ADMINLOGON;
        case 22: return PB_SYSTEMLOG_OPER_ADMINLOGOUT;
        case 23: return PB_SYSTEMLOG_OPER_STARTWHITEBOARD;
        case 24: return PB_SYSTEMLOG_OPER_ENTERWHITEBOARD;
        case 25: return PB_SYSTEMLOG_OPER_REJECTWHITEBOARD;
        case 26: return PB_SYSTEMLOG_OPER_EXITWHITEBOARD;
        case 27: return PB_SYSTEMLOG_OPER_JOINSCREEN;
        case 28: return PB_SYSTEMLOG_OPER_STARTMUTILPOSTIL;
        case 29: return PB_SYSTEMLOG_OPER_ENTERMUTILPOSTIL;
        case 30: return PB_SYSTEMLOG_OPER_REJECTMUTILPOSTIL;
        case 31: return PB_SYSTEMLOG_OPER_EXITMUTILPOSTIL;
        case 32: return PB_SYSTEMLOG_OPER_SCREENSHOT;
        case 33: return PB_SYSTEMLOG_OPER_SCANDOWNLOAD;
        case 34: return PB_SYSTEMLOG_OPER_SAVELOCAL;
        case 35: return PB_SYSTEMLOG_OPER_SAVESERVER;
        case 36: return PB_SYSTEMLOG_OPER_SHOTPOSTIL;
        case 37: return PB_SYSTEMLOG_OPER_QUERYMEET;
        case 38: return PB_SYSTEMLOG_OPER_ADDMEET;
        case 39: return PB_SYSTEMLOG_OPER_MODIFYMEET;
        case 40: return PB_SYSTEMLOG_OPER_DELETEMEET;
        case 41: return PB_SYSTEMLOG_OPER_STARTMEET;
        case 42: return PB_SYSTEMLOG_OPER_PAUSEMEET;
        case 43: return PB_SYSTEMLOG_OPER_STOPEMEET;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PB_SYSTEMLOG_OPERID>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PB_SYSTEMLOG_OPERID> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PB_SYSTEMLOG_OPERID>() {
            public PB_SYSTEMLOG_OPERID findValueByNumber(int number) {
              return PB_SYSTEMLOG_OPERID.forNumber(number);
            }
          };

    private final int value;

    private PB_SYSTEMLOG_OPERID(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:PB_SYSTEMLOG_OPERID)
  }

  public interface pbui_Item_MeetSystemLogOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pbui_Item_MeetSystemLog)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *界面ID  参见systemlogoperid.h  PB_SYSTEMLOG_PAGEID
     * </pre>
     *
     * <code>fixed32 pageid = 1;</code>
     */
    int getPageid();

    /**
     * <pre>
     *操作类别  参见systemlogoperid.h  SYSTEMLOG_OPERID
     * </pre>
     *
     * <code>fixed32 operid = 2;</code>
     */
    int getOperid();

    /**
     * <pre>
     *操作的会议ID
     * </pre>
     *
     * <code>fixed32 meetid = 3;</code>
     */
    int getMeetid();

    /**
     * <pre>
     *操作的会场ID
     * </pre>
     *
     * <code>fixed32 roomid = 4;</code>
     */
    int getRoomid();

    /**
     * <pre>
     *操作的设备ID
     * </pre>
     *
     * <code>fixed32 deviceid = 5;</code>
     */
    int getDeviceid();

    /**
     * <pre>
     *人员角色 参见Pb_MeetMemberRole 如果是管理员--人员ID是管理ID
     * </pre>
     *
     * <code>fixed32 urole = 6;</code>
     */
    int getUrole();

    /**
     * <pre>
     *人员ID
     * </pre>
     *
     * <code>fixed32 uid = 7;</code>
     */
    int getUid();

    /**
     * <pre>
     *操作utc时间 微秒
     * </pre>
     *
     * <code>fixed64 opertime = 8;</code>
     */
    long getOpertime();

    /**
     * <pre>
     *目前最多四个参数，根据操作对应的操作参数，用于快速统计，eg:播放的文件ID，播放的流设备ID,
     * </pre>
     *
     * <code>repeated fixed32 param = 9;</code>
     */
    java.util.List<java.lang.Integer> getParamList();
    /**
     * <pre>
     *目前最多四个参数，根据操作对应的操作参数，用于快速统计，eg:播放的文件ID，播放的流设备ID,
     * </pre>
     *
     * <code>repeated fixed32 param = 9;</code>
     */
    int getParamCount();
    /**
     * <pre>
     *目前最多四个参数，根据操作对应的操作参数，用于快速统计，eg:播放的文件ID，播放的流设备ID,
     * </pre>
     *
     * <code>repeated fixed32 param = 9;</code>
     */
    int getParam(int index);
  }
  /**
   * <pre>
   *&#47;///////////////////////////////////////////////////////////////////////
   * </pre>
   *
   * Protobuf type {@code pbui_Item_MeetSystemLog}
   */
  public  static final class pbui_Item_MeetSystemLog extends
      com.google.protobuf.GeneratedMessageLite<
          pbui_Item_MeetSystemLog, pbui_Item_MeetSystemLog.Builder> implements
      // @@protoc_insertion_point(message_implements:pbui_Item_MeetSystemLog)
      pbui_Item_MeetSystemLogOrBuilder {
    private pbui_Item_MeetSystemLog() {
      param_ = emptyIntList();
    }
    private int bitField0_;
    public static final int PAGEID_FIELD_NUMBER = 1;
    private int pageid_;
    /**
     * <pre>
     *界面ID  参见systemlogoperid.h  PB_SYSTEMLOG_PAGEID
     * </pre>
     *
     * <code>fixed32 pageid = 1;</code>
     */
    public int getPageid() {
      return pageid_;
    }
    /**
     * <pre>
     *界面ID  参见systemlogoperid.h  PB_SYSTEMLOG_PAGEID
     * </pre>
     *
     * <code>fixed32 pageid = 1;</code>
     */
    private void setPageid(int value) {
      
      pageid_ = value;
    }
    /**
     * <pre>
     *界面ID  参见systemlogoperid.h  PB_SYSTEMLOG_PAGEID
     * </pre>
     *
     * <code>fixed32 pageid = 1;</code>
     */
    private void clearPageid() {
      
      pageid_ = 0;
    }

    public static final int OPERID_FIELD_NUMBER = 2;
    private int operid_;
    /**
     * <pre>
     *操作类别  参见systemlogoperid.h  SYSTEMLOG_OPERID
     * </pre>
     *
     * <code>fixed32 operid = 2;</code>
     */
    public int getOperid() {
      return operid_;
    }
    /**
     * <pre>
     *操作类别  参见systemlogoperid.h  SYSTEMLOG_OPERID
     * </pre>
     *
     * <code>fixed32 operid = 2;</code>
     */
    private void setOperid(int value) {
      
      operid_ = value;
    }
    /**
     * <pre>
     *操作类别  参见systemlogoperid.h  SYSTEMLOG_OPERID
     * </pre>
     *
     * <code>fixed32 operid = 2;</code>
     */
    private void clearOperid() {
      
      operid_ = 0;
    }

    public static final int MEETID_FIELD_NUMBER = 3;
    private int meetid_;
    /**
     * <pre>
     *操作的会议ID
     * </pre>
     *
     * <code>fixed32 meetid = 3;</code>
     */
    public int getMeetid() {
      return meetid_;
    }
    /**
     * <pre>
     *操作的会议ID
     * </pre>
     *
     * <code>fixed32 meetid = 3;</code>
     */
    private void setMeetid(int value) {
      
      meetid_ = value;
    }
    /**
     * <pre>
     *操作的会议ID
     * </pre>
     *
     * <code>fixed32 meetid = 3;</code>
     */
    private void clearMeetid() {
      
      meetid_ = 0;
    }

    public static final int ROOMID_FIELD_NUMBER = 4;
    private int roomid_;
    /**
     * <pre>
     *操作的会场ID
     * </pre>
     *
     * <code>fixed32 roomid = 4;</code>
     */
    public int getRoomid() {
      return roomid_;
    }
    /**
     * <pre>
     *操作的会场ID
     * </pre>
     *
     * <code>fixed32 roomid = 4;</code>
     */
    private void setRoomid(int value) {
      
      roomid_ = value;
    }
    /**
     * <pre>
     *操作的会场ID
     * </pre>
     *
     * <code>fixed32 roomid = 4;</code>
     */
    private void clearRoomid() {
      
      roomid_ = 0;
    }

    public static final int DEVICEID_FIELD_NUMBER = 5;
    private int deviceid_;
    /**
     * <pre>
     *操作的设备ID
     * </pre>
     *
     * <code>fixed32 deviceid = 5;</code>
     */
    public int getDeviceid() {
      return deviceid_;
    }
    /**
     * <pre>
     *操作的设备ID
     * </pre>
     *
     * <code>fixed32 deviceid = 5;</code>
     */
    private void setDeviceid(int value) {
      
      deviceid_ = value;
    }
    /**
     * <pre>
     *操作的设备ID
     * </pre>
     *
     * <code>fixed32 deviceid = 5;</code>
     */
    private void clearDeviceid() {
      
      deviceid_ = 0;
    }

    public static final int UROLE_FIELD_NUMBER = 6;
    private int urole_;
    /**
     * <pre>
     *人员角色 参见Pb_MeetMemberRole 如果是管理员--人员ID是管理ID
     * </pre>
     *
     * <code>fixed32 urole = 6;</code>
     */
    public int getUrole() {
      return urole_;
    }
    /**
     * <pre>
     *人员角色 参见Pb_MeetMemberRole 如果是管理员--人员ID是管理ID
     * </pre>
     *
     * <code>fixed32 urole = 6;</code>
     */
    private void setUrole(int value) {
      
      urole_ = value;
    }
    /**
     * <pre>
     *人员角色 参见Pb_MeetMemberRole 如果是管理员--人员ID是管理ID
     * </pre>
     *
     * <code>fixed32 urole = 6;</code>
     */
    private void clearUrole() {
      
      urole_ = 0;
    }

    public static final int UID_FIELD_NUMBER = 7;
    private int uid_;
    /**
     * <pre>
     *人员ID
     * </pre>
     *
     * <code>fixed32 uid = 7;</code>
     */
    public int getUid() {
      return uid_;
    }
    /**
     * <pre>
     *人员ID
     * </pre>
     *
     * <code>fixed32 uid = 7;</code>
     */
    private void setUid(int value) {
      
      uid_ = value;
    }
    /**
     * <pre>
     *人员ID
     * </pre>
     *
     * <code>fixed32 uid = 7;</code>
     */
    private void clearUid() {
      
      uid_ = 0;
    }

    public static final int OPERTIME_FIELD_NUMBER = 8;
    private long opertime_;
    /**
     * <pre>
     *操作utc时间 微秒
     * </pre>
     *
     * <code>fixed64 opertime = 8;</code>
     */
    public long getOpertime() {
      return opertime_;
    }
    /**
     * <pre>
     *操作utc时间 微秒
     * </pre>
     *
     * <code>fixed64 opertime = 8;</code>
     */
    private void setOpertime(long value) {
      
      opertime_ = value;
    }
    /**
     * <pre>
     *操作utc时间 微秒
     * </pre>
     *
     * <code>fixed64 opertime = 8;</code>
     */
    private void clearOpertime() {
      
      opertime_ = 0L;
    }

    public static final int PARAM_FIELD_NUMBER = 9;
    private com.google.protobuf.Internal.IntList param_;
    /**
     * <pre>
     *目前最多四个参数，根据操作对应的操作参数，用于快速统计，eg:播放的文件ID，播放的流设备ID,
     * </pre>
     *
     * <code>repeated fixed32 param = 9;</code>
     */
    public java.util.List<java.lang.Integer>
        getParamList() {
      return param_;
    }
    /**
     * <pre>
     *目前最多四个参数，根据操作对应的操作参数，用于快速统计，eg:播放的文件ID，播放的流设备ID,
     * </pre>
     *
     * <code>repeated fixed32 param = 9;</code>
     */
    public int getParamCount() {
      return param_.size();
    }
    /**
     * <pre>
     *目前最多四个参数，根据操作对应的操作参数，用于快速统计，eg:播放的文件ID，播放的流设备ID,
     * </pre>
     *
     * <code>repeated fixed32 param = 9;</code>
     */
    public int getParam(int index) {
      return param_.getInt(index);
    }
    private void ensureParamIsMutable() {
      if (!param_.isModifiable()) {
        param_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(param_);
       }
    }
    /**
     * <pre>
     *目前最多四个参数，根据操作对应的操作参数，用于快速统计，eg:播放的文件ID，播放的流设备ID,
     * </pre>
     *
     * <code>repeated fixed32 param = 9;</code>
     */
    private void setParam(
        int index, int value) {
      ensureParamIsMutable();
      param_.setInt(index, value);
    }
    /**
     * <pre>
     *目前最多四个参数，根据操作对应的操作参数，用于快速统计，eg:播放的文件ID，播放的流设备ID,
     * </pre>
     *
     * <code>repeated fixed32 param = 9;</code>
     */
    private void addParam(int value) {
      ensureParamIsMutable();
      param_.addInt(value);
    }
    /**
     * <pre>
     *目前最多四个参数，根据操作对应的操作参数，用于快速统计，eg:播放的文件ID，播放的流设备ID,
     * </pre>
     *
     * <code>repeated fixed32 param = 9;</code>
     */
    private void addAllParam(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureParamIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, param_);
    }
    /**
     * <pre>
     *目前最多四个参数，根据操作对应的操作参数，用于快速统计，eg:播放的文件ID，播放的流设备ID,
     * </pre>
     *
     * <code>repeated fixed32 param = 9;</code>
     */
    private void clearParam() {
      param_ = emptyIntList();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (pageid_ != 0) {
        output.writeFixed32(1, pageid_);
      }
      if (operid_ != 0) {
        output.writeFixed32(2, operid_);
      }
      if (meetid_ != 0) {
        output.writeFixed32(3, meetid_);
      }
      if (roomid_ != 0) {
        output.writeFixed32(4, roomid_);
      }
      if (deviceid_ != 0) {
        output.writeFixed32(5, deviceid_);
      }
      if (urole_ != 0) {
        output.writeFixed32(6, urole_);
      }
      if (uid_ != 0) {
        output.writeFixed32(7, uid_);
      }
      if (opertime_ != 0L) {
        output.writeFixed64(8, opertime_);
      }
      for (int i = 0; i < param_.size(); i++) {
        output.writeFixed32(9, param_.getInt(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (pageid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, pageid_);
      }
      if (operid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(2, operid_);
      }
      if (meetid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(3, meetid_);
      }
      if (roomid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(4, roomid_);
      }
      if (deviceid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(5, deviceid_);
      }
      if (urole_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(6, urole_);
      }
      if (uid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(7, uid_);
      }
      if (opertime_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(8, opertime_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getParamList().size();
        size += dataSize;
        size += 1 * getParamList().size();
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     *&#47;///////////////////////////////////////////////////////////////////////
     * </pre>
     *
     * Protobuf type {@code pbui_Item_MeetSystemLog}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog, Builder> implements
        // @@protoc_insertion_point(builder_implements:pbui_Item_MeetSystemLog)
        com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLogOrBuilder {
      // Construct using com.mogujie.tt.com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *界面ID  参见systemlogoperid.h  PB_SYSTEMLOG_PAGEID
       * </pre>
       *
       * <code>fixed32 pageid = 1;</code>
       */
      public int getPageid() {
        return instance.getPageid();
      }
      /**
       * <pre>
       *界面ID  参见systemlogoperid.h  PB_SYSTEMLOG_PAGEID
       * </pre>
       *
       * <code>fixed32 pageid = 1;</code>
       */
      public Builder setPageid(int value) {
        copyOnWrite();
        instance.setPageid(value);
        return this;
      }
      /**
       * <pre>
       *界面ID  参见systemlogoperid.h  PB_SYSTEMLOG_PAGEID
       * </pre>
       *
       * <code>fixed32 pageid = 1;</code>
       */
      public Builder clearPageid() {
        copyOnWrite();
        instance.clearPageid();
        return this;
      }

      /**
       * <pre>
       *操作类别  参见systemlogoperid.h  SYSTEMLOG_OPERID
       * </pre>
       *
       * <code>fixed32 operid = 2;</code>
       */
      public int getOperid() {
        return instance.getOperid();
      }
      /**
       * <pre>
       *操作类别  参见systemlogoperid.h  SYSTEMLOG_OPERID
       * </pre>
       *
       * <code>fixed32 operid = 2;</code>
       */
      public Builder setOperid(int value) {
        copyOnWrite();
        instance.setOperid(value);
        return this;
      }
      /**
       * <pre>
       *操作类别  参见systemlogoperid.h  SYSTEMLOG_OPERID
       * </pre>
       *
       * <code>fixed32 operid = 2;</code>
       */
      public Builder clearOperid() {
        copyOnWrite();
        instance.clearOperid();
        return this;
      }

      /**
       * <pre>
       *操作的会议ID
       * </pre>
       *
       * <code>fixed32 meetid = 3;</code>
       */
      public int getMeetid() {
        return instance.getMeetid();
      }
      /**
       * <pre>
       *操作的会议ID
       * </pre>
       *
       * <code>fixed32 meetid = 3;</code>
       */
      public Builder setMeetid(int value) {
        copyOnWrite();
        instance.setMeetid(value);
        return this;
      }
      /**
       * <pre>
       *操作的会议ID
       * </pre>
       *
       * <code>fixed32 meetid = 3;</code>
       */
      public Builder clearMeetid() {
        copyOnWrite();
        instance.clearMeetid();
        return this;
      }

      /**
       * <pre>
       *操作的会场ID
       * </pre>
       *
       * <code>fixed32 roomid = 4;</code>
       */
      public int getRoomid() {
        return instance.getRoomid();
      }
      /**
       * <pre>
       *操作的会场ID
       * </pre>
       *
       * <code>fixed32 roomid = 4;</code>
       */
      public Builder setRoomid(int value) {
        copyOnWrite();
        instance.setRoomid(value);
        return this;
      }
      /**
       * <pre>
       *操作的会场ID
       * </pre>
       *
       * <code>fixed32 roomid = 4;</code>
       */
      public Builder clearRoomid() {
        copyOnWrite();
        instance.clearRoomid();
        return this;
      }

      /**
       * <pre>
       *操作的设备ID
       * </pre>
       *
       * <code>fixed32 deviceid = 5;</code>
       */
      public int getDeviceid() {
        return instance.getDeviceid();
      }
      /**
       * <pre>
       *操作的设备ID
       * </pre>
       *
       * <code>fixed32 deviceid = 5;</code>
       */
      public Builder setDeviceid(int value) {
        copyOnWrite();
        instance.setDeviceid(value);
        return this;
      }
      /**
       * <pre>
       *操作的设备ID
       * </pre>
       *
       * <code>fixed32 deviceid = 5;</code>
       */
      public Builder clearDeviceid() {
        copyOnWrite();
        instance.clearDeviceid();
        return this;
      }

      /**
       * <pre>
       *人员角色 参见Pb_MeetMemberRole 如果是管理员--人员ID是管理ID
       * </pre>
       *
       * <code>fixed32 urole = 6;</code>
       */
      public int getUrole() {
        return instance.getUrole();
      }
      /**
       * <pre>
       *人员角色 参见Pb_MeetMemberRole 如果是管理员--人员ID是管理ID
       * </pre>
       *
       * <code>fixed32 urole = 6;</code>
       */
      public Builder setUrole(int value) {
        copyOnWrite();
        instance.setUrole(value);
        return this;
      }
      /**
       * <pre>
       *人员角色 参见Pb_MeetMemberRole 如果是管理员--人员ID是管理ID
       * </pre>
       *
       * <code>fixed32 urole = 6;</code>
       */
      public Builder clearUrole() {
        copyOnWrite();
        instance.clearUrole();
        return this;
      }

      /**
       * <pre>
       *人员ID
       * </pre>
       *
       * <code>fixed32 uid = 7;</code>
       */
      public int getUid() {
        return instance.getUid();
      }
      /**
       * <pre>
       *人员ID
       * </pre>
       *
       * <code>fixed32 uid = 7;</code>
       */
      public Builder setUid(int value) {
        copyOnWrite();
        instance.setUid(value);
        return this;
      }
      /**
       * <pre>
       *人员ID
       * </pre>
       *
       * <code>fixed32 uid = 7;</code>
       */
      public Builder clearUid() {
        copyOnWrite();
        instance.clearUid();
        return this;
      }

      /**
       * <pre>
       *操作utc时间 微秒
       * </pre>
       *
       * <code>fixed64 opertime = 8;</code>
       */
      public long getOpertime() {
        return instance.getOpertime();
      }
      /**
       * <pre>
       *操作utc时间 微秒
       * </pre>
       *
       * <code>fixed64 opertime = 8;</code>
       */
      public Builder setOpertime(long value) {
        copyOnWrite();
        instance.setOpertime(value);
        return this;
      }
      /**
       * <pre>
       *操作utc时间 微秒
       * </pre>
       *
       * <code>fixed64 opertime = 8;</code>
       */
      public Builder clearOpertime() {
        copyOnWrite();
        instance.clearOpertime();
        return this;
      }

      /**
       * <pre>
       *目前最多四个参数，根据操作对应的操作参数，用于快速统计，eg:播放的文件ID，播放的流设备ID,
       * </pre>
       *
       * <code>repeated fixed32 param = 9;</code>
       */
      public java.util.List<java.lang.Integer>
          getParamList() {
        return java.util.Collections.unmodifiableList(
            instance.getParamList());
      }
      /**
       * <pre>
       *目前最多四个参数，根据操作对应的操作参数，用于快速统计，eg:播放的文件ID，播放的流设备ID,
       * </pre>
       *
       * <code>repeated fixed32 param = 9;</code>
       */
      public int getParamCount() {
        return instance.getParamCount();
      }
      /**
       * <pre>
       *目前最多四个参数，根据操作对应的操作参数，用于快速统计，eg:播放的文件ID，播放的流设备ID,
       * </pre>
       *
       * <code>repeated fixed32 param = 9;</code>
       */
      public int getParam(int index) {
        return instance.getParam(index);
      }
      /**
       * <pre>
       *目前最多四个参数，根据操作对应的操作参数，用于快速统计，eg:播放的文件ID，播放的流设备ID,
       * </pre>
       *
       * <code>repeated fixed32 param = 9;</code>
       */
      public Builder setParam(
          int index, int value) {
        copyOnWrite();
        instance.setParam(index, value);
        return this;
      }
      /**
       * <pre>
       *目前最多四个参数，根据操作对应的操作参数，用于快速统计，eg:播放的文件ID，播放的流设备ID,
       * </pre>
       *
       * <code>repeated fixed32 param = 9;</code>
       */
      public Builder addParam(int value) {
        copyOnWrite();
        instance.addParam(value);
        return this;
      }
      /**
       * <pre>
       *目前最多四个参数，根据操作对应的操作参数，用于快速统计，eg:播放的文件ID，播放的流设备ID,
       * </pre>
       *
       * <code>repeated fixed32 param = 9;</code>
       */
      public Builder addAllParam(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllParam(values);
        return this;
      }
      /**
       * <pre>
       *目前最多四个参数，根据操作对应的操作参数，用于快速统计，eg:播放的文件ID，播放的流设备ID,
       * </pre>
       *
       * <code>repeated fixed32 param = 9;</code>
       */
      public Builder clearParam() {
        copyOnWrite();
        instance.clearParam();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pbui_Item_MeetSystemLog)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          param_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog other = (com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog) arg1;
          pageid_ = visitor.visitInt(pageid_ != 0, pageid_,
              other.pageid_ != 0, other.pageid_);
          operid_ = visitor.visitInt(operid_ != 0, operid_,
              other.operid_ != 0, other.operid_);
          meetid_ = visitor.visitInt(meetid_ != 0, meetid_,
              other.meetid_ != 0, other.meetid_);
          roomid_ = visitor.visitInt(roomid_ != 0, roomid_,
              other.roomid_ != 0, other.roomid_);
          deviceid_ = visitor.visitInt(deviceid_ != 0, deviceid_,
              other.deviceid_ != 0, other.deviceid_);
          urole_ = visitor.visitInt(urole_ != 0, urole_,
              other.urole_ != 0, other.urole_);
          uid_ = visitor.visitInt(uid_ != 0, uid_,
              other.uid_ != 0, other.uid_);
          opertime_ = visitor.visitLong(opertime_ != 0L, opertime_,
              other.opertime_ != 0L, other.opertime_);
          param_= visitor.visitIntList(param_, other.param_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 13: {

                  pageid_ = input.readFixed32();
                  break;
                }
                case 21: {

                  operid_ = input.readFixed32();
                  break;
                }
                case 29: {

                  meetid_ = input.readFixed32();
                  break;
                }
                case 37: {

                  roomid_ = input.readFixed32();
                  break;
                }
                case 45: {

                  deviceid_ = input.readFixed32();
                  break;
                }
                case 53: {

                  urole_ = input.readFixed32();
                  break;
                }
                case 61: {

                  uid_ = input.readFixed32();
                  break;
                }
                case 65: {

                  opertime_ = input.readFixed64();
                  break;
                }
                case 77: {
                  if (!param_.isModifiable()) {
                    param_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(param_);
                  }
                  param_.addInt(input.readFixed32());
                  break;
                }
                case 74: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  if (!param_.isModifiable() && input.getBytesUntilLimit() > 0) {
                    final int currentSize = param_.size();
                    param_ = param_.mutableCopyWithCapacity(
                        currentSize + (length/4));
                  }
                  while (input.getBytesUntilLimit() > 0) {
                    param_.addInt(input.readFixed32());
                  }
                  input.popLimit(limit);
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pbui_Item_MeetSystemLog)
    private static final com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pbui_Item_MeetSystemLog();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<pbui_Item_MeetSystemLog> PARSER;

    public static com.google.protobuf.Parser<pbui_Item_MeetSystemLog> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface pbui_Type_MeetingMeetSystemLogOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pbui_Type_MeetingMeetSystemLog)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *本次查询总记录数
     * </pre>
     *
     * <code>fixed32 totalrecord = 1;</code>
     */
    int getTotalrecord();

    /**
     * <pre>
     *查询返回用户传过来的开始行
     * </pre>
     *
     * <code>fixed32 startrow = 2;</code>
     */
    int getStartrow();

    /**
     * <pre>
     *是否为第一帧,如果评分太多,接下来的帧会在下次接收到后回调
     * </pre>
     *
     * <code>fixed32 isfirst = 3;</code>
     */
    int getIsfirst();

    /**
     * <code>repeated .pbui_Item_MeetSystemLog item = 4;</code>
     */
    java.util.List<com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog> 
        getItemList();
    /**
     * <code>repeated .pbui_Item_MeetSystemLog item = 4;</code>
     */
    com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog getItem(int index);
    /**
     * <code>repeated .pbui_Item_MeetSystemLog item = 4;</code>
     */
    int getItemCount();
  }
  /**
   * <pre>
   *管理日志 
   *type：Pb_TYPE_MEET_INTERFACE_SYSTEMLOG
   *method:查询(数据库返回)
   * </pre>
   *
   * Protobuf type {@code pbui_Type_MeetingMeetSystemLog}
   */
  public  static final class pbui_Type_MeetingMeetSystemLog extends
      com.google.protobuf.GeneratedMessageLite<
          pbui_Type_MeetingMeetSystemLog, pbui_Type_MeetingMeetSystemLog.Builder> implements
      // @@protoc_insertion_point(message_implements:pbui_Type_MeetingMeetSystemLog)
      pbui_Type_MeetingMeetSystemLogOrBuilder {
    private pbui_Type_MeetingMeetSystemLog() {
      item_ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int TOTALRECORD_FIELD_NUMBER = 1;
    private int totalrecord_;
    /**
     * <pre>
     *本次查询总记录数
     * </pre>
     *
     * <code>fixed32 totalrecord = 1;</code>
     */
    public int getTotalrecord() {
      return totalrecord_;
    }
    /**
     * <pre>
     *本次查询总记录数
     * </pre>
     *
     * <code>fixed32 totalrecord = 1;</code>
     */
    private void setTotalrecord(int value) {
      
      totalrecord_ = value;
    }
    /**
     * <pre>
     *本次查询总记录数
     * </pre>
     *
     * <code>fixed32 totalrecord = 1;</code>
     */
    private void clearTotalrecord() {
      
      totalrecord_ = 0;
    }

    public static final int STARTROW_FIELD_NUMBER = 2;
    private int startrow_;
    /**
     * <pre>
     *查询返回用户传过来的开始行
     * </pre>
     *
     * <code>fixed32 startrow = 2;</code>
     */
    public int getStartrow() {
      return startrow_;
    }
    /**
     * <pre>
     *查询返回用户传过来的开始行
     * </pre>
     *
     * <code>fixed32 startrow = 2;</code>
     */
    private void setStartrow(int value) {
      
      startrow_ = value;
    }
    /**
     * <pre>
     *查询返回用户传过来的开始行
     * </pre>
     *
     * <code>fixed32 startrow = 2;</code>
     */
    private void clearStartrow() {
      
      startrow_ = 0;
    }

    public static final int ISFIRST_FIELD_NUMBER = 3;
    private int isfirst_;
    /**
     * <pre>
     *是否为第一帧,如果评分太多,接下来的帧会在下次接收到后回调
     * </pre>
     *
     * <code>fixed32 isfirst = 3;</code>
     */
    public int getIsfirst() {
      return isfirst_;
    }
    /**
     * <pre>
     *是否为第一帧,如果评分太多,接下来的帧会在下次接收到后回调
     * </pre>
     *
     * <code>fixed32 isfirst = 3;</code>
     */
    private void setIsfirst(int value) {
      
      isfirst_ = value;
    }
    /**
     * <pre>
     *是否为第一帧,如果评分太多,接下来的帧会在下次接收到后回调
     * </pre>
     *
     * <code>fixed32 isfirst = 3;</code>
     */
    private void clearIsfirst() {
      
      isfirst_ = 0;
    }

    public static final int ITEM_FIELD_NUMBER = 4;
    private com.google.protobuf.Internal.ProtobufList<com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog> item_;
    /**
     * <code>repeated .pbui_Item_MeetSystemLog item = 4;</code>
     */
    public java.util.List<com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog> getItemList() {
      return item_;
    }
    /**
     * <code>repeated .pbui_Item_MeetSystemLog item = 4;</code>
     */
    public java.util.List<? extends com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLogOrBuilder> 
        getItemOrBuilderList() {
      return item_;
    }
    /**
     * <code>repeated .pbui_Item_MeetSystemLog item = 4;</code>
     */
    public int getItemCount() {
      return item_.size();
    }
    /**
     * <code>repeated .pbui_Item_MeetSystemLog item = 4;</code>
     */
    public com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog getItem(int index) {
      return item_.get(index);
    }
    /**
     * <code>repeated .pbui_Item_MeetSystemLog item = 4;</code>
     */
    public com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLogOrBuilder getItemOrBuilder(
        int index) {
      return item_.get(index);
    }
    private void ensureItemIsMutable() {
      if (!item_.isModifiable()) {
        item_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(item_);
       }
    }

    /**
     * <code>repeated .pbui_Item_MeetSystemLog item = 4;</code>
     */
    private void setItem(
        int index, com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureItemIsMutable();
      item_.set(index, value);
    }
    /**
     * <code>repeated .pbui_Item_MeetSystemLog item = 4;</code>
     */
    private void setItem(
        int index, com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog.Builder builderForValue) {
      ensureItemIsMutable();
      item_.set(index, builderForValue.build());
    }
    /**
     * <code>repeated .pbui_Item_MeetSystemLog item = 4;</code>
     */
    private void addItem(com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureItemIsMutable();
      item_.add(value);
    }
    /**
     * <code>repeated .pbui_Item_MeetSystemLog item = 4;</code>
     */
    private void addItem(
        int index, com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureItemIsMutable();
      item_.add(index, value);
    }
    /**
     * <code>repeated .pbui_Item_MeetSystemLog item = 4;</code>
     */
    private void addItem(
        com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog.Builder builderForValue) {
      ensureItemIsMutable();
      item_.add(builderForValue.build());
    }
    /**
     * <code>repeated .pbui_Item_MeetSystemLog item = 4;</code>
     */
    private void addItem(
        int index, com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog.Builder builderForValue) {
      ensureItemIsMutable();
      item_.add(index, builderForValue.build());
    }
    /**
     * <code>repeated .pbui_Item_MeetSystemLog item = 4;</code>
     */
    private void addAllItem(
        java.lang.Iterable<? extends com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog> values) {
      ensureItemIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, item_);
    }
    /**
     * <code>repeated .pbui_Item_MeetSystemLog item = 4;</code>
     */
    private void clearItem() {
      item_ = emptyProtobufList();
    }
    /**
     * <code>repeated .pbui_Item_MeetSystemLog item = 4;</code>
     */
    private void removeItem(int index) {
      ensureItemIsMutable();
      item_.remove(index);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (totalrecord_ != 0) {
        output.writeFixed32(1, totalrecord_);
      }
      if (startrow_ != 0) {
        output.writeFixed32(2, startrow_);
      }
      if (isfirst_ != 0) {
        output.writeFixed32(3, isfirst_);
      }
      for (int i = 0; i < item_.size(); i++) {
        output.writeMessage(4, item_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (totalrecord_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, totalrecord_);
      }
      if (startrow_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(2, startrow_);
      }
      if (isfirst_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(3, isfirst_);
      }
      for (int i = 0; i < item_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, item_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_MeetingMeetSystemLog parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_MeetingMeetSystemLog parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_MeetingMeetSystemLog parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_MeetingMeetSystemLog parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_MeetingMeetSystemLog parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_MeetingMeetSystemLog parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_MeetingMeetSystemLog parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_MeetingMeetSystemLog parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_MeetingMeetSystemLog parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_MeetingMeetSystemLog parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_MeetingMeetSystemLog parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_MeetingMeetSystemLog parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_MeetingMeetSystemLog prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     *管理日志 
     *type：Pb_TYPE_MEET_INTERFACE_SYSTEMLOG
     *method:查询(数据库返回)
     * </pre>
     *
     * Protobuf type {@code pbui_Type_MeetingMeetSystemLog}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_MeetingMeetSystemLog, Builder> implements
        // @@protoc_insertion_point(builder_implements:pbui_Type_MeetingMeetSystemLog)
        com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_MeetingMeetSystemLogOrBuilder {
      // Construct using com.mogujie.tt.com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_MeetingMeetSystemLog.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *本次查询总记录数
       * </pre>
       *
       * <code>fixed32 totalrecord = 1;</code>
       */
      public int getTotalrecord() {
        return instance.getTotalrecord();
      }
      /**
       * <pre>
       *本次查询总记录数
       * </pre>
       *
       * <code>fixed32 totalrecord = 1;</code>
       */
      public Builder setTotalrecord(int value) {
        copyOnWrite();
        instance.setTotalrecord(value);
        return this;
      }
      /**
       * <pre>
       *本次查询总记录数
       * </pre>
       *
       * <code>fixed32 totalrecord = 1;</code>
       */
      public Builder clearTotalrecord() {
        copyOnWrite();
        instance.clearTotalrecord();
        return this;
      }

      /**
       * <pre>
       *查询返回用户传过来的开始行
       * </pre>
       *
       * <code>fixed32 startrow = 2;</code>
       */
      public int getStartrow() {
        return instance.getStartrow();
      }
      /**
       * <pre>
       *查询返回用户传过来的开始行
       * </pre>
       *
       * <code>fixed32 startrow = 2;</code>
       */
      public Builder setStartrow(int value) {
        copyOnWrite();
        instance.setStartrow(value);
        return this;
      }
      /**
       * <pre>
       *查询返回用户传过来的开始行
       * </pre>
       *
       * <code>fixed32 startrow = 2;</code>
       */
      public Builder clearStartrow() {
        copyOnWrite();
        instance.clearStartrow();
        return this;
      }

      /**
       * <pre>
       *是否为第一帧,如果评分太多,接下来的帧会在下次接收到后回调
       * </pre>
       *
       * <code>fixed32 isfirst = 3;</code>
       */
      public int getIsfirst() {
        return instance.getIsfirst();
      }
      /**
       * <pre>
       *是否为第一帧,如果评分太多,接下来的帧会在下次接收到后回调
       * </pre>
       *
       * <code>fixed32 isfirst = 3;</code>
       */
      public Builder setIsfirst(int value) {
        copyOnWrite();
        instance.setIsfirst(value);
        return this;
      }
      /**
       * <pre>
       *是否为第一帧,如果评分太多,接下来的帧会在下次接收到后回调
       * </pre>
       *
       * <code>fixed32 isfirst = 3;</code>
       */
      public Builder clearIsfirst() {
        copyOnWrite();
        instance.clearIsfirst();
        return this;
      }

      /**
       * <code>repeated .pbui_Item_MeetSystemLog item = 4;</code>
       */
      public java.util.List<com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog> getItemList() {
        return java.util.Collections.unmodifiableList(
            instance.getItemList());
      }
      /**
       * <code>repeated .pbui_Item_MeetSystemLog item = 4;</code>
       */
      public int getItemCount() {
        return instance.getItemCount();
      }/**
       * <code>repeated .pbui_Item_MeetSystemLog item = 4;</code>
       */
      public com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog getItem(int index) {
        return instance.getItem(index);
      }
      /**
       * <code>repeated .pbui_Item_MeetSystemLog item = 4;</code>
       */
      public Builder setItem(
          int index, com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog value) {
        copyOnWrite();
        instance.setItem(index, value);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetSystemLog item = 4;</code>
       */
      public Builder setItem(
          int index, com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog.Builder builderForValue) {
        copyOnWrite();
        instance.setItem(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetSystemLog item = 4;</code>
       */
      public Builder addItem(com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog value) {
        copyOnWrite();
        instance.addItem(value);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetSystemLog item = 4;</code>
       */
      public Builder addItem(
          int index, com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog value) {
        copyOnWrite();
        instance.addItem(index, value);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetSystemLog item = 4;</code>
       */
      public Builder addItem(
          com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog.Builder builderForValue) {
        copyOnWrite();
        instance.addItem(builderForValue);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetSystemLog item = 4;</code>
       */
      public Builder addItem(
          int index, com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog.Builder builderForValue) {
        copyOnWrite();
        instance.addItem(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetSystemLog item = 4;</code>
       */
      public Builder addAllItem(
          java.lang.Iterable<? extends com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog> values) {
        copyOnWrite();
        instance.addAllItem(values);
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetSystemLog item = 4;</code>
       */
      public Builder clearItem() {
        copyOnWrite();
        instance.clearItem();
        return this;
      }
      /**
       * <code>repeated .pbui_Item_MeetSystemLog item = 4;</code>
       */
      public Builder removeItem(int index) {
        copyOnWrite();
        instance.removeItem(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pbui_Type_MeetingMeetSystemLog)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_MeetingMeetSystemLog();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          item_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_MeetingMeetSystemLog other = (com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_MeetingMeetSystemLog) arg1;
          totalrecord_ = visitor.visitInt(totalrecord_ != 0, totalrecord_,
              other.totalrecord_ != 0, other.totalrecord_);
          startrow_ = visitor.visitInt(startrow_ != 0, startrow_,
              other.startrow_ != 0, other.startrow_);
          isfirst_ = visitor.visitInt(isfirst_ != 0, isfirst_,
              other.isfirst_ != 0, other.isfirst_);
          item_= visitor.visitList(item_, other.item_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 13: {

                  totalrecord_ = input.readFixed32();
                  break;
                }
                case 21: {

                  startrow_ = input.readFixed32();
                  break;
                }
                case 29: {

                  isfirst_ = input.readFixed32();
                  break;
                }
                case 34: {
                  if (!item_.isModifiable()) {
                    item_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(item_);
                  }
                  item_.add(
                      input.readMessage(com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Item_MeetSystemLog.parser(), extensionRegistry));
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_MeetingMeetSystemLog.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pbui_Type_MeetingMeetSystemLog)
    private static final com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_MeetingMeetSystemLog DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pbui_Type_MeetingMeetSystemLog();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_MeetingMeetSystemLog getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<pbui_Type_MeetingMeetSystemLog> PARSER;

    public static com.google.protobuf.Parser<pbui_Type_MeetingMeetSystemLog> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface pbui_Add_MeetSystemLogOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pbui_Add_MeetSystemLog)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *界面ID  参见systemlogoperid.h  PB_SYSTEMLOG_PAGEID
     * </pre>
     *
     * <code>fixed32 pageid = 1;</code>
     */
    int getPageid();

    /**
     * <pre>
     *操作类别  参见systemlogoperid.h  SYSTEMLOG_OPERID
     * </pre>
     *
     * <code>fixed32 operid = 2;</code>
     */
    int getOperid();

    /**
     * <pre>
     *操作的会议ID
     * </pre>
     *
     * <code>fixed32 meetid = 3;</code>
     */
    int getMeetid();

    /**
     * <pre>
     *操作的会场ID
     * </pre>
     *
     * <code>fixed32 roomid = 4;</code>
     */
    int getRoomid();

    /**
     * <pre>
     *操作的设备ID （添加时不需要填写）
     * </pre>
     *
     * <code>fixed32 deviceid = 5;</code>
     */
    int getDeviceid();

    /**
     * <pre>
     *人员角色 参见Pb_MeetMemberRole 如果是管理员--人员ID是管理ID
     * </pre>
     *
     * <code>fixed32 urole = 6;</code>
     */
    int getUrole();

    /**
     * <pre>
     *人员ID
     * </pre>
     *
     * <code>fixed32 uid = 7;</code>
     */
    int getUid();

    /**
     * <pre>
     *操作utc时间 微秒 （添加时不需要填写）
     * </pre>
     *
     * <code>fixed64 opertime = 8;</code>
     */
    long getOpertime();

    /**
     * <pre>
     *目前最多四个参数，根据操作对应的操作参数，用于快速统计，eg:播放的文件ID，播放的流设备ID,
     * </pre>
     *
     * <code>repeated fixed32 param = 9;</code>
     */
    java.util.List<java.lang.Integer> getParamList();
    /**
     * <pre>
     *目前最多四个参数，根据操作对应的操作参数，用于快速统计，eg:播放的文件ID，播放的流设备ID,
     * </pre>
     *
     * <code>repeated fixed32 param = 9;</code>
     */
    int getParamCount();
    /**
     * <pre>
     *目前最多四个参数，根据操作对应的操作参数，用于快速统计，eg:播放的文件ID，播放的流设备ID,
     * </pre>
     *
     * <code>repeated fixed32 param = 9;</code>
     */
    int getParam(int index);
  }
  /**
   * <pre>
   *添加日志 
   *call callback
   *type：Pb_TYPE_MEET_INTERFACE_SYSTEMLOG
   *method:add
   * </pre>
   *
   * Protobuf type {@code pbui_Add_MeetSystemLog}
   */
  public  static final class pbui_Add_MeetSystemLog extends
      com.google.protobuf.GeneratedMessageLite<
          pbui_Add_MeetSystemLog, pbui_Add_MeetSystemLog.Builder> implements
      // @@protoc_insertion_point(message_implements:pbui_Add_MeetSystemLog)
      pbui_Add_MeetSystemLogOrBuilder {
    private pbui_Add_MeetSystemLog() {
      param_ = emptyIntList();
    }
    private int bitField0_;
    public static final int PAGEID_FIELD_NUMBER = 1;
    private int pageid_;
    /**
     * <pre>
     *界面ID  参见systemlogoperid.h  PB_SYSTEMLOG_PAGEID
     * </pre>
     *
     * <code>fixed32 pageid = 1;</code>
     */
    public int getPageid() {
      return pageid_;
    }
    /**
     * <pre>
     *界面ID  参见systemlogoperid.h  PB_SYSTEMLOG_PAGEID
     * </pre>
     *
     * <code>fixed32 pageid = 1;</code>
     */
    private void setPageid(int value) {
      
      pageid_ = value;
    }
    /**
     * <pre>
     *界面ID  参见systemlogoperid.h  PB_SYSTEMLOG_PAGEID
     * </pre>
     *
     * <code>fixed32 pageid = 1;</code>
     */
    private void clearPageid() {
      
      pageid_ = 0;
    }

    public static final int OPERID_FIELD_NUMBER = 2;
    private int operid_;
    /**
     * <pre>
     *操作类别  参见systemlogoperid.h  SYSTEMLOG_OPERID
     * </pre>
     *
     * <code>fixed32 operid = 2;</code>
     */
    public int getOperid() {
      return operid_;
    }
    /**
     * <pre>
     *操作类别  参见systemlogoperid.h  SYSTEMLOG_OPERID
     * </pre>
     *
     * <code>fixed32 operid = 2;</code>
     */
    private void setOperid(int value) {
      
      operid_ = value;
    }
    /**
     * <pre>
     *操作类别  参见systemlogoperid.h  SYSTEMLOG_OPERID
     * </pre>
     *
     * <code>fixed32 operid = 2;</code>
     */
    private void clearOperid() {
      
      operid_ = 0;
    }

    public static final int MEETID_FIELD_NUMBER = 3;
    private int meetid_;
    /**
     * <pre>
     *操作的会议ID
     * </pre>
     *
     * <code>fixed32 meetid = 3;</code>
     */
    public int getMeetid() {
      return meetid_;
    }
    /**
     * <pre>
     *操作的会议ID
     * </pre>
     *
     * <code>fixed32 meetid = 3;</code>
     */
    private void setMeetid(int value) {
      
      meetid_ = value;
    }
    /**
     * <pre>
     *操作的会议ID
     * </pre>
     *
     * <code>fixed32 meetid = 3;</code>
     */
    private void clearMeetid() {
      
      meetid_ = 0;
    }

    public static final int ROOMID_FIELD_NUMBER = 4;
    private int roomid_;
    /**
     * <pre>
     *操作的会场ID
     * </pre>
     *
     * <code>fixed32 roomid = 4;</code>
     */
    public int getRoomid() {
      return roomid_;
    }
    /**
     * <pre>
     *操作的会场ID
     * </pre>
     *
     * <code>fixed32 roomid = 4;</code>
     */
    private void setRoomid(int value) {
      
      roomid_ = value;
    }
    /**
     * <pre>
     *操作的会场ID
     * </pre>
     *
     * <code>fixed32 roomid = 4;</code>
     */
    private void clearRoomid() {
      
      roomid_ = 0;
    }

    public static final int DEVICEID_FIELD_NUMBER = 5;
    private int deviceid_;
    /**
     * <pre>
     *操作的设备ID （添加时不需要填写）
     * </pre>
     *
     * <code>fixed32 deviceid = 5;</code>
     */
    public int getDeviceid() {
      return deviceid_;
    }
    /**
     * <pre>
     *操作的设备ID （添加时不需要填写）
     * </pre>
     *
     * <code>fixed32 deviceid = 5;</code>
     */
    private void setDeviceid(int value) {
      
      deviceid_ = value;
    }
    /**
     * <pre>
     *操作的设备ID （添加时不需要填写）
     * </pre>
     *
     * <code>fixed32 deviceid = 5;</code>
     */
    private void clearDeviceid() {
      
      deviceid_ = 0;
    }

    public static final int UROLE_FIELD_NUMBER = 6;
    private int urole_;
    /**
     * <pre>
     *人员角色 参见Pb_MeetMemberRole 如果是管理员--人员ID是管理ID
     * </pre>
     *
     * <code>fixed32 urole = 6;</code>
     */
    public int getUrole() {
      return urole_;
    }
    /**
     * <pre>
     *人员角色 参见Pb_MeetMemberRole 如果是管理员--人员ID是管理ID
     * </pre>
     *
     * <code>fixed32 urole = 6;</code>
     */
    private void setUrole(int value) {
      
      urole_ = value;
    }
    /**
     * <pre>
     *人员角色 参见Pb_MeetMemberRole 如果是管理员--人员ID是管理ID
     * </pre>
     *
     * <code>fixed32 urole = 6;</code>
     */
    private void clearUrole() {
      
      urole_ = 0;
    }

    public static final int UID_FIELD_NUMBER = 7;
    private int uid_;
    /**
     * <pre>
     *人员ID
     * </pre>
     *
     * <code>fixed32 uid = 7;</code>
     */
    public int getUid() {
      return uid_;
    }
    /**
     * <pre>
     *人员ID
     * </pre>
     *
     * <code>fixed32 uid = 7;</code>
     */
    private void setUid(int value) {
      
      uid_ = value;
    }
    /**
     * <pre>
     *人员ID
     * </pre>
     *
     * <code>fixed32 uid = 7;</code>
     */
    private void clearUid() {
      
      uid_ = 0;
    }

    public static final int OPERTIME_FIELD_NUMBER = 8;
    private long opertime_;
    /**
     * <pre>
     *操作utc时间 微秒 （添加时不需要填写）
     * </pre>
     *
     * <code>fixed64 opertime = 8;</code>
     */
    public long getOpertime() {
      return opertime_;
    }
    /**
     * <pre>
     *操作utc时间 微秒 （添加时不需要填写）
     * </pre>
     *
     * <code>fixed64 opertime = 8;</code>
     */
    private void setOpertime(long value) {
      
      opertime_ = value;
    }
    /**
     * <pre>
     *操作utc时间 微秒 （添加时不需要填写）
     * </pre>
     *
     * <code>fixed64 opertime = 8;</code>
     */
    private void clearOpertime() {
      
      opertime_ = 0L;
    }

    public static final int PARAM_FIELD_NUMBER = 9;
    private com.google.protobuf.Internal.IntList param_;
    /**
     * <pre>
     *目前最多四个参数，根据操作对应的操作参数，用于快速统计，eg:播放的文件ID，播放的流设备ID,
     * </pre>
     *
     * <code>repeated fixed32 param = 9;</code>
     */
    public java.util.List<java.lang.Integer>
        getParamList() {
      return param_;
    }
    /**
     * <pre>
     *目前最多四个参数，根据操作对应的操作参数，用于快速统计，eg:播放的文件ID，播放的流设备ID,
     * </pre>
     *
     * <code>repeated fixed32 param = 9;</code>
     */
    public int getParamCount() {
      return param_.size();
    }
    /**
     * <pre>
     *目前最多四个参数，根据操作对应的操作参数，用于快速统计，eg:播放的文件ID，播放的流设备ID,
     * </pre>
     *
     * <code>repeated fixed32 param = 9;</code>
     */
    public int getParam(int index) {
      return param_.getInt(index);
    }
    private void ensureParamIsMutable() {
      if (!param_.isModifiable()) {
        param_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(param_);
       }
    }
    /**
     * <pre>
     *目前最多四个参数，根据操作对应的操作参数，用于快速统计，eg:播放的文件ID，播放的流设备ID,
     * </pre>
     *
     * <code>repeated fixed32 param = 9;</code>
     */
    private void setParam(
        int index, int value) {
      ensureParamIsMutable();
      param_.setInt(index, value);
    }
    /**
     * <pre>
     *目前最多四个参数，根据操作对应的操作参数，用于快速统计，eg:播放的文件ID，播放的流设备ID,
     * </pre>
     *
     * <code>repeated fixed32 param = 9;</code>
     */
    private void addParam(int value) {
      ensureParamIsMutable();
      param_.addInt(value);
    }
    /**
     * <pre>
     *目前最多四个参数，根据操作对应的操作参数，用于快速统计，eg:播放的文件ID，播放的流设备ID,
     * </pre>
     *
     * <code>repeated fixed32 param = 9;</code>
     */
    private void addAllParam(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureParamIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, param_);
    }
    /**
     * <pre>
     *目前最多四个参数，根据操作对应的操作参数，用于快速统计，eg:播放的文件ID，播放的流设备ID,
     * </pre>
     *
     * <code>repeated fixed32 param = 9;</code>
     */
    private void clearParam() {
      param_ = emptyIntList();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (pageid_ != 0) {
        output.writeFixed32(1, pageid_);
      }
      if (operid_ != 0) {
        output.writeFixed32(2, operid_);
      }
      if (meetid_ != 0) {
        output.writeFixed32(3, meetid_);
      }
      if (roomid_ != 0) {
        output.writeFixed32(4, roomid_);
      }
      if (deviceid_ != 0) {
        output.writeFixed32(5, deviceid_);
      }
      if (urole_ != 0) {
        output.writeFixed32(6, urole_);
      }
      if (uid_ != 0) {
        output.writeFixed32(7, uid_);
      }
      if (opertime_ != 0L) {
        output.writeFixed64(8, opertime_);
      }
      for (int i = 0; i < param_.size(); i++) {
        output.writeFixed32(9, param_.getInt(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (pageid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, pageid_);
      }
      if (operid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(2, operid_);
      }
      if (meetid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(3, meetid_);
      }
      if (roomid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(4, roomid_);
      }
      if (deviceid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(5, deviceid_);
      }
      if (urole_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(6, urole_);
      }
      if (uid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(7, uid_);
      }
      if (opertime_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(8, opertime_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getParamList().size();
        size += dataSize;
        size += 1 * getParamList().size();
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Add_MeetSystemLog parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Add_MeetSystemLog parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Add_MeetSystemLog parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Add_MeetSystemLog parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Add_MeetSystemLog parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Add_MeetSystemLog parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Add_MeetSystemLog parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Add_MeetSystemLog parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Add_MeetSystemLog parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Add_MeetSystemLog parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Add_MeetSystemLog parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Add_MeetSystemLog parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Add_MeetSystemLog prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     *添加日志 
     *call callback
     *type：Pb_TYPE_MEET_INTERFACE_SYSTEMLOG
     *method:add
     * </pre>
     *
     * Protobuf type {@code pbui_Add_MeetSystemLog}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Add_MeetSystemLog, Builder> implements
        // @@protoc_insertion_point(builder_implements:pbui_Add_MeetSystemLog)
        com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Add_MeetSystemLogOrBuilder {
      // Construct using com.mogujie.tt.com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Add_MeetSystemLog.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *界面ID  参见systemlogoperid.h  PB_SYSTEMLOG_PAGEID
       * </pre>
       *
       * <code>fixed32 pageid = 1;</code>
       */
      public int getPageid() {
        return instance.getPageid();
      }
      /**
       * <pre>
       *界面ID  参见systemlogoperid.h  PB_SYSTEMLOG_PAGEID
       * </pre>
       *
       * <code>fixed32 pageid = 1;</code>
       */
      public Builder setPageid(int value) {
        copyOnWrite();
        instance.setPageid(value);
        return this;
      }
      /**
       * <pre>
       *界面ID  参见systemlogoperid.h  PB_SYSTEMLOG_PAGEID
       * </pre>
       *
       * <code>fixed32 pageid = 1;</code>
       */
      public Builder clearPageid() {
        copyOnWrite();
        instance.clearPageid();
        return this;
      }

      /**
       * <pre>
       *操作类别  参见systemlogoperid.h  SYSTEMLOG_OPERID
       * </pre>
       *
       * <code>fixed32 operid = 2;</code>
       */
      public int getOperid() {
        return instance.getOperid();
      }
      /**
       * <pre>
       *操作类别  参见systemlogoperid.h  SYSTEMLOG_OPERID
       * </pre>
       *
       * <code>fixed32 operid = 2;</code>
       */
      public Builder setOperid(int value) {
        copyOnWrite();
        instance.setOperid(value);
        return this;
      }
      /**
       * <pre>
       *操作类别  参见systemlogoperid.h  SYSTEMLOG_OPERID
       * </pre>
       *
       * <code>fixed32 operid = 2;</code>
       */
      public Builder clearOperid() {
        copyOnWrite();
        instance.clearOperid();
        return this;
      }

      /**
       * <pre>
       *操作的会议ID
       * </pre>
       *
       * <code>fixed32 meetid = 3;</code>
       */
      public int getMeetid() {
        return instance.getMeetid();
      }
      /**
       * <pre>
       *操作的会议ID
       * </pre>
       *
       * <code>fixed32 meetid = 3;</code>
       */
      public Builder setMeetid(int value) {
        copyOnWrite();
        instance.setMeetid(value);
        return this;
      }
      /**
       * <pre>
       *操作的会议ID
       * </pre>
       *
       * <code>fixed32 meetid = 3;</code>
       */
      public Builder clearMeetid() {
        copyOnWrite();
        instance.clearMeetid();
        return this;
      }

      /**
       * <pre>
       *操作的会场ID
       * </pre>
       *
       * <code>fixed32 roomid = 4;</code>
       */
      public int getRoomid() {
        return instance.getRoomid();
      }
      /**
       * <pre>
       *操作的会场ID
       * </pre>
       *
       * <code>fixed32 roomid = 4;</code>
       */
      public Builder setRoomid(int value) {
        copyOnWrite();
        instance.setRoomid(value);
        return this;
      }
      /**
       * <pre>
       *操作的会场ID
       * </pre>
       *
       * <code>fixed32 roomid = 4;</code>
       */
      public Builder clearRoomid() {
        copyOnWrite();
        instance.clearRoomid();
        return this;
      }

      /**
       * <pre>
       *操作的设备ID （添加时不需要填写）
       * </pre>
       *
       * <code>fixed32 deviceid = 5;</code>
       */
      public int getDeviceid() {
        return instance.getDeviceid();
      }
      /**
       * <pre>
       *操作的设备ID （添加时不需要填写）
       * </pre>
       *
       * <code>fixed32 deviceid = 5;</code>
       */
      public Builder setDeviceid(int value) {
        copyOnWrite();
        instance.setDeviceid(value);
        return this;
      }
      /**
       * <pre>
       *操作的设备ID （添加时不需要填写）
       * </pre>
       *
       * <code>fixed32 deviceid = 5;</code>
       */
      public Builder clearDeviceid() {
        copyOnWrite();
        instance.clearDeviceid();
        return this;
      }

      /**
       * <pre>
       *人员角色 参见Pb_MeetMemberRole 如果是管理员--人员ID是管理ID
       * </pre>
       *
       * <code>fixed32 urole = 6;</code>
       */
      public int getUrole() {
        return instance.getUrole();
      }
      /**
       * <pre>
       *人员角色 参见Pb_MeetMemberRole 如果是管理员--人员ID是管理ID
       * </pre>
       *
       * <code>fixed32 urole = 6;</code>
       */
      public Builder setUrole(int value) {
        copyOnWrite();
        instance.setUrole(value);
        return this;
      }
      /**
       * <pre>
       *人员角色 参见Pb_MeetMemberRole 如果是管理员--人员ID是管理ID
       * </pre>
       *
       * <code>fixed32 urole = 6;</code>
       */
      public Builder clearUrole() {
        copyOnWrite();
        instance.clearUrole();
        return this;
      }

      /**
       * <pre>
       *人员ID
       * </pre>
       *
       * <code>fixed32 uid = 7;</code>
       */
      public int getUid() {
        return instance.getUid();
      }
      /**
       * <pre>
       *人员ID
       * </pre>
       *
       * <code>fixed32 uid = 7;</code>
       */
      public Builder setUid(int value) {
        copyOnWrite();
        instance.setUid(value);
        return this;
      }
      /**
       * <pre>
       *人员ID
       * </pre>
       *
       * <code>fixed32 uid = 7;</code>
       */
      public Builder clearUid() {
        copyOnWrite();
        instance.clearUid();
        return this;
      }

      /**
       * <pre>
       *操作utc时间 微秒 （添加时不需要填写）
       * </pre>
       *
       * <code>fixed64 opertime = 8;</code>
       */
      public long getOpertime() {
        return instance.getOpertime();
      }
      /**
       * <pre>
       *操作utc时间 微秒 （添加时不需要填写）
       * </pre>
       *
       * <code>fixed64 opertime = 8;</code>
       */
      public Builder setOpertime(long value) {
        copyOnWrite();
        instance.setOpertime(value);
        return this;
      }
      /**
       * <pre>
       *操作utc时间 微秒 （添加时不需要填写）
       * </pre>
       *
       * <code>fixed64 opertime = 8;</code>
       */
      public Builder clearOpertime() {
        copyOnWrite();
        instance.clearOpertime();
        return this;
      }

      /**
       * <pre>
       *目前最多四个参数，根据操作对应的操作参数，用于快速统计，eg:播放的文件ID，播放的流设备ID,
       * </pre>
       *
       * <code>repeated fixed32 param = 9;</code>
       */
      public java.util.List<java.lang.Integer>
          getParamList() {
        return java.util.Collections.unmodifiableList(
            instance.getParamList());
      }
      /**
       * <pre>
       *目前最多四个参数，根据操作对应的操作参数，用于快速统计，eg:播放的文件ID，播放的流设备ID,
       * </pre>
       *
       * <code>repeated fixed32 param = 9;</code>
       */
      public int getParamCount() {
        return instance.getParamCount();
      }
      /**
       * <pre>
       *目前最多四个参数，根据操作对应的操作参数，用于快速统计，eg:播放的文件ID，播放的流设备ID,
       * </pre>
       *
       * <code>repeated fixed32 param = 9;</code>
       */
      public int getParam(int index) {
        return instance.getParam(index);
      }
      /**
       * <pre>
       *目前最多四个参数，根据操作对应的操作参数，用于快速统计，eg:播放的文件ID，播放的流设备ID,
       * </pre>
       *
       * <code>repeated fixed32 param = 9;</code>
       */
      public Builder setParam(
          int index, int value) {
        copyOnWrite();
        instance.setParam(index, value);
        return this;
      }
      /**
       * <pre>
       *目前最多四个参数，根据操作对应的操作参数，用于快速统计，eg:播放的文件ID，播放的流设备ID,
       * </pre>
       *
       * <code>repeated fixed32 param = 9;</code>
       */
      public Builder addParam(int value) {
        copyOnWrite();
        instance.addParam(value);
        return this;
      }
      /**
       * <pre>
       *目前最多四个参数，根据操作对应的操作参数，用于快速统计，eg:播放的文件ID，播放的流设备ID,
       * </pre>
       *
       * <code>repeated fixed32 param = 9;</code>
       */
      public Builder addAllParam(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllParam(values);
        return this;
      }
      /**
       * <pre>
       *目前最多四个参数，根据操作对应的操作参数，用于快速统计，eg:播放的文件ID，播放的流设备ID,
       * </pre>
       *
       * <code>repeated fixed32 param = 9;</code>
       */
      public Builder clearParam() {
        copyOnWrite();
        instance.clearParam();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pbui_Add_MeetSystemLog)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Add_MeetSystemLog();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          param_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Add_MeetSystemLog other = (com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Add_MeetSystemLog) arg1;
          pageid_ = visitor.visitInt(pageid_ != 0, pageid_,
              other.pageid_ != 0, other.pageid_);
          operid_ = visitor.visitInt(operid_ != 0, operid_,
              other.operid_ != 0, other.operid_);
          meetid_ = visitor.visitInt(meetid_ != 0, meetid_,
              other.meetid_ != 0, other.meetid_);
          roomid_ = visitor.visitInt(roomid_ != 0, roomid_,
              other.roomid_ != 0, other.roomid_);
          deviceid_ = visitor.visitInt(deviceid_ != 0, deviceid_,
              other.deviceid_ != 0, other.deviceid_);
          urole_ = visitor.visitInt(urole_ != 0, urole_,
              other.urole_ != 0, other.urole_);
          uid_ = visitor.visitInt(uid_ != 0, uid_,
              other.uid_ != 0, other.uid_);
          opertime_ = visitor.visitLong(opertime_ != 0L, opertime_,
              other.opertime_ != 0L, other.opertime_);
          param_= visitor.visitIntList(param_, other.param_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 13: {

                  pageid_ = input.readFixed32();
                  break;
                }
                case 21: {

                  operid_ = input.readFixed32();
                  break;
                }
                case 29: {

                  meetid_ = input.readFixed32();
                  break;
                }
                case 37: {

                  roomid_ = input.readFixed32();
                  break;
                }
                case 45: {

                  deviceid_ = input.readFixed32();
                  break;
                }
                case 53: {

                  urole_ = input.readFixed32();
                  break;
                }
                case 61: {

                  uid_ = input.readFixed32();
                  break;
                }
                case 65: {

                  opertime_ = input.readFixed64();
                  break;
                }
                case 77: {
                  if (!param_.isModifiable()) {
                    param_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(param_);
                  }
                  param_.addInt(input.readFixed32());
                  break;
                }
                case 74: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  if (!param_.isModifiable() && input.getBytesUntilLimit() > 0) {
                    final int currentSize = param_.size();
                    param_ = param_.mutableCopyWithCapacity(
                        currentSize + (length/4));
                  }
                  while (input.getBytesUntilLimit() > 0) {
                    param_.addInt(input.readFixed32());
                  }
                  input.popLimit(limit);
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Add_MeetSystemLog.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pbui_Add_MeetSystemLog)
    private static final com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Add_MeetSystemLog DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pbui_Add_MeetSystemLog();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Add_MeetSystemLog getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<pbui_Add_MeetSystemLog> PARSER;

    public static com.google.protobuf.Parser<pbui_Add_MeetSystemLog> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface pbui_Type_QueryMeetSystemLogOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pbui_Type_QueryMeetSystemLog)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *界面ID  参见systemlogoperid.h  PB_SYSTEMLOG_PAGEID
     * </pre>
     *
     * <code>fixed32 pageid = 1;</code>
     */
    int getPageid();

    /**
     * <pre>
     *操作类别  为0表示不作为查询条件
     * </pre>
     *
     * <code>fixed32 operid = 2;</code>
     */
    int getOperid();

    /**
     * <pre>
     *操作的会议ID 为0表示不作为查询条件
     * </pre>
     *
     * <code>fixed32 meetid = 3;</code>
     */
    int getMeetid();

    /**
     * <pre>
     *操作的会场ID 为0表示不作为查询条件
     * </pre>
     *
     * <code>fixed32 roomid = 4;</code>
     */
    int getRoomid();

    /**
     * <pre>
     *操作的设备ID 为0表示不作为查询条件
     * </pre>
     *
     * <code>fixed32 deviceid = 5;</code>
     */
    int getDeviceid();

    /**
     * <pre>
     *人员角色 参见Pb_MeetMemberRole 为0表示不作为查询条件
     * </pre>
     *
     * <code>fixed32 urole = 6;</code>
     */
    int getUrole();

    /**
     * <pre>
     *人员ID 为0表示不作为查询条件
     * </pre>
     *
     * <code>fixed32 uid = 7;</code>
     */
    int getUid();

    /**
     * <pre>
     *目前最多四个参数，根据操作对应的操作参数，为0表示不作为查询条件
     * </pre>
     *
     * <code>repeated fixed32 param = 8;</code>
     */
    java.util.List<java.lang.Integer> getParamList();
    /**
     * <pre>
     *目前最多四个参数，根据操作对应的操作参数，为0表示不作为查询条件
     * </pre>
     *
     * <code>repeated fixed32 param = 8;</code>
     */
    int getParamCount();
    /**
     * <pre>
     *目前最多四个参数，根据操作对应的操作参数，为0表示不作为查询条件
     * </pre>
     *
     * <code>repeated fixed32 param = 8;</code>
     */
    int getParam(int index);

    /**
     * <pre>
     *查询的起始记录utc时间 微秒 必须有效
     * </pre>
     *
     * <code>fixed64 startopertime = 9;</code>
     */
    long getStartopertime();

    /**
     * <pre>
     *查询的结束记录utc时间 微秒 必须有效
     * </pre>
     *
     * <code>fixed64 endopertime = 10;</code>
     */
    long getEndopertime();

    /**
     * <pre>
     *查询开始行 实现分页查询 必须有效
     * </pre>
     *
     * <code>fixed32 startrow = 11;</code>
     */
    int getStartrow();
  }
  /**
   * <pre>
   *管理日志 
   *type：Pb_TYPE_MEET_INTERFACE_SYSTEMLOG
   *method:查询
   * </pre>
   *
   * Protobuf type {@code pbui_Type_QueryMeetSystemLog}
   */
  public  static final class pbui_Type_QueryMeetSystemLog extends
      com.google.protobuf.GeneratedMessageLite<
          pbui_Type_QueryMeetSystemLog, pbui_Type_QueryMeetSystemLog.Builder> implements
      // @@protoc_insertion_point(message_implements:pbui_Type_QueryMeetSystemLog)
      pbui_Type_QueryMeetSystemLogOrBuilder {
    private pbui_Type_QueryMeetSystemLog() {
      param_ = emptyIntList();
    }
    private int bitField0_;
    public static final int PAGEID_FIELD_NUMBER = 1;
    private int pageid_;
    /**
     * <pre>
     *界面ID  参见systemlogoperid.h  PB_SYSTEMLOG_PAGEID
     * </pre>
     *
     * <code>fixed32 pageid = 1;</code>
     */
    public int getPageid() {
      return pageid_;
    }
    /**
     * <pre>
     *界面ID  参见systemlogoperid.h  PB_SYSTEMLOG_PAGEID
     * </pre>
     *
     * <code>fixed32 pageid = 1;</code>
     */
    private void setPageid(int value) {
      
      pageid_ = value;
    }
    /**
     * <pre>
     *界面ID  参见systemlogoperid.h  PB_SYSTEMLOG_PAGEID
     * </pre>
     *
     * <code>fixed32 pageid = 1;</code>
     */
    private void clearPageid() {
      
      pageid_ = 0;
    }

    public static final int OPERID_FIELD_NUMBER = 2;
    private int operid_;
    /**
     * <pre>
     *操作类别  为0表示不作为查询条件
     * </pre>
     *
     * <code>fixed32 operid = 2;</code>
     */
    public int getOperid() {
      return operid_;
    }
    /**
     * <pre>
     *操作类别  为0表示不作为查询条件
     * </pre>
     *
     * <code>fixed32 operid = 2;</code>
     */
    private void setOperid(int value) {
      
      operid_ = value;
    }
    /**
     * <pre>
     *操作类别  为0表示不作为查询条件
     * </pre>
     *
     * <code>fixed32 operid = 2;</code>
     */
    private void clearOperid() {
      
      operid_ = 0;
    }

    public static final int MEETID_FIELD_NUMBER = 3;
    private int meetid_;
    /**
     * <pre>
     *操作的会议ID 为0表示不作为查询条件
     * </pre>
     *
     * <code>fixed32 meetid = 3;</code>
     */
    public int getMeetid() {
      return meetid_;
    }
    /**
     * <pre>
     *操作的会议ID 为0表示不作为查询条件
     * </pre>
     *
     * <code>fixed32 meetid = 3;</code>
     */
    private void setMeetid(int value) {
      
      meetid_ = value;
    }
    /**
     * <pre>
     *操作的会议ID 为0表示不作为查询条件
     * </pre>
     *
     * <code>fixed32 meetid = 3;</code>
     */
    private void clearMeetid() {
      
      meetid_ = 0;
    }

    public static final int ROOMID_FIELD_NUMBER = 4;
    private int roomid_;
    /**
     * <pre>
     *操作的会场ID 为0表示不作为查询条件
     * </pre>
     *
     * <code>fixed32 roomid = 4;</code>
     */
    public int getRoomid() {
      return roomid_;
    }
    /**
     * <pre>
     *操作的会场ID 为0表示不作为查询条件
     * </pre>
     *
     * <code>fixed32 roomid = 4;</code>
     */
    private void setRoomid(int value) {
      
      roomid_ = value;
    }
    /**
     * <pre>
     *操作的会场ID 为0表示不作为查询条件
     * </pre>
     *
     * <code>fixed32 roomid = 4;</code>
     */
    private void clearRoomid() {
      
      roomid_ = 0;
    }

    public static final int DEVICEID_FIELD_NUMBER = 5;
    private int deviceid_;
    /**
     * <pre>
     *操作的设备ID 为0表示不作为查询条件
     * </pre>
     *
     * <code>fixed32 deviceid = 5;</code>
     */
    public int getDeviceid() {
      return deviceid_;
    }
    /**
     * <pre>
     *操作的设备ID 为0表示不作为查询条件
     * </pre>
     *
     * <code>fixed32 deviceid = 5;</code>
     */
    private void setDeviceid(int value) {
      
      deviceid_ = value;
    }
    /**
     * <pre>
     *操作的设备ID 为0表示不作为查询条件
     * </pre>
     *
     * <code>fixed32 deviceid = 5;</code>
     */
    private void clearDeviceid() {
      
      deviceid_ = 0;
    }

    public static final int UROLE_FIELD_NUMBER = 6;
    private int urole_;
    /**
     * <pre>
     *人员角色 参见Pb_MeetMemberRole 为0表示不作为查询条件
     * </pre>
     *
     * <code>fixed32 urole = 6;</code>
     */
    public int getUrole() {
      return urole_;
    }
    /**
     * <pre>
     *人员角色 参见Pb_MeetMemberRole 为0表示不作为查询条件
     * </pre>
     *
     * <code>fixed32 urole = 6;</code>
     */
    private void setUrole(int value) {
      
      urole_ = value;
    }
    /**
     * <pre>
     *人员角色 参见Pb_MeetMemberRole 为0表示不作为查询条件
     * </pre>
     *
     * <code>fixed32 urole = 6;</code>
     */
    private void clearUrole() {
      
      urole_ = 0;
    }

    public static final int UID_FIELD_NUMBER = 7;
    private int uid_;
    /**
     * <pre>
     *人员ID 为0表示不作为查询条件
     * </pre>
     *
     * <code>fixed32 uid = 7;</code>
     */
    public int getUid() {
      return uid_;
    }
    /**
     * <pre>
     *人员ID 为0表示不作为查询条件
     * </pre>
     *
     * <code>fixed32 uid = 7;</code>
     */
    private void setUid(int value) {
      
      uid_ = value;
    }
    /**
     * <pre>
     *人员ID 为0表示不作为查询条件
     * </pre>
     *
     * <code>fixed32 uid = 7;</code>
     */
    private void clearUid() {
      
      uid_ = 0;
    }

    public static final int PARAM_FIELD_NUMBER = 8;
    private com.google.protobuf.Internal.IntList param_;
    /**
     * <pre>
     *目前最多四个参数，根据操作对应的操作参数，为0表示不作为查询条件
     * </pre>
     *
     * <code>repeated fixed32 param = 8;</code>
     */
    public java.util.List<java.lang.Integer>
        getParamList() {
      return param_;
    }
    /**
     * <pre>
     *目前最多四个参数，根据操作对应的操作参数，为0表示不作为查询条件
     * </pre>
     *
     * <code>repeated fixed32 param = 8;</code>
     */
    public int getParamCount() {
      return param_.size();
    }
    /**
     * <pre>
     *目前最多四个参数，根据操作对应的操作参数，为0表示不作为查询条件
     * </pre>
     *
     * <code>repeated fixed32 param = 8;</code>
     */
    public int getParam(int index) {
      return param_.getInt(index);
    }
    private void ensureParamIsMutable() {
      if (!param_.isModifiable()) {
        param_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(param_);
       }
    }
    /**
     * <pre>
     *目前最多四个参数，根据操作对应的操作参数，为0表示不作为查询条件
     * </pre>
     *
     * <code>repeated fixed32 param = 8;</code>
     */
    private void setParam(
        int index, int value) {
      ensureParamIsMutable();
      param_.setInt(index, value);
    }
    /**
     * <pre>
     *目前最多四个参数，根据操作对应的操作参数，为0表示不作为查询条件
     * </pre>
     *
     * <code>repeated fixed32 param = 8;</code>
     */
    private void addParam(int value) {
      ensureParamIsMutable();
      param_.addInt(value);
    }
    /**
     * <pre>
     *目前最多四个参数，根据操作对应的操作参数，为0表示不作为查询条件
     * </pre>
     *
     * <code>repeated fixed32 param = 8;</code>
     */
    private void addAllParam(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureParamIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, param_);
    }
    /**
     * <pre>
     *目前最多四个参数，根据操作对应的操作参数，为0表示不作为查询条件
     * </pre>
     *
     * <code>repeated fixed32 param = 8;</code>
     */
    private void clearParam() {
      param_ = emptyIntList();
    }

    public static final int STARTOPERTIME_FIELD_NUMBER = 9;
    private long startopertime_;
    /**
     * <pre>
     *查询的起始记录utc时间 微秒 必须有效
     * </pre>
     *
     * <code>fixed64 startopertime = 9;</code>
     */
    public long getStartopertime() {
      return startopertime_;
    }
    /**
     * <pre>
     *查询的起始记录utc时间 微秒 必须有效
     * </pre>
     *
     * <code>fixed64 startopertime = 9;</code>
     */
    private void setStartopertime(long value) {
      
      startopertime_ = value;
    }
    /**
     * <pre>
     *查询的起始记录utc时间 微秒 必须有效
     * </pre>
     *
     * <code>fixed64 startopertime = 9;</code>
     */
    private void clearStartopertime() {
      
      startopertime_ = 0L;
    }

    public static final int ENDOPERTIME_FIELD_NUMBER = 10;
    private long endopertime_;
    /**
     * <pre>
     *查询的结束记录utc时间 微秒 必须有效
     * </pre>
     *
     * <code>fixed64 endopertime = 10;</code>
     */
    public long getEndopertime() {
      return endopertime_;
    }
    /**
     * <pre>
     *查询的结束记录utc时间 微秒 必须有效
     * </pre>
     *
     * <code>fixed64 endopertime = 10;</code>
     */
    private void setEndopertime(long value) {
      
      endopertime_ = value;
    }
    /**
     * <pre>
     *查询的结束记录utc时间 微秒 必须有效
     * </pre>
     *
     * <code>fixed64 endopertime = 10;</code>
     */
    private void clearEndopertime() {
      
      endopertime_ = 0L;
    }

    public static final int STARTROW_FIELD_NUMBER = 11;
    private int startrow_;
    /**
     * <pre>
     *查询开始行 实现分页查询 必须有效
     * </pre>
     *
     * <code>fixed32 startrow = 11;</code>
     */
    public int getStartrow() {
      return startrow_;
    }
    /**
     * <pre>
     *查询开始行 实现分页查询 必须有效
     * </pre>
     *
     * <code>fixed32 startrow = 11;</code>
     */
    private void setStartrow(int value) {
      
      startrow_ = value;
    }
    /**
     * <pre>
     *查询开始行 实现分页查询 必须有效
     * </pre>
     *
     * <code>fixed32 startrow = 11;</code>
     */
    private void clearStartrow() {
      
      startrow_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (pageid_ != 0) {
        output.writeFixed32(1, pageid_);
      }
      if (operid_ != 0) {
        output.writeFixed32(2, operid_);
      }
      if (meetid_ != 0) {
        output.writeFixed32(3, meetid_);
      }
      if (roomid_ != 0) {
        output.writeFixed32(4, roomid_);
      }
      if (deviceid_ != 0) {
        output.writeFixed32(5, deviceid_);
      }
      if (urole_ != 0) {
        output.writeFixed32(6, urole_);
      }
      if (uid_ != 0) {
        output.writeFixed32(7, uid_);
      }
      for (int i = 0; i < param_.size(); i++) {
        output.writeFixed32(8, param_.getInt(i));
      }
      if (startopertime_ != 0L) {
        output.writeFixed64(9, startopertime_);
      }
      if (endopertime_ != 0L) {
        output.writeFixed64(10, endopertime_);
      }
      if (startrow_ != 0) {
        output.writeFixed32(11, startrow_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (pageid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, pageid_);
      }
      if (operid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(2, operid_);
      }
      if (meetid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(3, meetid_);
      }
      if (roomid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(4, roomid_);
      }
      if (deviceid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(5, deviceid_);
      }
      if (urole_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(6, urole_);
      }
      if (uid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(7, uid_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getParamList().size();
        size += dataSize;
        size += 1 * getParamList().size();
      }
      if (startopertime_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(9, startopertime_);
      }
      if (endopertime_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(10, endopertime_);
      }
      if (startrow_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(11, startrow_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_QueryMeetSystemLog parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_QueryMeetSystemLog parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_QueryMeetSystemLog parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_QueryMeetSystemLog parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_QueryMeetSystemLog parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_QueryMeetSystemLog parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_QueryMeetSystemLog parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_QueryMeetSystemLog parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_QueryMeetSystemLog parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_QueryMeetSystemLog parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_QueryMeetSystemLog parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_QueryMeetSystemLog parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_QueryMeetSystemLog prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     *管理日志 
     *type：Pb_TYPE_MEET_INTERFACE_SYSTEMLOG
     *method:查询
     * </pre>
     *
     * Protobuf type {@code pbui_Type_QueryMeetSystemLog}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_QueryMeetSystemLog, Builder> implements
        // @@protoc_insertion_point(builder_implements:pbui_Type_QueryMeetSystemLog)
        com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_QueryMeetSystemLogOrBuilder {
      // Construct using com.mogujie.tt.com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_QueryMeetSystemLog.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *界面ID  参见systemlogoperid.h  PB_SYSTEMLOG_PAGEID
       * </pre>
       *
       * <code>fixed32 pageid = 1;</code>
       */
      public int getPageid() {
        return instance.getPageid();
      }
      /**
       * <pre>
       *界面ID  参见systemlogoperid.h  PB_SYSTEMLOG_PAGEID
       * </pre>
       *
       * <code>fixed32 pageid = 1;</code>
       */
      public Builder setPageid(int value) {
        copyOnWrite();
        instance.setPageid(value);
        return this;
      }
      /**
       * <pre>
       *界面ID  参见systemlogoperid.h  PB_SYSTEMLOG_PAGEID
       * </pre>
       *
       * <code>fixed32 pageid = 1;</code>
       */
      public Builder clearPageid() {
        copyOnWrite();
        instance.clearPageid();
        return this;
      }

      /**
       * <pre>
       *操作类别  为0表示不作为查询条件
       * </pre>
       *
       * <code>fixed32 operid = 2;</code>
       */
      public int getOperid() {
        return instance.getOperid();
      }
      /**
       * <pre>
       *操作类别  为0表示不作为查询条件
       * </pre>
       *
       * <code>fixed32 operid = 2;</code>
       */
      public Builder setOperid(int value) {
        copyOnWrite();
        instance.setOperid(value);
        return this;
      }
      /**
       * <pre>
       *操作类别  为0表示不作为查询条件
       * </pre>
       *
       * <code>fixed32 operid = 2;</code>
       */
      public Builder clearOperid() {
        copyOnWrite();
        instance.clearOperid();
        return this;
      }

      /**
       * <pre>
       *操作的会议ID 为0表示不作为查询条件
       * </pre>
       *
       * <code>fixed32 meetid = 3;</code>
       */
      public int getMeetid() {
        return instance.getMeetid();
      }
      /**
       * <pre>
       *操作的会议ID 为0表示不作为查询条件
       * </pre>
       *
       * <code>fixed32 meetid = 3;</code>
       */
      public Builder setMeetid(int value) {
        copyOnWrite();
        instance.setMeetid(value);
        return this;
      }
      /**
       * <pre>
       *操作的会议ID 为0表示不作为查询条件
       * </pre>
       *
       * <code>fixed32 meetid = 3;</code>
       */
      public Builder clearMeetid() {
        copyOnWrite();
        instance.clearMeetid();
        return this;
      }

      /**
       * <pre>
       *操作的会场ID 为0表示不作为查询条件
       * </pre>
       *
       * <code>fixed32 roomid = 4;</code>
       */
      public int getRoomid() {
        return instance.getRoomid();
      }
      /**
       * <pre>
       *操作的会场ID 为0表示不作为查询条件
       * </pre>
       *
       * <code>fixed32 roomid = 4;</code>
       */
      public Builder setRoomid(int value) {
        copyOnWrite();
        instance.setRoomid(value);
        return this;
      }
      /**
       * <pre>
       *操作的会场ID 为0表示不作为查询条件
       * </pre>
       *
       * <code>fixed32 roomid = 4;</code>
       */
      public Builder clearRoomid() {
        copyOnWrite();
        instance.clearRoomid();
        return this;
      }

      /**
       * <pre>
       *操作的设备ID 为0表示不作为查询条件
       * </pre>
       *
       * <code>fixed32 deviceid = 5;</code>
       */
      public int getDeviceid() {
        return instance.getDeviceid();
      }
      /**
       * <pre>
       *操作的设备ID 为0表示不作为查询条件
       * </pre>
       *
       * <code>fixed32 deviceid = 5;</code>
       */
      public Builder setDeviceid(int value) {
        copyOnWrite();
        instance.setDeviceid(value);
        return this;
      }
      /**
       * <pre>
       *操作的设备ID 为0表示不作为查询条件
       * </pre>
       *
       * <code>fixed32 deviceid = 5;</code>
       */
      public Builder clearDeviceid() {
        copyOnWrite();
        instance.clearDeviceid();
        return this;
      }

      /**
       * <pre>
       *人员角色 参见Pb_MeetMemberRole 为0表示不作为查询条件
       * </pre>
       *
       * <code>fixed32 urole = 6;</code>
       */
      public int getUrole() {
        return instance.getUrole();
      }
      /**
       * <pre>
       *人员角色 参见Pb_MeetMemberRole 为0表示不作为查询条件
       * </pre>
       *
       * <code>fixed32 urole = 6;</code>
       */
      public Builder setUrole(int value) {
        copyOnWrite();
        instance.setUrole(value);
        return this;
      }
      /**
       * <pre>
       *人员角色 参见Pb_MeetMemberRole 为0表示不作为查询条件
       * </pre>
       *
       * <code>fixed32 urole = 6;</code>
       */
      public Builder clearUrole() {
        copyOnWrite();
        instance.clearUrole();
        return this;
      }

      /**
       * <pre>
       *人员ID 为0表示不作为查询条件
       * </pre>
       *
       * <code>fixed32 uid = 7;</code>
       */
      public int getUid() {
        return instance.getUid();
      }
      /**
       * <pre>
       *人员ID 为0表示不作为查询条件
       * </pre>
       *
       * <code>fixed32 uid = 7;</code>
       */
      public Builder setUid(int value) {
        copyOnWrite();
        instance.setUid(value);
        return this;
      }
      /**
       * <pre>
       *人员ID 为0表示不作为查询条件
       * </pre>
       *
       * <code>fixed32 uid = 7;</code>
       */
      public Builder clearUid() {
        copyOnWrite();
        instance.clearUid();
        return this;
      }

      /**
       * <pre>
       *目前最多四个参数，根据操作对应的操作参数，为0表示不作为查询条件
       * </pre>
       *
       * <code>repeated fixed32 param = 8;</code>
       */
      public java.util.List<java.lang.Integer>
          getParamList() {
        return java.util.Collections.unmodifiableList(
            instance.getParamList());
      }
      /**
       * <pre>
       *目前最多四个参数，根据操作对应的操作参数，为0表示不作为查询条件
       * </pre>
       *
       * <code>repeated fixed32 param = 8;</code>
       */
      public int getParamCount() {
        return instance.getParamCount();
      }
      /**
       * <pre>
       *目前最多四个参数，根据操作对应的操作参数，为0表示不作为查询条件
       * </pre>
       *
       * <code>repeated fixed32 param = 8;</code>
       */
      public int getParam(int index) {
        return instance.getParam(index);
      }
      /**
       * <pre>
       *目前最多四个参数，根据操作对应的操作参数，为0表示不作为查询条件
       * </pre>
       *
       * <code>repeated fixed32 param = 8;</code>
       */
      public Builder setParam(
          int index, int value) {
        copyOnWrite();
        instance.setParam(index, value);
        return this;
      }
      /**
       * <pre>
       *目前最多四个参数，根据操作对应的操作参数，为0表示不作为查询条件
       * </pre>
       *
       * <code>repeated fixed32 param = 8;</code>
       */
      public Builder addParam(int value) {
        copyOnWrite();
        instance.addParam(value);
        return this;
      }
      /**
       * <pre>
       *目前最多四个参数，根据操作对应的操作参数，为0表示不作为查询条件
       * </pre>
       *
       * <code>repeated fixed32 param = 8;</code>
       */
      public Builder addAllParam(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllParam(values);
        return this;
      }
      /**
       * <pre>
       *目前最多四个参数，根据操作对应的操作参数，为0表示不作为查询条件
       * </pre>
       *
       * <code>repeated fixed32 param = 8;</code>
       */
      public Builder clearParam() {
        copyOnWrite();
        instance.clearParam();
        return this;
      }

      /**
       * <pre>
       *查询的起始记录utc时间 微秒 必须有效
       * </pre>
       *
       * <code>fixed64 startopertime = 9;</code>
       */
      public long getStartopertime() {
        return instance.getStartopertime();
      }
      /**
       * <pre>
       *查询的起始记录utc时间 微秒 必须有效
       * </pre>
       *
       * <code>fixed64 startopertime = 9;</code>
       */
      public Builder setStartopertime(long value) {
        copyOnWrite();
        instance.setStartopertime(value);
        return this;
      }
      /**
       * <pre>
       *查询的起始记录utc时间 微秒 必须有效
       * </pre>
       *
       * <code>fixed64 startopertime = 9;</code>
       */
      public Builder clearStartopertime() {
        copyOnWrite();
        instance.clearStartopertime();
        return this;
      }

      /**
       * <pre>
       *查询的结束记录utc时间 微秒 必须有效
       * </pre>
       *
       * <code>fixed64 endopertime = 10;</code>
       */
      public long getEndopertime() {
        return instance.getEndopertime();
      }
      /**
       * <pre>
       *查询的结束记录utc时间 微秒 必须有效
       * </pre>
       *
       * <code>fixed64 endopertime = 10;</code>
       */
      public Builder setEndopertime(long value) {
        copyOnWrite();
        instance.setEndopertime(value);
        return this;
      }
      /**
       * <pre>
       *查询的结束记录utc时间 微秒 必须有效
       * </pre>
       *
       * <code>fixed64 endopertime = 10;</code>
       */
      public Builder clearEndopertime() {
        copyOnWrite();
        instance.clearEndopertime();
        return this;
      }

      /**
       * <pre>
       *查询开始行 实现分页查询 必须有效
       * </pre>
       *
       * <code>fixed32 startrow = 11;</code>
       */
      public int getStartrow() {
        return instance.getStartrow();
      }
      /**
       * <pre>
       *查询开始行 实现分页查询 必须有效
       * </pre>
       *
       * <code>fixed32 startrow = 11;</code>
       */
      public Builder setStartrow(int value) {
        copyOnWrite();
        instance.setStartrow(value);
        return this;
      }
      /**
       * <pre>
       *查询开始行 实现分页查询 必须有效
       * </pre>
       *
       * <code>fixed32 startrow = 11;</code>
       */
      public Builder clearStartrow() {
        copyOnWrite();
        instance.clearStartrow();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pbui_Type_QueryMeetSystemLog)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_QueryMeetSystemLog();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          param_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_QueryMeetSystemLog other = (com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_QueryMeetSystemLog) arg1;
          pageid_ = visitor.visitInt(pageid_ != 0, pageid_,
              other.pageid_ != 0, other.pageid_);
          operid_ = visitor.visitInt(operid_ != 0, operid_,
              other.operid_ != 0, other.operid_);
          meetid_ = visitor.visitInt(meetid_ != 0, meetid_,
              other.meetid_ != 0, other.meetid_);
          roomid_ = visitor.visitInt(roomid_ != 0, roomid_,
              other.roomid_ != 0, other.roomid_);
          deviceid_ = visitor.visitInt(deviceid_ != 0, deviceid_,
              other.deviceid_ != 0, other.deviceid_);
          urole_ = visitor.visitInt(urole_ != 0, urole_,
              other.urole_ != 0, other.urole_);
          uid_ = visitor.visitInt(uid_ != 0, uid_,
              other.uid_ != 0, other.uid_);
          param_= visitor.visitIntList(param_, other.param_);
          startopertime_ = visitor.visitLong(startopertime_ != 0L, startopertime_,
              other.startopertime_ != 0L, other.startopertime_);
          endopertime_ = visitor.visitLong(endopertime_ != 0L, endopertime_,
              other.endopertime_ != 0L, other.endopertime_);
          startrow_ = visitor.visitInt(startrow_ != 0, startrow_,
              other.startrow_ != 0, other.startrow_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 13: {

                  pageid_ = input.readFixed32();
                  break;
                }
                case 21: {

                  operid_ = input.readFixed32();
                  break;
                }
                case 29: {

                  meetid_ = input.readFixed32();
                  break;
                }
                case 37: {

                  roomid_ = input.readFixed32();
                  break;
                }
                case 45: {

                  deviceid_ = input.readFixed32();
                  break;
                }
                case 53: {

                  urole_ = input.readFixed32();
                  break;
                }
                case 61: {

                  uid_ = input.readFixed32();
                  break;
                }
                case 69: {
                  if (!param_.isModifiable()) {
                    param_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(param_);
                  }
                  param_.addInt(input.readFixed32());
                  break;
                }
                case 66: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  if (!param_.isModifiable() && input.getBytesUntilLimit() > 0) {
                    final int currentSize = param_.size();
                    param_ = param_.mutableCopyWithCapacity(
                        currentSize + (length/4));
                  }
                  while (input.getBytesUntilLimit() > 0) {
                    param_.addInt(input.readFixed32());
                  }
                  input.popLimit(limit);
                  break;
                }
                case 73: {

                  startopertime_ = input.readFixed64();
                  break;
                }
                case 81: {

                  endopertime_ = input.readFixed64();
                  break;
                }
                case 93: {

                  startrow_ = input.readFixed32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_QueryMeetSystemLog.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pbui_Type_QueryMeetSystemLog)
    private static final com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_QueryMeetSystemLog DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new pbui_Type_QueryMeetSystemLog();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.mogujie.tt.protobuf.InterfaceSystemlog.pbui_Type_QueryMeetSystemLog getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<pbui_Type_QueryMeetSystemLog> PARSER;

    public static com.google.protobuf.Parser<pbui_Type_QueryMeetSystemLog> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
